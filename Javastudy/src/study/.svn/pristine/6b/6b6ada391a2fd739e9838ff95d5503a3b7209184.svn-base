/**
 * agw-ne
 *
 * Copyright ⓒ 2018 kt corp. All rights reserved.
 *
 * This is a proprietary software of kt corp, and you may not use this file except in
 * compliance with license agreement with kt corp. Any redistribution or use of this
 * software, with or without modification shall be strictly prohibited without prior written
 * approval of kt corp, and the copyright notice above does not evidence any actual or
 * intended publication of such software.
 * 
 * @ author kt
 * @ since 2018-04-15
 * @ file FacilityServiceImpl.java
 * @ version 1.0
 * @ see
 * @ Copyright ⓒ 2018 By kt corp. All rights reserved.
 */

package kr.co.kt.agwne.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import kr.co.kt.agwne.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import kr.co.kt.agwne.dao.FacilityDAO;
import kr.co.kt.agwne.service.FacilityService;
import kr.co.kt.common.Attachment;
import kr.co.kt.common.ParamValidatChk;
import kr.co.kt.common.excel.ExcelRead;
import kr.co.kt.common.excel.ExcelReadOption;
import kr.co.kt.common.excel.ExcelWrite;
import kr.co.kt.common.excel.ExcelWriteOption;

@Service
public class FacilityServiceImpl extends ParamValidatChk implements FacilityService {

	@Inject
	private FacilityDAO dao;
	
	@Autowired
	Attachment attachment;
	
	@Override
	public Object selectMacAll(HashMap<String, Object> map) {
		return dao.selectMacAll(map);
	}

	@Override
	public Object selectMacCnt(HashMap<String, Object> map) {
		return dao.selectMacCnt(map);
	}
	
	@Override
	public int selectDuplicate(String agw_mac) {
		return dao.selectDuplicate(agw_mac);
	}

	@SuppressWarnings({ "unused", "null" })
	@Override
	public MacExcelVO insertExcelUpload(MultipartHttpServletRequest request, String user_id) throws Exception {
		
		// 1. 파일저장하기
		attachment.Attachment(request, user_id);
		MacExcelVO excelVO = attachment.getExcelVO();
		
		//2. 파일읽기
		ExcelReadOption excelReadOption = new ExcelReadOption();
		System.out.println(excelVO.getFilepath() + excelVO.getFilename_new());
		excelReadOption.setFilePath(excelVO.getFilepath() + excelVO.getFilename_new());
		excelReadOption.setOutputColumns("A", "B", "C");
		excelReadOption.setStartRow(2);
		
		List<Map<String, String>> excelContent = ExcelRead.read(excelReadOption);
		
		List<MacVO> insertList = new ArrayList<MacVO>();
		List<MacVO> errorList = new ArrayList<MacVO>();
		
		int index = 0;
		for (Map<String, String> article: excelContent) {
			MacVO vo = new MacVO();
			vo.setSerial_num(article.get("A"));
			vo.setAgw_mac(article.get("B"));
			vo.setEpon_mac(article.get("C"));
			vo.setInput_id(user_id);
			vo.setUpdate_id(user_id);
			System.out.println(index++ +"+++++++++++++++++++++++"+ vo.toString());
			int cnt = dao.selectDuplicate(vo.getAgw_mac());
			if (cnt == 0) {
				try {
					insertList.add(vo);
					dao.insertOrUpdateExcelUpload(vo);
				} catch (Exception e) {
					vo.setMsg(e.getMessage());
					errorList.add(vo);
					e.printStackTrace();
				}
			} else {
				vo.setMsg("Duplicate");
				errorList.add(vo);
			}
		}
		
		// 3.insert 파일 저장
		if (insertList.size() > 0) {
			String insert_file = "insrt_"+ excelVO.getFilename_new();
			excelVO.setInsert_file(insert_file);
			ExcelWriteOption writeOption = new ExcelWriteOption();
			writeOption.setSavePath(excelReadOption.getFilePath());
			writeOption.setFilePath(excelVO.getFilepath() + excelVO.getInsert_file());
			writeOption.setFileName(insert_file);
			writeOption.setSheetName(new SimpleDateFormat("MMdd").format(new Date()) + "insert");
			List<String> titles = new ArrayList<String>();
			titles.add("serial_num");
			titles.add("agw_mac");
			titles.add("epon_mac");
			writeOption.setTitles(titles);
			
			List<String[]> contents = new ArrayList<String[]>();
			String[] row = new String[3];
			for (MacVO vo : insertList) {
				row = new String[3];
				
				row[0] = vo.getSerial_num();
				row[1] = vo.getAgw_mac();
				row[2] = vo.getEpon_mac();
				
				contents.add(row);
			}
			writeOption.setContents(contents);
			ExcelWrite.write(writeOption);
		}
		
		// 4.error 파일 저장
		if (errorList.size() > 0) {
			String error_file = "error_"+ excelVO.getFilename_new();
			excelVO.setDuplicate_file(error_file);
			ExcelWriteOption writeOption = new ExcelWriteOption();
			writeOption.setSavePath(excelReadOption.getFilePath());
			writeOption.setFilePath(excelVO.getFilepath() + excelVO.getDuplicate_file());
			writeOption.setFileName(error_file);
			writeOption.setSheetName(new SimpleDateFormat("MMdd").format(new Date()) + "error");
			List<String> titles = new ArrayList<String>();
			titles.add("serial_num");
			titles.add("agw_mac");
			titles.add("epon_mac");
			titles.add("msg");
			writeOption.setTitles(titles);
			
			List<String[]> contents = new ArrayList<String[]>();
			String[] row = new String[4];
			for (MacVO vo : errorList) {
				row = new String[4];
				
				row[0] = vo.getSerial_num();
				row[1] = vo.getAgw_mac();
				row[2] = vo.getEpon_mac();
				row[3] = vo.getMsg();
				
				contents.add(row);
			}
			writeOption.setContents(contents);
			ExcelWrite.write(writeOption);
		}
		
		// 5.error 파일 다운로드
		dao.updateExcelFile(excelVO);
		
		return excelVO;
	}

	@Override
	public MacExcelVO selectMacExcel(int excel_no) {
		return dao.selectMacExcel(excel_no);
	}

	@Override
	public void insertOrUpdateMac(MacOneVO vo) {
		dao.insertOrUpdateMac(vo);
	}

	@Override
	public int excelUploadChk(String agw_mac) {
		return dao.excelUploadChk(agw_mac);
	}

	@Override
	public void macDelete(HashMap<String, Object> map) {
		dao.macDelete(map);
	}

	@Override
	public MacOneVO macOneInfo(int mac_no) {
		return dao.macOneInfo(mac_no);
	}

	@Override
	public int macUploadChk(String agw_mac) {
		return dao.macUploadChk(agw_mac);
	}

	@Override
	public void updateOK(MacOneVO vo) {
		dao.updateOK(vo);
	}

    @Override
    public Object reformFacilList(SearchReformFacilVO vo) {
        return dao.reformFacilList(vo);
    }

}
