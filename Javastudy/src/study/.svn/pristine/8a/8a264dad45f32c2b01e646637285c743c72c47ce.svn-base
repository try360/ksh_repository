/**
 * agw-ne
 *
 * Copyright ¨Ï 2018 kt corp. All rights reserved.
 *
 * This is a proprietary software of kt corp, and you may not use this file except in
 * compliance with license agreement with kt corp. Any redistribution or use of this
 * software, with or without modification shall be strictly prohibited without prior written
 * approval of kt corp, and the copyright notice above does not evidence any actual or
 * intended publication of such software.
 * 
 * @ author kt
 * @ since 2018-04-15
 * @ file ProcessDAOImpl.java
 * @ version 1.0
 * @ see
 * @ Copyright ¨Ï 2018 By kt corp. All rights reserved.
 */

package kr.co.kt.agwne.dao.impl;

import java.util.HashMap;
import java.util.List;

import javax.inject.Inject;

import org.apache.ibatis.session.SqlSession;
import org.springframework.stereotype.Repository;

import kr.co.kt.agwne.dao.ProcessDAO;
import kr.co.kt.agwne.dto.ConstructVO;
import kr.co.kt.agwne.dto.ModelInfoVO;
import kr.co.kt.agwne.dto.ProcessVO;
 

@Repository
public class ProcessDAOImpl implements ProcessDAO {

    @Inject
    private SqlSession sqlSession;

    private static final String Namespace = "kr.co.kt.agwne.processMapper";


	@Override
	public int process_reg(ProcessVO psVO) throws Exception {
		int neoss_no = psVO.getNeoss_no();
		if("00".equals(psVO.getStatus_cd())) {
			sqlSession.update(Namespace + ".process_current_yn_update", neoss_no);
		}
		sqlSession.insert(Namespace + ".process_reg", psVO);
		
		return psVO.getProcess_no(); 
	}


	@Override
	public ProcessVO process_info_ajax(int process_no) throws Exception {
		// TODO Auto-generated method stub
		return  sqlSession.selectOne(Namespace + ".process_info_ajax", process_no);
	}


	@Override
	public List<ProcessVO> process_list(int neoss_no) throws Exception {
		// TODO Auto-generated method stub
		return sqlSession.selectList(Namespace + ".process_list",neoss_no );
	}
	
	@Override
	public Object process_modelInfo_reg(ModelInfoVO mdVO) throws Exception {
		return sqlSession.insert(Namespace + ".process_modelInfo_reg", mdVO); 
	}


	@Override
	public ModelInfoVO process_modelInfo_view(HashMap<String, Object> info) {
		return  sqlSession.selectOne(Namespace + ".process_modelInfo_view", info);
	}


	@Override
	public HashMap<String, Object> process_contents(int neoss_no) throws Exception {
		return  sqlSession.selectOne(Namespace + ".process_contents", neoss_no);
	}

	@Override
	public HashMap<String, Object> process_contents_01(int neoss_no) throws Exception {
		return  sqlSession.selectOne(Namespace + ".process_contents_01", neoss_no);
	}

	@Override
	public int process_modi(ProcessVO psVO) throws Exception {
		return sqlSession.update(Namespace + ".process_modi", psVO);
	}


	@Override
	public Object selectMacSearching(HashMap<String, Object> macMap) {
		return sqlSession.selectList(Namespace + ".selectMacSearching", macMap);
	}


	@Override
	public Object selectExMailing(String orgscode) {
		return sqlSession.selectList(Namespace +".selectExMailing", orgscode);
	}


	@Override
	public Object selectCurrent(int neoss_no) {
		return sqlSession.selectList(Namespace +".selectCurrent", neoss_no);
	}


	@Override
	public String selectEponSearching(String agw_mac) {
		return sqlSession.selectOne(Namespace +".selectEponSearching", agw_mac);
	}


	@Override
	public int selectCntManagedip(String managed_ip) {
		return sqlSession.selectOne(Namespace +".selectCntManagedip", managed_ip);
	}


	@Override
	public void updateProcess_back(ProcessVO psVO) {
		sqlSession.update(Namespace +".updateProcess_back", psVO);
	}


	@Override
	public void delete_construct_mem(ConstructVO vo) {
		sqlSession.update(Namespace +".delete_construct_mem", vo);
	}


	@Override
	public void delete_construct(ConstructVO vo) {
		sqlSession.update(Namespace +".delete_construct", vo);
	}


	@Override
	public int selectCntMegacoip(String megaco_ip) {
		return sqlSession.selectOne(Namespace +".selectCntMegacoip", megaco_ip);
	}

}
