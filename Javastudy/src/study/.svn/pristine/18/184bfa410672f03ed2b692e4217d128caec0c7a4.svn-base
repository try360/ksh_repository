/**
 * agw-ne
 *
 * Copyright ⓒ 2018 kt corp. All rights reserved.
 *
 * This is a proprietary software of kt corp, and you may not use this file except in
 * compliance with license agreement with kt corp. Any redistribution or use of this
 * software, with or without modification shall be strictly prohibited without prior written
 * approval of kt corp, and the copyright notice above does not evidence any actual or
 * intended publication of such software.
 * 
 * @ author kt
 * @ since 2018-04-15
 * @ file ReformAgwController.java
 * @ version 1.0
 * @ see
 * @ Copyright ⓒ 2018 By kt corp. All rights reserved.
 */

package kr.co.kt.agwne.web;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import kr.co.kt.agwne.dto.ApprovalInfoVO;
import kr.co.kt.agwne.dto.AttachVO;
import kr.co.kt.agwne.dto.BusinessVO;
import kr.co.kt.agwne.dto.CodeVO;
import kr.co.kt.agwne.dto.ConfirmUserVO;
import kr.co.kt.agwne.dto.ConstructVO;
import kr.co.kt.agwne.dto.EmailVO;
import kr.co.kt.agwne.dto.ModelInfoVO;
import kr.co.kt.agwne.dto.OfficeVO;
import kr.co.kt.agwne.dto.OrgVO;
import kr.co.kt.agwne.dto.ProcessVO;
import kr.co.kt.agwne.dto.ReformExcelVO;
import kr.co.kt.agwne.dto.ReformVO;
import kr.co.kt.agwne.dto.SearchVO;
import kr.co.kt.agwne.dto.UserInfoVO;
import kr.co.kt.agwne.dto.UserRoleVO;
import kr.co.kt.agwne.service.AttachService;
import kr.co.kt.agwne.service.CodeService;
import kr.co.kt.agwne.service.EmailService;
import kr.co.kt.agwne.service.IncludeSearchService;
import kr.co.kt.agwne.service.OfficeService;
import kr.co.kt.agwne.service.ProcessService;
import kr.co.kt.agwne.service.ReformService;
import kr.co.kt.agwne.service.UserRoleService;
import kr.co.kt.common.Attachment;
import kr.co.kt.common.CommonUtility;
import kr.co.kt.common.EmailSender;
import kr.co.kt.common.ParamValidatChk;

@Controller
@RequestMapping("/reform")
public class ReformAgwController extends ParamValidatChk {
	private static final Logger logger = LoggerFactory.getLogger(ReformAgwController.class);
	private static final String table_gb = "t_reform";
	private static final String agw_cd = "02";
    @Inject
    private OfficeService officeService;
    @Autowired
    private ReformService reformService;
    @Inject
    private ProcessService processService;
    @Inject
    private AttachService attachService;
    @Autowired
    private Attachment attachment;
    @Inject
    private CommonUtility commonutil;
    @Inject
    private IncludeSearchService includeService;
    @Inject
    private EmailService emailService;
	@Autowired
	private EmailSender emailSender;
	@Autowired
    private UserRoleService userRoleService;
	@Inject
	private CodeService codeService;


	public HashMap<String, Object> getPageInfo(SearchVO vo, HttpSession session) throws UnsupportedEncodingException {
		HashMap<String, Object> pageInfo = new HashMap<String, Object>();
		String param = "";
		
        int currentPageNo = 1;
        if (isNull(vo.getCurrentPage()) || isEmpty(vo.getCurrentPage())) {
        	currentPageNo = 1;
        } else {
            if (!isNumeric(vo.getCurrentPage())) {
            	currentPageNo = 1;
            } else {
                try {
                    currentPageNo = Integer.parseInt(vo.getCurrentPage());
                } catch (Exception e) {
                    currentPageNo = 1;
                }
            }
        }
        param += "currentPage="+ currentPageNo;

        int recordsPerPage = 12;
        int startRecord = (currentPageNo - 1) * recordsPerPage;
        pageInfo.put("currentPage", currentPageNo);
        pageInfo.put("startRecord", startRecord);
        pageInfo.put("recordsPerPage", recordsPerPage);
        
        //검색폼 파라미터 셋팅
    	String date_sql = "";
    	String date_java = "yyyy-MM";
    	String radio_date = vo.getRadio_date();
        String st_date = vo.getSt_date();
        String ed_date = vo.getEd_date();
        if(!isEmpty(radio_date)) {
        	if (radio_date.equals("year")) {
        		date_sql = "YYYY";
        		date_java = "yyyy";
        	} else if(radio_date.equals("month")) {
        		date_sql = "YYYY-MM";
        		date_java = "yyyy-MM";
        	} else if(radio_date.equals("day")) {
        		date_sql = "YYYY-MM-DD";
        		date_java = "yyyy-MM-dd";
        	} else if (radio_date.equals("all")) {
        		date_sql = null;
        		date_java = null;
        	} else {
        		//검색이 없으면 월검색이 Default
        		radio_date = null;
        		date_sql = null;
        		date_java = null;
        	}
        } else {
        	radio_date = "month";
        	date_sql = "YYYY-MM";
        	date_java = "yyyy-MM";
        }
        if (!isEmpty(radio_date)) {
        	param += "&radio_date="+ radio_date;
        }
        if (!isNull(date_java)) {
	        SimpleDateFormat sdf = new SimpleDateFormat(date_java);
	    	if (isEmpty(st_date) && isEmpty(ed_date)) {
	    		st_date = sdf.format(new Date());
	        	ed_date = sdf.format(new Date());
	    	} else {
	    		if (isEmpty(st_date)) {
	    			st_date = null;
	    			ed_date = null;
	    		}
	    		if (isEmpty(ed_date)) {
	    			st_date = null;
	    			ed_date = null;
	    		}
	    	}
	    	if (!isNull(st_date) && !isNull(ed_date)) {
	    		param += "&st_date="+ st_date +"&ed_date="+ ed_date;
	    	}
        }
        pageInfo.put("radio_date", radio_date);
        pageInfo.put("date_format", date_sql);
        pageInfo.put("st_date", st_date);
        pageInfo.put("ed_date", ed_date);
        
        String model_num = vo.getModel_num();
        if (isEmpty(model_num)) {
        	model_num = "";
        } else {
        			param += "&model_num="+model_num;
        }
        pageInfo.put("model_num", model_num);
        
        
        String supply_cd = vo.getSupply_cd();
        if (!isEmpty(supply_cd)) {
        	param += "&supply_cd="+ supply_cd;
        } else {
        	supply_cd = null;
        }
        pageInfo.put("supply_cd", supply_cd);
        
        String model_no = vo.getModel_no();
        if (!isEmpty(model_no)) {
        	param += "&model_no="+ model_no;
        } else {
        	model_no = null;
        }
        pageInfo.put("model_no", model_no);
        
        String user_no = vo.getUser_no();
        if (!isEmpty(user_no)) {
        	param += "&user_no="+ user_no;
        } else {
        	user_no = null;
        }
        pageInfo.put("user_no", user_no);
        
        String status = vo.getStatus();
        if(!isEmpty(status)) {
        	if (status.length() != 3) {
        		status = null;
        	}
        	param+="&status="+status;
        } else {
        	status = null;
        }
        pageInfo.put("status", status);

        UserInfoVO usrVO =(UserInfoVO)session.getAttribute("userinfo");
        pageInfo.put("user_bonbu", usrVO.getBonbu());
        pageInfo.put("user_role", session.getAttribute("role"));
        
        String myOrgCheck = vo.getMyOrgCheck();
        String onoffSwitch= vo.getOnoffSwitch();
        if( !pageInfo.get("user_role").equals("02")) { //일반회원
        	if(isNull(onoffSwitch)) {//초기로딩시
        		//logger.info("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
        		if(isNull(myOrgCheck)) {
        			myOrgCheck="on";
        		}
        	}else {//검색버튼누른상태
        		if(!isNull(myOrgCheck)) {
        			if(!myOrgCheck.equals("off")) {
        				myOrgCheck="on";
        			}
        		}else {
        			myOrgCheck="off";
        		}
        	}
        	
        }else {
        	if(isNull(myOrgCheck)) {
        		myOrgCheck="off";
        	}else {
        		if(!myOrgCheck.equals("off")) {
    				myOrgCheck="on";
    			}
        	}
        }
        param += "&onoffSwitch="+onoffSwitch+"&myOrgCheck="+myOrgCheck;
        pageInfo.put("onoffSwitch", onoffSwitch);
        pageInfo.put("myOrgCheck", myOrgCheck);
        
        String office_0 = vo.getOffice_0();
        String office_1 = vo.getOffice_1();
        String office_2 = vo.getOffice_2();
        String office_3 = vo.getOffice_3();
		if(!isEmpty(office_0) || !isEmpty(office_1) || !isEmpty(office_2) || !isEmpty(office_3) ) {
			if(!isEmpty(office_3)) {
				pageInfo.put("orgscode", office_3);
				pageInfo.put("level", null);
				param += "&office_0="+ office_0 +"&office_1="+ office_1 +"&office_2="+ office_2 +"&office_3="+ office_3;
			}else if(!isEmpty(office_2)) {
				pageInfo.put("orgscode", office_2);
				pageInfo.put("level", null);
				office_3 = null;
				param += "&office_0="+ office_0 +"&office_1="+ office_1 +"&office_2="+ office_2;
			}else if(!isEmpty(office_1)) {
				pageInfo.put("orgscode", office_1);
				pageInfo.put("level", null);
				office_3 = null;
				office_2 = null;
				param += "&office_0="+ office_0 +"&office_1="+ office_1;
			}else if(!isEmpty(office_0)) {
				pageInfo.put("orgscode", office_0);
				pageInfo.put("level", null);
				office_3 = null;
				office_2 = null;
				office_1 = null;
				param += "&office_0="+ office_0;
			} else {
				office_3 = null;
				office_2 = null;
				office_1 = null;
				office_0 = null;
				pageInfo.put("orgscode", null);
				pageInfo.put("level", null);
			}
		} else {
			office_0 = null;
			office_1 = null;
			office_2 = null;
			office_3 = null;
		}
		pageInfo.put("office_0", office_0);
		pageInfo.put("office_1", office_1);
		pageInfo.put("office_2", office_2);
		pageInfo.put("office_3", office_3);
		pageInfo.put("param", param);		

//		logger.info("pageInfooooooooooooooooooooooooooooooooooooooooooooo : "+ pageInfo.toString());
        return pageInfo;
	}
	 @SuppressWarnings("unchecked")
	private HashMap<String, String> getAuthChk(BusinessVO bsVO, HttpSession session, HashMap<String,String> confirmNo_emp, HashMap<String,String> confirmRegion) {
		   String status_cd = bsVO.getStatus_cd();
		   String user_id = session.getAttribute("user_id").toString();
		   
		   Map<String, ApprovalInfoVO> apprVO  =null;
		   Object obj = session.getAttribute("approvalMap_ReformAGW");
		   apprVO = (Map<String, ApprovalInfoVO>) obj;
		   if(apprVO.size()>0) {
			   ApprovalInfoVO vo = new ApprovalInfoVO();
			   vo.setStep("00");
			   if(apprVO.get("01")==null)  {
				   apprVO.put("01",  vo);
			   }
			   if(apprVO.get("02")==null) {
				   apprVO.put("02", vo);
			   }
		   }
		   
		   
		   String region = (String) session.getAttribute("region"); 
		   String role = session.getAttribute("role").toString();
		   String a0 = "N";
		   String a1 = "N";
		   String a2 = "N";
		   String a0_mail = "N";
		   String a1_mail = "N";
		   String a2_mail = "N";
		   if (role.equals("02")) {
			   a0 = "Y"; a1 = "Y"; a2 = "Y"; a0_mail="Y"; a1_mail="Y"; a2_mail="Y";
		   } else {
			   if (user_id.equals(bsVO.getInput_id())) {
				   if (status_cd.equals("00") || status_cd.equals("99")) {
					   a0 = "Y";
				   } else if (status_cd.equals("01")) {
					   a0_mail = "Y";
				   }
			   }
			   if(apprVO.size()>0) {
				   if (String.valueOf(confirmNo_emp.get("st_01")).equals(user_id) || (confirmRegion.get("st_01").equals(region) &&  apprVO.get("01").getStep().equals("01"))) {
					   if (status_cd.equals("01")) { a0 = "Y"; a1 = "Y";}
					   else if (status_cd.equals("06") && !bsVO.getRequest_yn()) { a1_mail = "Y"; }
				   }
				   // 출고요청
				   if (String.valueOf(confirmNo_emp.get("st_02")).equals(user_id) || (confirmRegion.get("st_02").equals(region) && apprVO.get("02").getStep().equals("02"))) {
					   if (status_cd.equals("02") && !bsVO.getRequest_yn()) { a0 = "Y"; a1 = "Y"; a2 = "Y";}
				   }
				   // 출고완료
				   if (String.valueOf(confirmNo_emp.get("st_02")).equals(user_id) || (confirmRegion.get("st_02").equals(region) && apprVO.get("02").getStep().equals("02"))) {
					   if (status_cd.equals("02") && bsVO.getRequest_yn()) { a0 = "Y"; a1 = "Y"; a2 = "Y"; }
				   }
			   }
		   }
		   
		   HashMap<String, String> confirmAuth = new HashMap<>();
		   confirmAuth.put("a0", a0);
		   confirmAuth.put("a1", a1);
		   confirmAuth.put("a2", a2);
		   confirmAuth.put("a0_mail", a0_mail);
		   confirmAuth.put("a1_mail", a1_mail);
		   confirmAuth.put("a2_mail", a2_mail);
		   
		   logger.info("confirmAuthhhhhhhhhhhhhhhhhhhhhhhh:"+ confirmAuth.toString());
		   
		   return confirmAuth;
	   }
     //수요공급요청리스트
    @SuppressWarnings("unchecked")
    @GetMapping("/list")
    public String bs_list(Model model,
    		 @ModelAttribute SearchVO search,
    		 @RequestParam(value = "currentPage", required = false, defaultValue = "1") String currentPage
    		 , HttpServletRequest httpServletRequest, HttpSession session) throws Exception {
        HashMap<String, Object> pageInfo = getPageInfo(search, session);
        HashMap<String, Object> codeMap = new HashMap<>();
        codeMap.put("agw_cd", agw_cd);
        codeMap.put("column_nm", "status_cd");
    	
        
    	HashMap <String,Integer> reformCnt = reformService.t_bs_listCnt(pageInfo);
    	
        List<OfficeVO> officeSubList = officeService.t_office_sub_list(pageInfo);
        List<BusinessVO> bs_list = (List<BusinessVO>) reformService.t_bs_list(pageInfo);
        List<OrgVO> result_org = reformService.search_result_org(pageInfo);
    	if(bs_list.size()>0) {
    		for (int i = 0; i < bs_list.size(); i++) {
				bs_list.get(i).setStatus(statusChk(bs_list.get(i).getStatus_cd(), bs_list.get(i).getRequest_yn()));
			}
    	}
        List<OfficeVO> officeList = (List<OfficeVO>) officeService.t_office_list_top();
        List<CodeVO> codeStatusList = (List<CodeVO>) codeService.codeSelect(codeMap);
        codeMap.put("column_nm", "supply_cd");
        List<CodeVO> codeSupplyCdList = (List<CodeVO>) codeService.codeSelect(codeMap);
    	//장비 정보 불러오기 
    	HashMap<String, Object> listModelInfo = new HashMap<String, Object>();
    	model.addAttribute("ReformModel",reformService.t_bs_model(listModelInfo) );
        //작성자 정보 불러오기
    	List<UserInfoVO> searchUsrList =(List<UserInfoVO>) reformService.search_reg_name();
    	model.addAttribute("searchRegName",searchUsrList);
    	model.addAttribute("result_org", result_org);
        model.addAttribute("searchInfo", pageInfo);
		model.addAttribute("search_office_list", officeSubList);
        model.addAttribute("bs_list", bs_list);
    	model.addAttribute("OfficeList", officeList);
    	model.addAttribute("statusCodeList", codeStatusList);
    	model.addAttribute("supplyCdList", codeSupplyCdList);
        model.addAttribute("currentPage", pageInfo.get("currentPage"));
        model.addAttribute("totalRecordCount", reformCnt.get("totalRecordCount"));
        model.addAttribute("modelNumCnt",reformCnt.get("modelNumCnt"));
        model.addAttribute("recordsPerPage", pageInfo.get("recordsPerPage"));
        
        return "reformAgw/list";
    }
    
    //수요공급요청상세보기6
   @RequestMapping(value = "/request_view" )
   public String bs_request_view( @RequestParam(value = "rstNo", required = false, defaultValue = "1") int rstNo
		   ,Model model  , @ModelAttribute SearchVO searchVO, HttpSession session) throws Exception  {
	   
	   if(rstNo==0) {
		   return  "redirect:reformAgw/list";
	   }
	   HashMap<String, Object> pageInfo = getPageInfo(searchVO, session);
	   pageInfo.put("rstNo", rstNo);
       int prev_no = reformService.request_prev_no(rstNo);
       int next_no = reformService.request_next_no(rstNo);
       
       //상세정보불러와서 셋팅
	   BusinessVO bsVO = (BusinessVO) reformService.t_bs_list_view(rstNo);
	   if(bsVO.getRequest_yn()) {
		   bsVO.setStatus_next(statusChk(statusNext(bsVO.getStatus_cd()),true));
	   }else {
		   bsVO.setStatus_next(statusChk(bsVO.getStatus_cd(),true));
	   }
	   bsVO.setStatus(statusChk(bsVO.getStatus_cd(),bsVO.getRequest_yn())) ;
	   
		 //승인자 정보 가져오기
			ConfirmUserVO cfVO = new ConfirmUserVO();
			cfVO.setNeoss_no(rstNo);
			cfVO.setAgw_cd(agw_cd);
			List<ConfirmUserVO> cfList = includeService.confrimUsrList_agw(cfVO);
			HashMap<String,String> confirmNo_emp = new HashMap<String, String>();
			HashMap<String,String> confirmRegion = new HashMap<String, String>();
			for (int i = 0; i < cfList.size(); i++) {
				confirmNo_emp.put("st_"+cfList.get(i).getStatus_cd(), cfList.get(i).getNo_emp());
				confirmRegion.put("st_"+cfList.get(i).getStatus_cd(), cfList.get(i).getRegion());
				if(cfList.get(i).getPhone_number()!= null || cfList.get(i).getPhone_number().equals("")) {
					cfList.get(i).setPhone_number(toTelNum(cfList.get(i).getPhone_number()));
				}
				logger.info(cfList.get(i).getPhone_number());
			}
		
	   //요청처리 이력 리스트 셋팅
	   List<ProcessVO> vo = processService.process_list(rstNo);
	   for (int i = 0; i < vo.size(); i++) {
		   if(vo.get(i).getStatus_cd().equals("00")) {
			   vo.get(i).setStatus("재요청");
		   }else {
			   vo.get(i).setStatus(statusChk(vo.get(i).getStatus_cd(), true));
		   }

	   }
	   
	   //최신의견가져오기
	   HashMap<String, Object> pr_contents = processService.process_contents(bsVO.getNeoss_no());
	   
	   //착공준공정보 가져오기
	   ConstructVO csVO = (ConstructVO) reformService.t_construct_view(rstNo);	
	   //모델담당자 불러오기(출고단계일때만)
	   if("02".equals(bsVO.getStatus_cd())) {
		   UserInfoVO modelUsrVO = reformService.r_model_person(bsVO.getNeoss_no());
		   if(!isNull(modelUsrVO)) {
			   if(!isNull(modelUsrVO.getPhone_number())) {
				   modelUsrVO.setPhone_number(toTelNum(modelUsrVO.getPhone_number()));
			   }
			   model.addAttribute("modelUsrVO", modelUsrVO);
		   }
	   }
	   
	   
	   HashMap<String, String> authChk = getAuthChk(bsVO, session, confirmNo_emp, confirmRegion);
		
	   	//수정 이력에 대한 정보 셋팅
		List<ReformVO> history = reformService.r_history_list(rstNo);
		//첨부파일
        List<AttachVO> attachList = attachService.select(rstNo,table_gb);
	   model.addAttribute("requestView", bsVO);
	   model.addAttribute("requestViewHistory", history); //변경이력
	   model.addAttribute("processView", vo); //승인이력 리스트
	   model.addAttribute("csVO", csVO); //착공준공정보
	   model.addAttribute("pr_contents", pr_contents); //검토의견
	   model.addAttribute("prev_no",prev_no);
	   model.addAttribute("next_no",next_no);
	   model.addAttribute("confrimUsrList",cfList);
	   model.addAttribute("confirmNo_emp", confirmNo_emp);
       model.addAttribute("attachList", attachList);	   
       model.addAttribute("pageInfo", pageInfo);
       model.addAttribute("authChk", authChk);
	   return  "reformAgw/request_view";
	   
   }
    
    //공급요청작성 페이지
	@RequestMapping(value="/request", method = RequestMethod.GET)
    public String bs_request(Model model
    		, @RequestParam(value="neoss_no", required=false) String neossNo
    		, HttpSession session) throws Exception {
		int neoss_no;
		if (isEmpty(neossNo)) {
			neoss_no = 0;
		} else {
			if (isNumeric(neossNo)) { 
				neoss_no = toInteger(neossNo);
				if (neoss_no < 1) {
					neoss_no = 0;
				}
			} else {
				neoss_no = 0;
			}
		}
		String dept_code = session.getAttribute("dept_code").toString();
		if(neoss_no > 0) {//작성중
			BusinessVO bsVO = (BusinessVO) reformService.t_bs_list_view(neoss_no);
			List<AttachVO> attachList = attachService.select(neoss_no,table_gb);
			
			//승인자 정보 가져오기
			ConfirmUserVO cfVO = new ConfirmUserVO();
			cfVO.setNeoss_no(neoss_no);
			cfVO.setAgw_cd(agw_cd);
			List<ConfirmUserVO> cfList = includeService.confrimUsrList_agw(cfVO);
			for (ConfirmUserVO vo : cfList) {
				vo.setStatus(getStatusNm(vo.getStatus_cd()));
			}
			dept_code = bsVO.getOffice_no();
			model.addAttribute("bsVO",bsVO );
			model.addAttribute("attachList", attachList);
			model.addAttribute("confirmUsrList",cfList);
			
		}else { //신규등록
			
			  ApprovalInfoVO approvalInfoVO = new ApprovalInfoVO();
			  UserInfoVO usrVO =(UserInfoVO)session.getAttribute("userinfo");
		        approvalInfoVO.setUser_id(usrVO.getNo_emp());
		        approvalInfoVO.setErp_job(agw_cd);//01:aa, 02:bb, 03:cc
		        approvalInfoVO.setOrg(usrVO.getOrg()); // ns or cs
		        List<ApprovalInfoVO> apprList = userRoleService.listApproval(approvalInfoVO);
		        List<ConfirmUserVO> cfList = new ArrayList<ConfirmUserVO>();
		        int j = 0;
	    		for (int i = 1; i < 3; i++) {
	    			ConfirmUserVO vo = new ConfirmUserVO();
	    			String status_cd = "0"+ i;
	    			int maxSize = apprList.size();
	    			if (maxSize > j) {
		    			if (status_cd.equals(apprList.get(j).getStep())) {
			    			vo.setStatus_cd(apprList.get(j).getStep());
							vo.setBonbu_name(apprList.get(j).getAppr_name());
							vo.setOrg_name(apprList.get(j).getDept_name());
							vo.setEmp_name(apprList.get(j).getEmp_name());
							vo.setNo_emp(apprList.get(j).getNo_emp());
							vo.setUser_no(apprList.get(j).getUser_no());
//							logger.info(apprList.get(j).toString());
							j++;
		    			} else {
		    				vo = new ConfirmUserVO();
		    				vo.setStatus_cd(status_cd);
		    			}
	    			} else {
	    				vo = new ConfirmUserVO();
	    				vo.setStatus_cd(status_cd);
	    			}
	    			vo.setStatus(getStatusNm(vo.getStatus_cd()));
					logger.info("ConfirmUserVO=="+ i +"==="+ vo.toString() );
					cfList.add(vo);
				}
			    model.addAttribute("confirmUsrList",cfList);
		}
    	
    	//지사 불러오기
    	model.addAttribute("OfficeList", officeService.t_my_office(dept_code));
		
		
    	
    	//나머지 코드 불러오기 (건물형태, 건물구분, 공급사유)
    	HashMap<String, Object> listCodeInfo = new HashMap<String, Object>();
    	model.addAttribute("BusinessCode",reformService.t_bs_code(listCodeInfo) );
    	
    	//장비 정보 불러오기 
    	HashMap<String, Object> listModelInfo = new HashMap<String, Object>();
    	model.addAttribute("BusinessModel",reformService.t_bs_model(listModelInfo) );
    	
    	return "reformAgw/request";
    }
	
    //공급요청작성 페이지
	@RequestMapping(value="/history_view", method = RequestMethod.GET)
    public String bs_history_view(HttpServletRequest httpServletRequest, Model model) throws Exception {
		
		int neoss_no = Integer.parseInt(httpServletRequest.getParameter("neoss_no"));
		int history_no = Integer.parseInt(httpServletRequest.getParameter("history_no"));
		
		HashMap<String, Integer> paramInfo = new HashMap<String, Integer>();
		paramInfo.put("neoss_no", neoss_no);
		paramInfo.put("history_no", history_no);
		
		BusinessVO  hist_result = (BusinessVO) reformService.t_bs_list_view_hist(paramInfo);
		BusinessVO pres_result = (BusinessVO) reformService.t_bs_list_view(neoss_no);
		model.addAttribute("hist_result",hist_result);
		model.addAttribute("pres_result",pres_result);
		return "reformAgw/history";
	}
	
	//하위지사Ajax
	@RequestMapping(value="/subOfficeAjax" ,method = RequestMethod.POST, produces="application/json;charset=utf8")
    public @ResponseBody List<OfficeVO> subOffice(@RequestParam(value="office_cd", required=false, defaultValue = "") int office_cd) throws Exception{
   
    	HashMap<String, Object> listInfo = new HashMap<String, Object>();
    	listInfo.put("office_cd", office_cd);
    	List<OfficeVO> list = officeService.t_office_sub_list(listInfo);
    	return list;
    	
    }
	
	//하위지사Ajax
	@RequestMapping(value="/subOfficeAjaxNew" ,method = RequestMethod.POST, produces="application/json;charset=utf8")
    public @ResponseBody List<OfficeVO> subOffice_new(@RequestParam(value="orgscode", required=false, defaultValue = "") String orgscode,
    		@RequestParam(value="level", required=false, defaultValue = "") int level	) throws Exception{
   
    	HashMap<String, Object> listInfo = new HashMap<String, Object>();
    	listInfo.put("orgscode", orgscode);
    	listInfo.put("level", level);
    	List<OfficeVO> list = officeService.t_office_sub_list(listInfo);
    	return list;
    	
    }
    
    @RequestMapping(value = "/attachDelAjax")
    @ResponseBody
    public String attachDelAjax(@RequestParam(value="ref_no", required=false, defaultValue = "") int ref_no
    		, HttpSession session) throws Exception {

       
        String result = "";
        try {
            attachment.deleteFile(ref_no, session.getAttribute("user_id").toString());
            result = "SUCCESS";
        } catch (Exception e) {
            result = "FAILED";
            e.printStackTrace();
            
        }
        return result;
    }
	
	@RequestMapping(value="/process_write" ,method = RequestMethod.POST)
    public String rstProcess(@ModelAttribute ProcessVO psVO, 
    		@ModelAttribute ModelInfoVO mdVO, HttpSession session ) throws Exception{
		
			BusinessVO vo = new BusinessVO();
			vo.setNeoss_no(psVO.getNeoss_no());
				if("99".equals(psVO.getStatus_cd())) {//반려인경우처음으로
					vo.setStatus_cd("99");
					vo.setRequest_yn(true);
					vo.setPrev_status(psVO.getPrev_status());
				}else {//요청이면
					if(!psVO.getRequest_yn()) {
						vo.setStatus_cd(statusNext(psVO.getStatus_cd()));
						if("00".equals(psVO.getStatus_cd())) vo.setRequest_yn(false);
					}else {
						vo.setStatus_cd(psVO.getStatus_cd());
					}
						vo.setRequest_yn(psVO.getRequest_yn());
				}
					
					if(!"00".equals(psVO.getStatus_cd()) && !psVO.getRequest_yn()) { 
						psVO.setInput_id(session.getAttribute("user_id").toString());
						psVO.setUpdate_id(session.getAttribute("user_id").toString());
						
						//승인이력등록
						processService.process_reg(psVO);
					}
					
						//문서상태변경
						reformService.t_bs_update(vo);
					
					String status_cd = vo.getStatus_cd();
					if((!vo.getRequest_yn())||("99".equals(status_cd))) {
						BusinessVO mailbsVO = new BusinessVO();
						mailbsVO.setStatus_cd(status_cd);
						mailbsVO.setNeoss_no(psVO.getNeoss_no());
						mailbsVO.setRequest_yn(psVO.getRequest_yn());
						mailbsVO.setProcess_no(psVO.getProcess_no());
						sendMail(mailbsVO,session);
						
					}
					
    	return "include/refresh";
    	
    }
	
	@RequestMapping(value="/process_modi" ,method = RequestMethod.POST)
    public String process_modi(@ModelAttribute ProcessVO psVO, 
    		@ModelAttribute ModelInfoVO mdVO, HttpSession session ) throws Exception{
		
			//오늘날짜 셋팅
			//Date today = new Date();
			//SimpleDateFormat date= new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			//mdVO.setOlt_in_dt(date.format(today));
		logger.info(psVO.toString());
		logger.info(mdVO.toString());
		if(mdVO.getManaged_ip()!=null && !mdVO.getManaged_ip().isEmpty()) {
			mdVO.setGubun(agw_cd);
			//단계별승인정보입력
			processService.process_modelInfo_reg(mdVO);
		}
		if(psVO.getProcess_no()>0) {
			//승인이력수정
			psVO.setUpdate_id(session.getAttribute("user_id").toString());
			processService.process_modi(psVO);
		}
					
					
    	return "include/refresh";
    	
    }
	
	@RequestMapping(value="/del_request" ,method = RequestMethod.GET)
    public String bs_del_request(@RequestParam(value="neoss_no", required=false, defaultValue = "") int neoss_no
    		, @RequestParam(value="page", required=false, defaultValue = "") String page, Model model) throws Exception{
		try {
			reformService.t_bs_del(neoss_no);
			model.addAttribute("msg","OK");
		} catch (Exception e) {
			model.addAttribute("msg", "fail");
		}
		return page;
    	
    }
	
	@RequestMapping(value="/write", method = RequestMethod.POST)
    public  String bs_submit(@ModelAttribute ReformVO rfVO, int[] model_no, int[] model_num,
    		MultipartHttpServletRequest mhsq, Model model, HttpSession session,
    		ConfirmUserVO cfVO, HttpServletRequest httpServletRequest)  throws Exception{
			
			rfVO.setInput_id(session.getAttribute("user_id").toString());
			rfVO.setUpdate_id(session.getAttribute("user_id").toString());
			
				//승인작업
				cfVO.setAgw_cd(agw_cd); //agw구분
				if(rfVO.getNeoss_no()>0) {
					reformService.t_bs_modify(rfVO, cfVO, mhsq);
					if(!"00".equals(rfVO.getStatus_cd())) {
						BusinessVO mailbsVO = new BusinessVO();
						mailbsVO.setStatus_cd(rfVO.getStatus_cd());
						mailbsVO.setNeoss_no(rfVO.getNeoss_no());
						mailbsVO.setRequest_yn(rfVO.getRequest_yn());
						sendMail(mailbsVO,session);
					}
				}else {
					for (int i = 0; i < model_no.length; i++) {
						rfVO.setModel_no(model_no[i]);
						rfVO.setModel_num(model_num[i]);
						if (i > 0)
							mhsq = null;
						int neoss = reformService.t_bs_reg(rfVO, cfVO, mhsq);
						if(!"00".equals(rfVO.getStatus_cd())) {
							BusinessVO mailbsVO = new BusinessVO();
							mailbsVO.setStatus_cd(rfVO.getStatus_cd());
							mailbsVO.setNeoss_no(neoss);
							mailbsVO.setRequest_yn(rfVO.getRequest_yn());
							sendMail(mailbsVO,session);
						}
					}
						
					}
				model.addAttribute("msg","OK");
			
			return "reformAgw/request";
	}
	

    //착공,준공 정보 등록
	@RequestMapping(value="/construct_write", method = RequestMethod.POST)
    public String bs_construct_write(@ModelAttribute ConstructVO csVO, @ModelAttribute ProcessVO psVO,
    		HttpSession session, Model model, HttpServletRequest httpServletRequest) throws Exception {
		
			String myid =session.getAttribute("user_id").toString();
			//공사정보 수정/등록
			if(csVO != null) { // 수정인경우
				if(csVO.getConst_no()>0) {
					csVO.setUpdate_id(myid);
					reformService.t_construct_reg(csVO);
					
					psVO.setUpdate_id(myid);
					processService.process_modi(psVO);
					
					//설치주소 추가
					if(!isNull(csVO.getAddress1().trim()) || !isNull(csVO.getAddress2().trim())) {
						BusinessVO bsVO = new BusinessVO();
						bsVO.setStatus_cd(psVO.getStatus_cd());
						if(!psVO.getRequest_yn()) {
							bsVO.setRequest_yn(false);
						}else {
							bsVO.setRequest_yn(true);
						}
						bsVO.setNeoss_no(psVO.getNeoss_no());
						bsVO.setAddress1(csVO.getAddress1());
						bsVO.setAddress2(csVO.getAddress2());
						reformService.t_construct_stat_change(bsVO);
					}
						
					
				}else { //신규등록인경우
					//construct 등록
					csVO.setInput_id(myid);
					csVO.setUpdate_id(myid);
					reformService.t_construct_reg(csVO);
					//process 등록
					psVO.setInput_id(myid);
					psVO.setUpdate_id(myid);
					processService.process_reg(psVO);
					
					//neoss 상태변경하기 
					BusinessVO bsVO = new BusinessVO();
					bsVO.setNeoss_no(psVO.getNeoss_no());
					bsVO.setStatus_cd(psVO.getStatus_cd());
					if(!psVO.getRequest_yn()) {
						bsVO.setRequest_yn(true);
					}else {
						bsVO.setRequest_yn(false);
					}
					if(!isNull(csVO.getAddress1().trim()) || !isNull(csVO.getAddress2().trim())) {
						bsVO.setAddress1(csVO.getAddress1());
						bsVO.setAddress2(csVO.getAddress2());
					}
					reformService.t_construct_stat_change(bsVO);
					
					//메일 셋팅
					BusinessVO mailbsVO = new BusinessVO();
					mailbsVO.setStatus_cd(psVO.getStatus_cd());
					mailbsVO.setNeoss_no(psVO.getNeoss_no());
					mailbsVO.setProcess_no(psVO.getProcess_no());
					mailbsVO.setRequest_yn(true);
					sendMail(mailbsVO,session);
				}
					
				model.addAttribute("msg","OK");
			}

		
		return "include/refresh";
	}
	
	@SuppressWarnings("unchecked")	
	@RequestMapping(value="/bs_excel_download")
	public @ResponseBody void bs_excel_download(HttpServletResponse response,@ModelAttribute SearchVO search, 
			HttpSession session,  HttpServletRequest request)throws Exception {
		
		if(!isNull(search.getSearchTxt())) {
			//한번 더 인코딩 된 데이터를 utf8로 디코드해줌 (한번은 자동은로 decode되니까 한번만 더 해주면 됨)
			search.setSearchTxt(URLDecoder.decode(search.getSearchTxt(),"UTF-8"));
		}
		
	    HashMap<String, Object> pageInfo = getPageInfo(search, session);
        //리스트불러오기
		List<ReformExcelVO> bs_list = (List<ReformExcelVO>) reformService.t_bs_list_excel(pageInfo);
      
        commonutil.excel_download(bs_list, response,  agw_cd, request);
	}
	

	
	private String getStatusNm(String status_cd) {
		String result = "";
		switch (status_cd) {
		case "01"	: result = "공급요청 승인";					break;
		case "02"	: result = "출고요청 승인";						break;
		default		: result = "그외";						break;
		}
		return result;
	}
	
	
	//현재상태 구하기
	public String statusChk(String statusCd , boolean rstYn) {
		
		String result ="";
		
		if("00".equals(statusCd) && !rstYn) { //작성중
			result = "작성중";
		}else if("01".equals(statusCd) && !rstYn) {//확정요청
			result = "공급요청";
		}else if("01".equals(statusCd) && rstYn) {//확정
			result = "공급확정";
		}else if("02".equals(statusCd) && !rstYn) {//IP확정 요청
			result = "출고요청";
		}else if("02".equals(statusCd) && rstYn) {//IP확정
			result = "출고완료";
		}else if("99".equals(statusCd) && rstYn) {//반려
			result = "반려";
		}else {
			result = "알수없음";
		}
		return result;
		
	}
	
	public String statusNext(String val) {
		
		String result = "";
		//임시
		if("00".equals(val)) {
			result ="01";
		}else if ("01".equals(val)) {
			result ="02"; 
		}else if ("02".equals(val)) {
			result ="02";
		}else if ("99".equals(val)) {
			result ="01";
		}
		return result;
		
	}
	
	@RequestMapping(value="/reWriteMail" ,method = RequestMethod.POST)
	public String reWriteMail(@ModelAttribute ProcessVO psVO, Model mode,HttpSession session) throws Exception{

		BusinessVO mailbsVO = new BusinessVO();
		
		mailbsVO.setNeoss_no(psVO.getNeoss_no());
		mailbsVO.setStatus_cd(psVO.getStatus_cd());
		mailbsVO.setRequest_yn(psVO.getRequest_yn());
		logger.info(mailbsVO.toString());
		
		sendMail (mailbsVO,session);
		
		return "include/refresh";
	}
	
	public void sendMail(BusinessVO bsVO,HttpSession session) throws Exception {
		List<UserRoleVO>email_list =null;
		logger.info("status:::"+bsVO.getStatus_cd());
		logger.info("requestYn:::"+bsVO.getRequest_yn());
		bsVO.setAgw_cd(agw_cd);
		switch (bsVO.getStatus_cd()) {
		case "99"://반려
			email_list =emailService.r_email_list_99(bsVO);
			break;
		default: //나머지단계
			bsVO.setNo_emp(session.getAttribute("user_id").toString());
			email_list=emailService.r_email_list_01(bsVO);
			break;
		}
		//셋팅하기
		EmailVO mailVO = new EmailVO();
		 //승인자 정보 가져오기
		ConfirmUserVO cfVO = new ConfirmUserVO();
		cfVO.setNeoss_no(bsVO.getNeoss_no());
		cfVO.setAgw_cd(agw_cd);
		List<ConfirmUserVO> cfList = includeService.confrimUsrList_agw(cfVO);
		for (int i = 0; i < cfList.size(); i++) {
			if(cfList.get(i).getPhone_number()!=null || !cfList.get(i).getPhone_number().equals("")) {
				cfList.get(i).setPhone_number(toTelNum(cfList.get(i).getPhone_number()));
			}
			
		}
		//해당승인자및부서리스트
		String[] receiver = new String[email_list.size()]; 
		for (int i = 0; i < receiver.length; i++) {
			if(!isNull(email_list.get(i).getEmail_address())) {
				receiver[i] = email_list.get(i).getEmail_address();
			}
		}
		
		if(receiver.length>0) {
			//메일제목설정
			String title = "";
			if ("99".equals(bsVO.getStatus_cd())) {
				title = statusChk(bsVO.getStatus_cd(), true);
			}else {
				title = statusChk(bsVO.getStatus_cd(), bsVO.getRequest_yn());
			}
			
			List<ProcessVO> psVO = processService.process_list(bsVO.getNeoss_no());
			if(psVO.size()>0) {
				for (int i = 0; i <psVO.size(); i++) {
					psVO.get(i).setStatus(statusChk(psVO.get(i).getStatus_cd(), true) );
				}
			}
			mailVO.setSubject("[Reform-AGW] 수요공급요청("+title+")");
			mailVO.setContent(emailSender.r_getEmailContent01((BusinessVO) reformService.t_bs_list_view(bsVO.getNeoss_no()),cfList, title, psVO));
			
			logger.info(mailVO.getSubject()+"]]]]]]]]]]]]]]]]]]");
			logger.info(bsVO.getStatus_cd());
			mailVO.setReceiver(receiver);
			//보내기
			emailSender.sendEmail(mailVO);
			logger.info("EmailSender ======= go");
		}
	}
	
	
	
}
