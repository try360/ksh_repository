/**
 * agw-ne
 *
 * Copyright ⓒ 2018 kt corp. All rights reserved.
 *
 * This is a proprietary software of kt corp, and you may not use this file except in
 * compliance with license agreement with kt corp. Any redistribution or use of this
 * software, with or without modification shall be strictly prohibited without prior written
 * approval of kt corp, and the copyright notice above does not evidence any actual or
 * intended publication of such software.
 * 
 * @ author kt
 * @ since 2018-04-15
 * @ file FacilityController.java
 * @ version 1.0
 * @ see
 * @ Copyright ⓒ 2018 By kt corp. All rights reserved.
 */
package kr.co.kt.agwne.web;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import kr.co.kt.agwne.dto.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import kr.co.kt.agwne.service.FacilityService;
import kr.co.kt.common.ParamValidatChk;


@Controller
@RequestMapping("/facility/*")
public class FacilityController extends ParamValidatChk {

	private static final Logger logger = LoggerFactory.getLogger(FacilityController.class);
	@Inject
	FacilityService service;
	@Value("#{config['attach.path']}")
	private String rootFolder;
	@GetMapping("/")
	public String home() {
		return "redirect:/facility/4p/mac";
	}

	@GetMapping("/4p/")
	public String home_4p() {
		return "redirect:/facility/4p/mac";
	}

	private HashMap<String, Object> getPageInfo(SearchVO vo, HttpSession sesion) {
		HashMap<String, Object> pageInfo = new HashMap<String, Object>();
		String param = "";

		int currentPageNo = 1;
		if (isNull(vo.getCurrentPage()) || isEmpty(vo.getCurrentPage())) {
			currentPageNo = 1;
		} else {
			if (!isNumeric(vo.getCurrentPage())) {
				currentPageNo = 1;
			} else {
				try {
					currentPageNo = Integer.parseInt(vo.getCurrentPage());
				} catch (Exception e) {
					currentPageNo = 1;
				}
			}
		}
		param += "currentPage=" + currentPageNo;

		int recordsPerPage = 12;
		int startRecord = (currentPageNo - 1) * recordsPerPage;
		pageInfo.put("currentPage", currentPageNo);
		pageInfo.put("startRecord", startRecord);
		pageInfo.put("recordsPerPage", recordsPerPage);

		String searchType = vo.getSearchType();
		String searchTxt = vo.getSearchTxt();
		String fullTxt = "";
		if (isEmpty(searchTxt)) {
			searchType = "";
			searchTxt = "";
		} else {
			if (isEmpty(searchType)) {
				searchType = "";
				searchTxt = "";
			} else {
				if (!searchType.equals("a.agw_mac") && !searchType.equals("a.epon_mac")
						&& !searchType.equals("a.serial_num")) {
					searchType = "";
					searchTxt = "";
				} else {
					// 그대로
					searchTxt = searchTxt.toUpperCase();
					param += "&searchType=" + searchType + "&searchTxt=" + searchTxt;

					fullTxt = vo.getCompanyCode() + searchTxt;
				}
			}
		}
		pageInfo.put("searchType", searchType);
		pageInfo.put("searchTxt", searchTxt);
		pageInfo.put("fullTxt", fullTxt);

		int totalCnt = (int) service.selectMacCnt(pageInfo);
		pageInfo.put("totalCnt", totalCnt);

		return pageInfo;
	}

	@SuppressWarnings("unchecked")
	@GetMapping("/4p/mac")
	public String mac_list(Model model
			, @ModelAttribute SearchVO searchVO, HttpSession session
			, HttpServletRequest request) {
		HashMap<String, Object> pageInfo = getPageInfo(searchVO, session);
		
		List<MacVO> macList = (List<MacVO>) service.selectMacAll(pageInfo);
		Iterator<MacVO> it = macList.iterator();
		while(it.hasNext()) {
			MacVO vo = it.next();
			if(!vo.getExcel_yn().startsWith("f")) {
				vo.setExcel_yn("엑셀");
			}else {
				vo.setExcel_yn("개별");
			}
		}

		model.addAttribute("macList", macList);

		model.addAttribute("pageInfo", pageInfo);
		model.addAttribute("totalRecordCount", pageInfo.get("totalCnt"));
		model.addAttribute("currentPage", pageInfo.get("currentPage"));
		model.addAttribute("recordsPerPage", pageInfo.get("recordsPerPage"));

		return "/facility/mac";
	}

	@PostMapping("/4p/excelUpload")
	public @ResponseBody HashMap<String, Object> mac_excelUpload(MultipartHttpServletRequest request, HttpSession session,
			HttpServletResponse response) throws Exception {

		MacExcelVO excelVO = service.insertExcelUpload(request, getUserId(session));
		
		HashMap<String, Object> result = new HashMap<>();
		result.put("msg", "OK");
		result.put("excel_no", excelVO.getExcel_no());

		return result;
	}
	
	@GetMapping("/4p/excelDownload")
	public void download(@RequestParam(value="no", required=true, defaultValue="0") String excelNo
			, HttpServletRequest request
			, HttpServletResponse response) throws IOException {
		int excel_no = 0;
		if (!isEmpty(excelNo)) {
			if (isNumeric(excelNo)) {
				excel_no = toInteger(excelNo);
				if (excel_no == 0) {
					return;
				}
			}
		}
		
		MacExcelVO excelVO = service.selectMacExcel(excel_no);
		
		if (!isNull(excelVO.getDuplicate_file())) {
			String filepath = rootFolder + excelVO.getFilepath() + excelVO.getDuplicate_file();
			String filename = excelVO.getDuplicate_file();
			File file = new File(filepath);

			String userAgent = request.getHeader("User-Agent");
			boolean ie = userAgent.indexOf("Trident") > -1 || userAgent.indexOf("MSIE") > -1;
			if (ie) {
				filename = URLEncoder.encode(filename, "utf-8");
			} else {
				filename = new String(filename.getBytes(StandardCharsets.UTF_8), StandardCharsets.ISO_8859_1);
			}

			response.setHeader("Set-Cookie", "fileDownload=true; path=/");
			response.setHeader("Content-Disposition", "attachment; filename=\"" + filename + "\";");
			response.setHeader("Content-Transfer-Encoding", "binary");

			OutputStream out = response.getOutputStream();
			FileInputStream fis = null;

			try {
				fis = new FileInputStream(file);
				FileCopyUtils.copy(fis, out);
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				if (fis != null) {
					try {
						fis.close();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
			out.flush();
		}
		
	}
	
	@RequestMapping(value="/4p/mac_write",method= {RequestMethod.POST,RequestMethod.GET})
	public String mac_write(Model model
			, @ModelAttribute MacOneVO vo
			, HttpSession session
			, HttpServletRequest request
			, HttpServletResponse response) throws Exception {
		String mac_no = request.getParameter("macNo");
		
		//등록
		if(mac_no==null || mac_no=="") {
			return "/facility/mac_regist";
		}
		
		//수정
		//로그인 정보 
		String userId = (String) session.getAttribute("user_id");
		String role = (String) session.getAttribute("role");
				
		vo = service.macOneInfo(Integer.parseInt(mac_no));
		if(!vo.getInput_id().equals(userId)
				&& !role.equals("02")) {
			String msg = "등록한 사용자와 관리자만 수정가능합니다.";
			String chk = "y";
			errMsg(msg,chk, mac_no, response);
			return "NO";
		}
		
		vo.setMac_no(Integer.parseInt(mac_no));
		vo.setAgw_mac(vo.getAgw_mac().substring(6,12));
		vo.setSerial_num(vo.getSerial_num().substring(4, 14));
		vo.setEpon_mac(vo.getEpon_mac().substring(6,12));
		
		model.addAttribute("vo",vo);
		return "/facility/mac_update";
	}
	
	@RequestMapping(value="/4p/mac_update",method= {RequestMethod.POST,RequestMethod.GET})
	public void mac_update(Model model
			, @ModelAttribute MacOneVO macVO
			, BindingResult result
			, HttpSession session
			, HttpServletRequest request
			, HttpServletResponse response) throws Exception {
		String mac_no = request.getParameter("macNo");
		
		String msg = "";
		response.setCharacterEncoding("EUC-KR");
		PrintWriter writer = response.getWriter();
		
		//로그인 정보
		String userId = (String) session.getAttribute("user_id");
		macVO.setInput_id(userId);
		macVO.setUpdate_id(userId);

		String agwMac = macVO.getAgwCompanyCode() + macVO.getAgw_mac().toUpperCase();
		String serialNum = macVO.getSerialCompanyCode() + macVO.getSerial_num().toUpperCase();
		String eponMac = macVO.getEponCompanyCode() + macVO.getEpon_mac().toUpperCase();
		
		//사용자 입력값의 null체크 & 길이체크
		String chk="n";
		if(isEmpty(macVO.getAgw_mac())
				|| isEmpty(macVO.getSerial_num())
				|| isEmpty(macVO.getEpon_mac())) {
			msg = "agw_mac, S/N, epon_mac는 필수 입력입니다.";
			errMsg(msg,chk, mac_no, response);
			return;
		}else {
			if(agwMac.length() != 12) {
				msg = "agw_mac는 12자리입니다.";
				errMsg(msg,chk, mac_no, response);
				return;
			}else if(serialNum.length() != 14) {
				msg = "S/N는 14자리입니다.";
				errMsg(msg,chk, mac_no, response);
				return;
			}else if(eponMac.length() != 12) {
				msg = "epon_mac는 12자리입니다.";
				errMsg(msg,chk, mac_no, response);
				return;
			}
		}
		
		//입력한 값의 유효성체크
		if(!strOrNum(agwMac,serialNum,eponMac)) {
			msg = "숫자와 영문자만 입력 가능합니다.";
			errMsg(msg,chk, mac_no, response);
			return;
		}
		
		//고유코드와 입력한값을 합쳐서 저장
		macVO.setSerial_num(serialNum);
		macVO.setAgw_mac(agwMac);
		macVO.setEpon_mac(eponMac);
		
		macVO.setMac_no(Integer.parseInt(request.getParameter("macNo")));
		service.updateOK(macVO);
		
		writer.println("<script type='text/javascript'>");
		writer.println("window.opener.location.reload();");
		writer.println("window.close();");
		writer.println("alert('업데이트 되었습니다.');");
		writer.println("</script>");
		writer.flush();		
	}
	
	@RequestMapping(value="/4p/mac_regist",method= {RequestMethod.POST,RequestMethod.GET})
	public void mac_regist(Model model
			, @ModelAttribute MacOneVO macVO
			, BindingResult result
			, HttpSession session
			, HttpServletRequest request
			, HttpServletResponse response) throws Exception {
		
		String msg = "";
		response.setCharacterEncoding("EUC-KR");
		PrintWriter writer = response.getWriter();
		
		//로그인 정보
		String userId = (String) session.getAttribute("user_id");
		macVO.setInput_id(userId);
		macVO.setUpdate_id(userId);

		String agwMac = macVO.getAgwCompanyCode() + macVO.getAgw_mac().toUpperCase();
		String serialNum = macVO.getSerialCompanyCode() + macVO.getSerial_num().toUpperCase();
		String eponMac = macVO.getEponCompanyCode() + macVO.getEpon_mac().toUpperCase();
		
		//사용자 입력값의 null체크 & 길이체크
		String chk="n";
		String mac_no="";
		if(isEmpty(macVO.getAgw_mac())
				|| isEmpty(macVO.getSerial_num())
				|| isEmpty(macVO.getEpon_mac())) {
			msg = "agw_mac, S/N, epon_mac는 필수 입력입니다.";
			errMsg(msg,chk, mac_no, response);
			return;
		}else {
			if(agwMac.length() != 12) {
				msg = "agw_mac는 12자리입니다.";
				errMsg(msg,chk, mac_no, response);
				return;
			}else if(serialNum.length() != 14) {
				msg = "S/N는 14자리입니다.";
				errMsg(msg,chk, mac_no, response);
				return;
			}else if(eponMac.length() != 12) {
				msg = "epon_mac는 12자리입니다.";
				errMsg(msg,chk, mac_no, response);
				return;
			}
		}
		
		//입력한 값의 유효성체크
		if(!strOrNum(agwMac,serialNum,eponMac)) {
			msg = "숫자와 영문자만 입력 가능합니다.";
			errMsg(msg,chk, mac_no, response);
			return;
		}
		
		//고유코드와 입력한값을 합쳐서 저장
		macVO.setSerial_num(serialNum);
		macVO.setAgw_mac(agwMac);
		macVO.setEpon_mac(eponMac);

		//db등록
		service.insertOrUpdateMac(macVO);
		writer.println("<script type='text/javascript'>");
		writer.println("window.opener.location.reload();");
		writer.println("window.close();");
		writer.println("alert('등록 되었습니다.');");
		writer.println("</script>");
		writer.flush();
	}
	
/*	@SuppressWarnings("unlikely-arg-type")
	@PostMapping("/4p/mac_chk")
	public @ResponseBody String mac_chk(Model model
			, @ModelAttribute MacOneVO vo
			, HttpServletRequest request
			, HttpServletResponse response) throws Exception {
		
		String agw_mac = request.getParameter("agw_mac").toUpperCase();
		String agwCompanyCode = request.getParameter("agwCompanyCode").toUpperCase();
		String upChk = request.getParameter("upChk");
		String mac_no = request.getParameter("mac_no");
		
		//agw_mac주소로 중복 조회
		vo = service.selectDuplicate2(agwCompanyCode+agw_mac);
		if(!vo.getAgw_mac().equals("")) {
			//엑셀등록 여부 확인
			if(vo.getExcel_yn().equals(true)) {
				return "excel";
			}
			
			int macUploadChk = service.macUploadChk(agwCompanyCode+agw_mac);
			if(macUploadChk==Integer.parseInt(mac_no)) {
				return "updateOK";
			}
			
			return "yes";			
		}else {
			if(upChk.equals("reg")) {
				return "regist";
			}else {
				return "updateOK";
			}			
		}
	}*/
	
	@PostMapping("/4p/mac_chk")
	public @ResponseBody String mac_chk(Model model
			, HttpServletRequest request
			, HttpServletResponse response) {

		String agw_mac = request.getParameter("agw_mac").toUpperCase();
		String agwCompanyCode = request.getParameter("agwCompanyCode").toUpperCase();
		String upChk = request.getParameter("upChk");
		String mac_no = request.getParameter("mac_no");

		//사용자 입력값 중복체크 및 엑셀 업로드 체크
		int chk = service.selectDuplicate(agwCompanyCode+agw_mac);
		if(chk!=0) {
			int chkExcel = service.excelUploadChk(agwCompanyCode+agw_mac);
			if(chkExcel != 0) {
				return "excel";
			}else {
				if(upChk.equals("up")) {
					int macUploadChk = service.macUploadChk(agwCompanyCode+agw_mac);
					if(macUploadChk==Integer.parseInt(mac_no)) {
						return "updateOK";
					}
				}
				return "yes";
			}
		}else {
			if(upChk.equals("up")) {
				return "updateOK";
			}
			return "regist";
		}
	}
	
	@PostMapping("/4p/mac_delete")
	public @ResponseBody String mac_delete(HttpSession session
			, HttpServletRequest request) {
		int mac_no = Integer.parseInt(request.getParameter("macNo"));
		MacOneVO vo = service.macOneInfo(mac_no);
		
		//로그인 정보 
		String userId = (String) session.getAttribute("user_id");
		String role = (String) session.getAttribute("role");
		
		HashMap<String, Object> hMap = new HashMap<String, Object>();
		hMap.put("agw_mac", vo.getAgw_mac());
		hMap.put("input_id", vo.getInput_id());
		
		if(!vo.getInput_id().equals(userId)
				&& !role.equals("02")) {
			//등록한 사용자만 삭제가능 메시지 출력
			return "NO";
		}else {
			service.macDelete(hMap);
			//삭제완료 메시지 출력
			return "OK";
		}
		
	}
	
	public void errMsg(String msg, String chk, String macNo
			,HttpServletResponse response) throws Exception {
		
		response.setCharacterEncoding("EUC-KR");
		PrintWriter writer = response.getWriter();
		writer.println("<script type='text/javascript'>");
		writer.println("alert('"+msg+"');");
		if(!macNo.equals("")) {
			writer.println("location.href='/facility/4p/mac_write?macNo='+"+macNo+";");
		}
		if(chk!="n") {
			writer.println("window.close();");
		}
		writer.println("</script>");
		writer.flush();
	}
		
	public String getUserId(HttpSession session) {
		return session.getAttribute("user_id").toString();
	}
	
	@RequestMapping(value="/4p/chartTest",method= {RequestMethod.POST,RequestMethod.GET})
	public String chartTest() {
		return "/facility/chartTest";
	}


    @PostMapping("/reform/excelUpload")
    public @ResponseBody String reform_excelUpload(MultipartHttpServletRequest request
            , HttpSession session
            , HttpServletResponse response) throws Exception {

		String msg = service.insertBarcodeExcelUpload(request, getUserId(session));
		logger.info(msg);
		return msg;
    }

	@RequestMapping(value="/reform/list")
	public String reform_list(Model model
            , @ModelAttribute SearchReformFacilVO vo
			, HttpSession session
			, HttpServletRequest request
			, HttpServletResponse response) throws Exception {
		
		String sh_data = "";
		String device_cd = request.getParameter("device_cd");

		List<ReformFacilVO> list = null;
		
		if(!isEmpty(device_cd)) {
			sh_data = "tabs1";
			String sh_text = device_cd;
			
			vo.setSh_devCd(device_cd.toUpperCase());			
			list = (List<ReformFacilVO>) service.reformFacilList(vo);
			
			model.addAttribute("sh_data", sh_data);
			model.addAttribute("sh_text", sh_text);
		    model.addAttribute("reformFacilList",list); 
		    model.addAttribute("searchInfo",vo);
			
			return "/facility/reform";
			
		}
		
		String[] tdx_type = request.getParameterValues("tdx_type");
		String[] device_gb = request.getParameterValues("device_gb");
		String[] vendor_nm = request.getParameterValues("vendor_nm");
		String use_yn = request.getParameter("use_yn");
		if(tdx_type!=null || device_gb!=null || vendor_nm!=null || use_yn!=null) {
			sh_data = "tabs2";
			if(tdx_type!=null) {
				for(int i=0; i<tdx_type.length; i++) {
					if(tdx_type[i].equals("on")) {
						tdx_type[i]="";
					}	
				}
				vo.setSh_tdxType(tdx_type);
			}
			
			if(device_gb!=null) {
				for(int i=0; i<device_gb.length; i++) {
					if(device_gb[i].equals("on")) {
						device_gb[i]="";
					}
				}
				vo.setSh_deviceGb(device_gb);
			}
			
			if(vendor_nm!=null) {
				for(int i=0; i<vendor_nm.length; i++) {
					if(vendor_nm[i].equals("on")) {
						vendor_nm[i]="";
					}else if(vendor_nm[i].equals("1")) {
						vendor_nm[i]="삼성전자(주)";
					}else if(vendor_nm[i].equals("2")) {
						vendor_nm[i]="한화정보통신";
					}else if(vendor_nm[i].equals("3")) {
						vendor_nm[i]="LG전자(주)";
					}else if(vendor_nm[i].equals("4")) {
						vendor_nm[i]="머큐리(주)";
					}
				}
				vo.setSh_vendor(vendor_nm);	
			}
			vo.setSh_useyn(use_yn);			
			list = (List<ReformFacilVO>) service.reformFacilList(vo);
		}

        model.addAttribute("sh_data", sh_data);
        model.addAttribute("reformFacilList",list); 
        model.addAttribute("searchInfo",vo);
        
        return "/facility/reform";
	
	}
	
	@RequestMapping(value="/reform/reform_detail", method=RequestMethod.POST)
	public @ResponseBody ReformDeviceVO reform_detail(HttpServletRequest request) {

		String barcode = request.getParameter("barcode");
		ReformDeviceVO rdVO = service.select_device_info(barcode);
		
		return rdVO;
	}

}