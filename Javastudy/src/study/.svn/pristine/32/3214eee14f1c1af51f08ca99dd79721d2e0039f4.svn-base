/**
 * agw-ne
 *
 * Copyright ⓒ 2018 kt corp. All rights reserved.
 *
 * This is a proprietary software of kt corp, and you may not use this file except in
 * compliance with license agreement with kt corp. Any redistribution or use of this
 * software, with or without modification shall be strictly prohibited without prior written
 * approval of kt corp, and the copyright notice above does not evidence any actual or
 * intended publication of such software.
 * 
 * @ author kt
 * @ since 2018-04-15
 * @ file BusinessController.java
 * @ version 1.0
 * @ see
 * @ Copyright ⓒ 2018 By kt corp. All rights reserved.
 */

package kr.co.kt.agwne.web;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import kr.co.kt.agwne.dto.AgwExcelVO;
import kr.co.kt.agwne.dto.ApprovalInfoVO;
import kr.co.kt.agwne.dto.AttachVO;
import kr.co.kt.agwne.dto.BusinessVO;
import kr.co.kt.agwne.dto.CodeVO;
import kr.co.kt.agwne.dto.ConfirmUserVO;
import kr.co.kt.agwne.dto.ConstructMemVO;
import kr.co.kt.agwne.dto.ConstructVO;
import kr.co.kt.agwne.dto.EmailVO;
import kr.co.kt.agwne.dto.ModelInfoVO;
import kr.co.kt.agwne.dto.OfficeVO;
import kr.co.kt.agwne.dto.ProcessVO;
import kr.co.kt.agwne.dto.SearchVO;
import kr.co.kt.agwne.dto.UserInfoVO;
import kr.co.kt.agwne.dto.UserRoleVO;
import kr.co.kt.agwne.service.AttachService;
import kr.co.kt.agwne.service.BusinessService;
import kr.co.kt.agwne.service.CodeService;
import kr.co.kt.agwne.service.EmailService;
import kr.co.kt.agwne.service.IncludeSearchService;
import kr.co.kt.agwne.service.OfficeService;
import kr.co.kt.agwne.service.ProcessService;
import kr.co.kt.agwne.service.UserRoleService;
import kr.co.kt.common.Attachment;
import kr.co.kt.common.CommonUtility;
import kr.co.kt.common.EmailSender;
import kr.co.kt.common.ParamValidatChk;

@Controller
@RequestMapping("/business")
public class BusinessController extends ParamValidatChk {
	private static final Logger logger = LoggerFactory.getLogger(BusinessController.class);
	private static final String table_gb = "t_neoss";
	private static final String agw_cd = "01";
    @Inject
    private OfficeService officeService;
    @Autowired
    @Qualifier("businessService")
    private BusinessService businessService;
    @Inject
    private ProcessService processService;
    @Inject
    private AttachService attachService;
    @Autowired
    private Attachment attachment;
    @Inject
    private CommonUtility commonutil;
    @Inject
    private IncludeSearchService includeService;
    @Inject
    private EmailService emailService;
	@Autowired
	private EmailSender emailSender;
	@Autowired
    private UserRoleService userRoleService;
	@Inject
	private CodeService codeService;


	public HashMap<String, Object> getPageInfo(SearchVO vo, HttpSession session) throws UnsupportedEncodingException, ParseException {
		HashMap<String, Object> pageInfo = new HashMap<String, Object>();
		String param = "";
		
        int currentPageNo = 1;
        if (isNull(vo.getCurrentPage()) || isEmpty(vo.getCurrentPage())) {
        	currentPageNo = 1;
        } else {
            if (!isNumeric(vo.getCurrentPage())) {
            	currentPageNo = 1;
            } else {
                try {
                    currentPageNo = Integer.parseInt(vo.getCurrentPage());
                } catch (Exception e) {
                    currentPageNo = 1;
                }
            }
        }
        param += "currentPage="+ currentPageNo;

        int recordsPerPage = 12;
        int startRecord = (currentPageNo - 1) * recordsPerPage;
        pageInfo.put("currentPage", currentPageNo);
        pageInfo.put("startRecord", startRecord);
        pageInfo.put("recordsPerPage", recordsPerPage);
        
        
        String searchType = vo.getSearchType();
        String searchTxt = vo.getSearchTxt();
        if (isEmpty(searchTxt)) {
        	searchType = "";
        	searchTxt = "";
        } else {
        	if (isEmpty(searchType)) {
        		searchType = "";
        		searchTxt = "";
        	} else {
        		if (!searchType.equals("A.section_nm") && !searchType.equals("A.doc_no") && !searchType.equals("E.emp_name") && !searchType.equals("F.emp_name")) {
        			searchType = "";
        			searchTxt = "";
        		} else {
        			//그대로
        			param += "&searchType="+ searchType +"&searchTxt="+ URLEncoder.encode(searchTxt, "EUC-KR");
        		}
        	}
        }
        pageInfo.put("searchType", searchType);
        pageInfo.put("searchTxt", searchTxt);
        
        //검색폼 파라미터 셋팅
    	String date_sql = "";
    	String date_java = "yyyy-MM";
    	String radio_date = vo.getRadio_date();
        String st_date = vo.getSt_date();
        String ed_date = vo.getEd_date();
        if(!isEmpty(radio_date)) {
        	if (radio_date.equals("year")) {
        		date_sql = "YYYY";
        		date_java = "yyyy";
        	} else if(radio_date.equals("month")) {
        		date_sql = "YYYY-MM";
        		date_java = "yyyy-MM";
        	} else if(radio_date.equals("day")) {
        		date_sql = "YYYY-MM-DD";
        		date_java = "yyyy-MM-dd";
        	} else if (radio_date.equals("all")) {
        		date_sql = null;
        		date_java = null;
        	} else {
        		//검색이 없으면 월검색이 Default
        		radio_date = null;
        		date_sql = null;
        		date_java = null;
        	}
        } else {
        	radio_date = "day";
        	date_sql = "YYYY-MM-DD";
        	date_java = "yyyy-MM-dd";
        }
        if (!isEmpty(radio_date)) {
        	param += "&radio_date="+ radio_date;
        }
        if (!isNull(date_java)) {
	        SimpleDateFormat sdf = new SimpleDateFormat(date_java);
	    	if (isEmpty(st_date) && isEmpty(ed_date)) {
	    		ed_date = sdf.format(new Date());
	    		Calendar c = Calendar.getInstance();
	    		c.setTime(sdf.parse(ed_date));
		        c.add(Calendar.DATE, -30);
	        	st_date = sdf.format(c.getTime());
	    	} else {
	    		if (isEmpty(st_date)) {
	    			st_date = null;
	    			ed_date = null;
	    		}
	    		if (isEmpty(ed_date)) {
	    			st_date = null;
	    			ed_date = null;
	    		}
	    	}
	    	if (!isNull(st_date) && !isNull(ed_date)) {
	    		param += "&st_date="+ st_date +"&ed_date="+ ed_date;
	    	}
        }
        pageInfo.put("radio_date", radio_date);
        pageInfo.put("date_format", date_sql);
        pageInfo.put("st_date", st_date);
        pageInfo.put("ed_date", ed_date);
        
        String buildshape_cd = vo.getBuildshape_cd();
        if (!isEmpty(buildshape_cd)) {
        	param += "&buildshape_cd="+ buildshape_cd;
        } else {
        	buildshape_cd = null;
        }
        pageInfo.put("buildshape_cd", buildshape_cd);
        
        String status = vo.getStatus();
        if(!isEmpty(status)) {
        	if (status.length() != 3) {
        		status = null;
        	}
        } else {
        	status = null;
        }
        pageInfo.put("status", status);

        UserInfoVO usrVO =(UserInfoVO)session.getAttribute("userinfo");
        pageInfo.put("user_bonbu", usrVO.getBonbu());
        pageInfo.put("user_role", session.getAttribute("role"));
        
        String myOrgCheck = vo.getMyOrgCheck();
        String onoffSwitch= vo.getOnoffSwitch();
        if( !pageInfo.get("user_role").equals("02")) { //일반회원
        	if(isNull(onoffSwitch)) {//초기로딩시
        		//logger.info("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
        		if(isNull(myOrgCheck)) {
        			myOrgCheck="on";
        		}
        	}else {//검색버튼누른상태
        		if(!isNull(myOrgCheck)) {
        			if(!myOrgCheck.equals("off")) {
        				myOrgCheck="on";
        			}
        		}else {
        			myOrgCheck="off";
        		}
        	}
        	
        }else {
        	if(isNull(myOrgCheck)) {
        		myOrgCheck="off";
        	}else {
        		if(!myOrgCheck.equals("off")) {
    				myOrgCheck="on";
    			}
        	}
        }
        param += "&onoffSwitch="+onoffSwitch+"&myOrgCheck="+myOrgCheck;
        pageInfo.put("onoffSwitch", onoffSwitch);
        pageInfo.put("myOrgCheck", myOrgCheck);
        
        String office_0 = vo.getOffice_0();
        String office_1 = vo.getOffice_1();
        String office_2 = vo.getOffice_2();
        String office_3 = vo.getOffice_3();
		if(!isEmpty(office_0) || !isEmpty(office_1) || !isEmpty(office_2) || !isEmpty(office_3) ) {
			if(!isEmpty(office_3)) {
				pageInfo.put("orgscode", office_3);
				pageInfo.put("level", null);
				param += "&office_0="+ office_0 +"&office_1="+ office_1 +"&office_2="+ office_2 +"&office_3="+ office_3;
			}else if(!isEmpty(office_2)) {
				pageInfo.put("orgscode", office_2);
				pageInfo.put("level", null);
				office_3 = null;
				param += "&office_0="+ office_0 +"&office_1="+ office_1 +"&office_2="+ office_2;
			}else if(!isEmpty(office_1)) {
				pageInfo.put("orgscode", office_1);
				pageInfo.put("level", null);
				office_3 = null;
				office_2 = null;
				param += "&office_0="+ office_0 +"&office_1="+ office_1;
			}else if(!isEmpty(office_0)) {
				pageInfo.put("orgscode", office_0);
				pageInfo.put("level", null);
				office_3 = null;
				office_2 = null;
				office_1 = null;
				param += "&office_0="+ office_0;
			} else {
				office_3 = null;
				office_2 = null;
				office_1 = null;
				office_0 = null;
				pageInfo.put("orgscode", null);
				pageInfo.put("level", null);
			}
		} else {
			office_0 = null;
			office_1 = null;
			office_2 = null;
			office_3 = null;
		}
		pageInfo.put("office_0", office_0);
		pageInfo.put("office_1", office_1);
		pageInfo.put("office_2", office_2);
		pageInfo.put("office_3", office_3);
		pageInfo.put("param", param);		

		//logger.info("pageInfooooooooooooooooooooooooooooooooooooooooooooo : "+ pageInfo.toString());
        return pageInfo;
	}
   
	 @SuppressWarnings("unchecked")
	private HashMap<String, String> getAuthChk(BusinessVO bsVO, HttpSession session, HashMap<String,Integer> confirmNo_emp, HashMap<String,String> confirmRegion) {
		   String status_cd = bsVO.getStatus_cd();
		   String user_id = session.getAttribute("user_id").toString();
		   
		   Map<String, ApprovalInfoVO> apprVO  =null;
		   Object obj = session.getAttribute("approvalMap_AGW");
		   apprVO = (Map<String, ApprovalInfoVO>) obj;
		   if(apprVO.size()>0) {
			   ApprovalInfoVO vo = new ApprovalInfoVO();
			   if(apprVO.get("01")==null)  {
				   vo.setStep("00");
				   apprVO.put("01",  vo);
			   }
			   if(apprVO.get("06")==null) {
				   vo.setStep("00");
				   apprVO.put("06", vo);
			   }
		   }
		   
		   
		   String region = (String) session.getAttribute("region"); 
		   String role = session.getAttribute("role").toString();
		   String a0 = "N";
		   String a1 = "N";
		   String a2 = "N";
		   String a3 = "N";
		   String a4 = "N";
		   String a5 = "N";
		   String a6 = "N";
		   String a0_mail = "N";
		   String a1_mail = "N";
		   String a2_mail = "N";
		   String a3_mail = "N";
		   String a4_mail = "N";
		   String a5_mail = "N";
		   String a6_mail = "N";
		   if (role.equals("02")) {
			   a0 = "Y"; a1 = "Y"; a2 = "Y"; a3 = "Y"; a4 = "Y"; a5 = "Y"; a6 = "Y";
		   } else {
			   if (user_id.equals(bsVO.getInput_id())) {
				   if (status_cd.equals("00") || status_cd.equals("99")) {
					   a0 = "Y";
				   } else if (status_cd.equals("01")) {
					   a0_mail = "Y";
				   }
			   }
			   if(apprVO.size()>0) {
				   if (String.valueOf(confirmNo_emp.get("st_01")).equals(user_id) || (confirmRegion.get("st_01").equals(region) &&  apprVO.get("01").getStep().equals("01"))) {
 					   if (status_cd.equals("01")) { a0 = "Y"; a1 = "Y";}
					   else if (status_cd.equals("06") && !bsVO.getRequest_yn()) { a1_mail = "Y"; }
				   }
				   /*if (confirmNo_emp.get("st_02").equals(user_id) || (confirmRegion.get("st_02").equals(region) && apprVO.getAppr_02().equals("1"))) {
				   if (status_cd.equals("02")) { a0 = "Y"; a1 = "Y"; a2 = "Y";}
				   else if (status_cd.equals("03")) { a2_mail = "Y"; }
			   }
		       if (confirmNo_emp.get("st_03").equals(user_id) || (confirmRegion.get("st_03").equals(region) && apprVO.getAppr_03().equals("1"))) {
				   if (status_cd.equals("03")) { a0 = "Y"; a1 = "Y"; a2 = "Y"; a3 = "Y";}
				   else if (status_cd.equals("04")) { a3_mail = "Y"; }
			   }
		       if (confirmNo_emp.get("st_04").equals(user_id) || (confirmRegion.get("st_04").equals(region) && apprVO.getAppr_04().equals("1"))) {
				   if (status_cd.equals("04")) { a0 = "Y"; a1 = "Y"; a2 = "Y"; a3 = "Y"; a4 = "Y";}
				   else if (status_cd.equals("05")) { a4_mail = "Y"; }
			   }
		       if (confirmNo_emp.get("st_05").equals(user_id) || (confirmRegion.get("st_05").equals(region) && apprVO.getAppr_05().equals("1"))) {
				   if (status_cd.equals("05")) { a0 = "Y"; a1 = "Y"; a2 = "Y"; a3 = "Y"; a4 = "Y"; a5 = "Y";}
				   else if (status_cd.equals("06") && !bsVO.getRequest_yn()) { a5_mail = "Y"; }
			   }*/
				   // 착공요청중
				   if (String.valueOf(confirmNo_emp.get("st_06")).equals(user_id) || (confirmRegion.get("st_06").equals(region) && apprVO.get("06").getStep().equals("06"))) {
					   if (status_cd.equals("06") && !bsVO.getRequest_yn()) { a0 = "Y"; a1 = "Y"; a2 = "Y"; a3 = "Y"; a4 = "Y"; a5 = "Y"; a6 = "Y"; a6_mail = "Y"; }
				   }
				   // 착공
				   if (String.valueOf(confirmNo_emp.get("st_06")).equals(user_id) || (confirmRegion.get("st_06").equals(region) && apprVO.get("06").getStep().equals("06"))) {
					   if (status_cd.equals("06") && bsVO.getRequest_yn()) { a0 = "Y"; a1 = "Y"; a2 = "Y"; a3 = "Y"; a4 = "Y"; a5 = "Y"; a6 = "Y"; a6_mail = "Y"; }
				   }
			   }
		   }
		   
		   HashMap<String, String> confirmAuth = new HashMap<>();
		   confirmAuth.put("a0", a0);
		   confirmAuth.put("a1", a1);
		   confirmAuth.put("a2", a2);
		   confirmAuth.put("a3", a3);
		   confirmAuth.put("a4", a4);
		   confirmAuth.put("a5", a5);
		   confirmAuth.put("a6", a6);
		   confirmAuth.put("a0_mail", a0_mail);
		   confirmAuth.put("a1_mail", a1_mail);
		   confirmAuth.put("a2_mail", a2_mail);
		   confirmAuth.put("a3_mail", a3_mail);
		   confirmAuth.put("a4_mail", a4_mail);
		   confirmAuth.put("a5_mail", a5_mail);
		   confirmAuth.put("a6_mail", a6_mail);
		   
		   
		   //logger.info("confirmAuthhhhhhhhhhhhhhhhhhhhhhhh:"+ confirmAuth.toString());
		   
		   return confirmAuth;
	   }
	
	
     //수요공급요청리스트
    @SuppressWarnings("unchecked")
    @GetMapping("/list")
    public String bs_list(Model model,
    		 @ModelAttribute SearchVO search,
    		 @RequestParam(value = "currentPage", required = false, defaultValue = "1") String currentPage
    		 , HttpServletRequest httpServletRequest, HttpSession session) throws Exception {
        HashMap<String, Object> pageInfo = getPageInfo(search, session);
        HashMap<String, Object> codeMap = new HashMap<>();
        codeMap.put("agw_cd", "01");
        codeMap.put("column_nm", "status_cd");
    	
        
    	int totalCnt = businessService.t_bs_listCnt(pageInfo);
        List<OfficeVO> officeSubList = officeService.t_office_sub_list(pageInfo);
        List<BusinessVO> bs_list = (List<BusinessVO>) businessService.t_bs_list(pageInfo);
    	if(bs_list.size()>0) {
    		for (int i = 0; i < bs_list.size(); i++) {
				bs_list.get(i).setStatus(statusChk(bs_list.get(i).getStatus_cd(), bs_list.get(i).getRequest_yn()));
			}
    	}
        List<OfficeVO> officeList = (List<OfficeVO>) officeService.t_office_list_top();
        List<CodeVO> codeStatusList = (List<CodeVO>) codeService.codeSelect(codeMap);
        codeMap.put("column_nm", "buildshape_cd");
        List<CodeVO> codeBuildshapeList = (List<CodeVO>) codeService.codeSelect(codeMap);
        
        model.addAttribute("searchInfo", pageInfo);
		model.addAttribute("search_office_list", officeSubList);
        model.addAttribute("bs_list", bs_list);
    	model.addAttribute("OfficeList", officeList);
    	model.addAttribute("statusCodeList", codeStatusList);
    	model.addAttribute("BusinessCode", codeBuildshapeList);
        model.addAttribute("currentPage", pageInfo.get("currentPage"));
        model.addAttribute("totalRecordCount", totalCnt);
        model.addAttribute("recordsPerPage", pageInfo.get("recordsPerPage"));
        
        return "business/list";
    }
    
    //수요공급요청상세보기
   @RequestMapping(value = "/request_view" )
   public String bs_request_view( @RequestParam(value = "rstNo", required = false, defaultValue = "1") int rstNo
		   , Model model, @ModelAttribute SearchVO searchVO
		   , HttpSession session) throws Exception  {

	   HashMap<String, Object> pageInfo = getPageInfo(searchVO, session);
	   pageInfo.put("rstNo", rstNo);
       int prev_no = businessService.request_prev_no(rstNo);
       int next_no = businessService.request_next_no(rstNo);
       
       //상세정보불러와서 셋팅
	   BusinessVO bsVO = (BusinessVO) businessService.t_bs_list_view(rstNo);
	   if(bsVO.getRequest_yn()) {
		   bsVO.setStatus_next(statusChk(statusNext(bsVO.getStatus_cd()),true));
	   }else {
		   bsVO.setStatus_next(statusChk(bsVO.getStatus_cd(),true));
	   }
	   bsVO.setStatus(statusChk(bsVO.getStatus_cd(),bsVO.getRequest_yn())) ;
	   
	 //승인자 정보 가져오기
		ConfirmUserVO cfVO = new ConfirmUserVO();
		cfVO.setNeoss_no(rstNo);
		cfVO.setAgw_cd(agw_cd);
		List<ConfirmUserVO> cfList = includeService.confrimUsrList_agw(cfVO);
		HashMap<String,Integer> confirmNo_emp = new HashMap<String, Integer>();
		HashMap<String,String> confirmRegion = new HashMap<String, String>();
		for (int i = 0; i < cfList.size(); i++) {
			confirmNo_emp.put("st_"+cfList.get(i).getStatus_cd(), cfList.get(i).getUser_no());
			confirmRegion.put("st_"+cfList.get(i).getStatus_cd(), cfList.get(i).getRegion());
			if(cfList.get(i).getPhone_number()!= null || cfList.get(i).getPhone_number().equals("")) {
				cfList.get(i).setPhone_number(toTelNum(cfList.get(i).getPhone_number()));
			}
			//logger.info(cfList.get(i).getPhone_number());
		}
		
		
	   //요청처리 이력 리스트 셋팅
	   List<ProcessVO> vo = processService.process_list(rstNo);
	   for (int i = 0; i < vo.size(); i++) {
		   if(vo.get(i).getStatus_cd().equals("00")) {
			   vo.get(i).setStatus("재요청");
		   }else {
			   vo.get(i).setStatus(statusChk(vo.get(i).getStatus_cd(), true));
		   }
		   vo.get(i).setPhone_number(toTelNumSecurity(vo.get(i).getPhone_number()));
	   }
	   
	   //승인정보입력정보가져오기
	   HashMap<String, Object> info = new HashMap<String, Object>();
	   info.put("neoss_no", bsVO.getNeoss_no());
	   info.put("status_cd", bsVO.getStatus_cd());
	   info.put("gubun", agw_cd); //agw
	   ModelInfoVO mdVO = processService.process_modelInfo_view(info);
	   List<HashMap<String, Object>> md_list = businessService.t_bs_pots(session.getAttribute("user_id").toString());
	   List<HashMap<String, Object>> md_list2 = businessService.t_bs_ipsec();
	   List<HashMap<String, Object>> md_list3 = businessService.t_bs_emsIp();
	   
	   //최신의견가져오기
	   HashMap<String, Object> pr_contents = processService.process_contents(bsVO.getNeoss_no());
	   
	   //착공준공정보 가져오기
	   ConstructVO csVO = (ConstructVO) businessService.t_construct_view(rstNo);	
	   List<ConstructMemVO> csmemVO= null;
	   if(csVO != null) {
		   csmemVO= businessService.t_construct_mem(rstNo);
		   for (int i = 0; i < csmemVO.size(); i++) {
			   //logger.info(csmemVO.get(i).getEmp_name());
			   csmemVO.get(i).setPhone_number(toTelNumSecurity(csmemVO.get(i).getPhone_number()));
		}
		  //cs_mem_list = businessService.t_construct_mem(csVO.getConst_no());
	   }
	   
	   HashMap<String, String> authChk = getAuthChk(bsVO, session, confirmNo_emp, confirmRegion);
	   
	   	//수정 이력에 대한 정보 셋팅
		List<BusinessVO> bsVO_hist_list = businessService.t_bs_list_view_hist(rstNo);
		for(int i=0; i<bsVO_hist_list.size(); i++) {
			bsVO_hist_list.get(i).setPhone_number(toTelNum(bsVO_hist_list.get(i).getPhone_number()));
		}
		
		//첨부파일
        List<AttachVO> attachList = attachService.select(rstNo,table_gb);
	   model.addAttribute("requestView", bsVO);
	   model.addAttribute("requestViewHistory", bsVO_hist_list); //변경이력
	   model.addAttribute("processView", vo); //승인이력 리스트
	   model.addAttribute("csVO", csVO); //착공준공정보
	   model.addAttribute("csmemVO", csmemVO); //착공준공설계자들
	   model.addAttribute("modelInfo_view", mdVO); //착공준공정보
	   model.addAttribute("md_list", md_list); //pots정보
	   model.addAttribute("md_list2", md_list2); //ipsec_ip
	   model.addAttribute("md_list3", md_list3); //ems_ip
	   model.addAttribute("pr_contents", pr_contents); //검토의견
	   model.addAttribute("prev_no",prev_no);
	   model.addAttribute("next_no",next_no);
	   model.addAttribute("confrimUsrList",cfList);
	   model.addAttribute("confirmNo_emp", confirmNo_emp);
	   model.addAttribute("confirmRegion", confirmRegion);
       model.addAttribute("attachList", attachList);	   
       model.addAttribute("pageInfo", pageInfo);
       model.addAttribute("authChk", authChk);
	   return  "business/request_view";
	   
   }
    
    //공급요청작성 페이지
	@RequestMapping(value="/request", method = RequestMethod.GET)
    public String bs_request( Model model, HttpSession session, @RequestParam(value="modFlag", required=true, defaultValue="0") String modFlag
    		, @RequestParam(value="neoss_no", required=false) String neossNo) throws Exception {
		int neoss_no;
		if (isEmpty(neossNo)) {
			neoss_no = 0;
		} else {
			if (isNumeric(neossNo)) {
				neoss_no = toInteger(neossNo);
				if (neoss_no < 1) {
					neoss_no = 0;
				}
			} else {
				neoss_no = 0;
			}
		}
		String dept_code = session.getAttribute("dept_code").toString();
		if(neoss_no > 0) {//작성중
			BusinessVO bsVO = (BusinessVO) businessService.t_bs_list_view(neoss_no);
			List<AttachVO> attachList = attachService.select(neoss_no,table_gb);
			
			//승인자 정보 가져오기
			ConfirmUserVO cfVO = new ConfirmUserVO();
			cfVO.setNeoss_no(neoss_no);
			cfVO.setAgw_cd(agw_cd);
			List<ConfirmUserVO> cfList = includeService.confrimUsrList_agw(cfVO);
			for (ConfirmUserVO vo : cfList) {
				vo.setStatus(getStatusNm(vo.getStatus_cd()));
			}
			
			dept_code = bsVO.getOffice_no();
			model.addAttribute("bsVO",bsVO );
			model.addAttribute("attachList", attachList);
			model.addAttribute("confirmUsrList",cfList);
			
		}else { //신규등록
		
			  ApprovalInfoVO approvalInfoVO = new ApprovalInfoVO();
			  UserInfoVO usrVO =(UserInfoVO)session.getAttribute("userinfo");
		        approvalInfoVO.setUser_id(usrVO.getNo_emp());
		        approvalInfoVO.setUser_no(usrVO.getUser_no());
		        approvalInfoVO.setErp_job(agw_cd);//01:aa, 02:bb, 03:cc
		        approvalInfoVO.setOrg(usrVO.getOrg()); // ns or cs
		        if("383019".equals(usrVO.getPorgscode())){
		        	approvalInfoVO.setReq_name("porgscode");
		        }else {
		        	approvalInfoVO.setReq_name("bonbu");
		        }
		        List<ApprovalInfoVO> apprList = userRoleService.listApproval(approvalInfoVO);
		        List<ConfirmUserVO> cfList = new ArrayList<ConfirmUserVO>();
		        int j = 0;
		    	if(apprList.size()>0) {
		    		for (int i = 1; i < 7; i++) {
		    			ConfirmUserVO vo = new ConfirmUserVO();
		    			String status_cd = "0"+ i;
		    			/*if (maxSize > j) {*/
		    			if(j<apprList.size()) {
		    				if (status_cd.equals(apprList.get(j).getStep())) {
				    			vo.setStatus_cd(apprList.get(j).getStep());
								vo.setBonbu_name(apprList.get(j).getAppr_name());
								vo.setOrg_name(apprList.get(j).getDept_name());
								vo.setEmp_name(apprList.get(j).getEmp_name());
								vo.setNo_emp(apprList.get(j).getNo_emp());
								vo.setUser_no(apprList.get(j).getUser_no());
//								logger.info(apprList.get(j).toString());
								j+=1;
			    			} else {
			    				vo = new ConfirmUserVO();
			    				vo.setStatus_cd(status_cd);
			    			}
		    			}else {
		    				vo = new ConfirmUserVO();
		    				vo.setStatus_cd(status_cd);
		    			}
			    		//	if(k==1) k +=5;
		    		/*	} else {
		    				vo = new ConfirmUserVO();
		    				vo.setStatus_cd(status_cd);
		    			}*/
		    			vo.setStatus(getStatusNm(vo.getStatus_cd()));
						//logger.info("ConfirmUserVO=="+ i +"==="+ vo.getEmp_name() );
						cfList.add(vo);
					}
		    	}
			    model.addAttribute("confirmUsrList",cfList);
		}
    	
    	//지사 불러오기
    	model.addAttribute("OfficeList", officeService.t_my_office(dept_code));
		
    	
    	//나머지 코드 불러오기 (건물형태, 건물구분, 공급사유)
    	HashMap<String, Object> listCodeInfo = new HashMap<String, Object>();
    	model.addAttribute("BusinessCode",businessService.t_bs_code(listCodeInfo) );
    	
    	//장비 정보 불러오기 
    	HashMap<String, Object> listModelInfo = new HashMap<String, Object>();
    	model.addAttribute("BusinessModel",businessService.t_bs_model(listModelInfo) );
    	
    	if(modFlag.equals("1")){
    		model.addAttribute("modFlag","Y");
    	}else if (modFlag.equals("0"))  {
    		model.addAttribute("modFlag","N");
    	}else {
    		model.addAttribute("modFlag","X");
    	}
    	
    	return "business/request";
    }
	
    //공급요청작성 페이지
	@RequestMapping(value="/history_view", method = RequestMethod.GET)
    public String bs_history_view(HttpServletRequest httpServletRequest, Model model) throws Exception {
		
		int neoss_no = Integer.parseInt(httpServletRequest.getParameter("neoss_no"));
		int history_no = Integer.parseInt(httpServletRequest.getParameter("history_no"));
		
		//현재꺼
		/*BusinessVO bsVO_present = new BusinessVO();
		bsVO_present = (BusinessVO) businessService.t_bs_list_view(neoss_no);
		model.addAttribute("bsVO_present",bsVO_present );
		
		//기존꺼
		BusinessVO bsVO_history = new BusinessVO();
		bsVO_history = (BusinessVO) businessService.t_bs_list_view_hist2(history_no);
		model.addAttribute("bsVO_history",bsVO_history);*/
		HashMap<String, Integer> paramInfo = new HashMap<String, Integer>();
		paramInfo.put("neoss_no", neoss_no);
		paramInfo.put("history_no", history_no);
		
		HashMap<String, Object> resultInfo = businessService.t_bs_list_view_hist3(paramInfo);
		model.addAttribute("result",resultInfo);
		
		return "business/history";
	}
	
	//하위지사Ajax
	@RequestMapping(value="/subOfficeAjax" ,method = RequestMethod.POST, produces="application/json;charset=utf8")
    public @ResponseBody List<OfficeVO> subOffice(@RequestParam(value="office_cd", required=false, defaultValue = "") int office_cd) throws Exception{
   
    	HashMap<String, Object> listInfo = new HashMap<String, Object>();
    	listInfo.put("office_cd", office_cd);
    	List<OfficeVO> list = officeService.t_office_sub_list(listInfo);
    	return list;
    	
    }
	
	//하위지사Ajax
	@RequestMapping(value="/subOfficeAjaxNew" ,method = RequestMethod.POST, produces="application/json;charset=utf8")
    public @ResponseBody List<OfficeVO> subOffice_new(@RequestParam(value="orgscode", required=false, defaultValue = "") String orgscode,
    		@RequestParam(value="level", required=false, defaultValue = "") int level	) throws Exception{
   
    	HashMap<String, Object> listInfo = new HashMap<String, Object>();
    	listInfo.put("orgscode", orgscode);
    	listInfo.put("level", level);
    	List<OfficeVO> list = officeService.t_office_sub_list(listInfo);
    	return list;
    	
    }
    
    @RequestMapping(value = "/attachDelAjax")
    @ResponseBody
    public String attachDelAjax(@RequestParam(value="ref_no", required=false, defaultValue = "") int ref_no
    		, HttpSession session) throws Exception {

       
        String result = "";
        try {
            attachment.deleteFile(ref_no, session.getAttribute("user_id").toString());
            result = "SUCCESS";
        } catch (Exception e) {
            result = "FAILED";
            e.printStackTrace();
            
        }
        return result;
    }
	
	@RequestMapping(value="/process_write" ,method = RequestMethod.POST)
    public String rstProcess(@ModelAttribute ProcessVO psVO, 
    		@ModelAttribute ModelInfoVO mdVO, HttpSession session ) throws Exception{
		
		//t_neoss 쪽 status도 함께 변경해줘야 함.
			BusinessVO vo = new BusinessVO();
			vo.setNeoss_no(psVO.getNeoss_no());
				if("99".equals(psVO.getStatus_cd())) {//반려인경우처음으로
					vo.setStatus_cd("99");
					vo.setRequest_yn(true);
					vo.setPrev_status(psVO.getPrev_status());
				}else {//요청이면
					if(!psVO.getRequest_yn()) {
						//[1차오픈]착공까지만 설정하기위해서  임시로 쓴 코드 확장이후에는 아래 주석을 해제하고 사용
						//vo.setStatus_cd(statusNext(psVO.getStatus_cd()));

						//[1차오픈]]착공까지만 설정하기위해서  임시로 쓴 코드 확장이후에는 아래  if문을 삭제하고 사용
						if("01".equals(psVO.getStatus_cd())) {
							vo.setStatus_cd("06"); 
						}
						
						if("00".equals(psVO.getStatus_cd())) {
							vo.setStatus_cd(statusNext(psVO.getStatus_cd()));
							vo.setRequest_yn(false);
						}
						
					}else {
						vo.setStatus_cd(psVO.getStatus_cd());
					}
						
						vo.setRequest_yn(psVO.getRequest_yn());
				}
					
					if(!"00".equals(psVO.getStatus_cd()) && !psVO.getRequest_yn()) { 
						psVO.setInput_id(session.getAttribute("user_id").toString());
						psVO.setUpdate_id(session.getAttribute("user_id").toString());
						
						if(!(psVO.getStatus_cd().equals("01") && !psVO.getRequest_yn())) { //투자확정이후부터 입력되게
							if(!psVO.getStatus_cd().equals("99")) { //반려상태가 요청 된경우 olt 테이블에 인서트 안함
								//오늘날짜 셋팅
								Date today = new Date();
								SimpleDateFormat date= new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
								mdVO.setGubun("01");
								mdVO.setOlt_user_id(session.getAttribute("user_id").toString());
								mdVO.setOlt_in_dt(date.format(today));
								//단계별승인정보입력
								processService.process_modelInfo_reg(mdVO);
							}
						}
						
						//승인이력등록
						processService.process_reg(psVO);
					}
					
					//문서상태변경
					businessService.t_bs_update(vo);
					
					String status_cd = vo.getStatus_cd();
					if((!vo.getRequest_yn())||("99".equals(status_cd))) {
						
						BusinessVO mailbsVO = new BusinessVO();
						if("00".equals(status_cd)) {
							status_cd="01";
						} 
						//이메일전송
						//logger.info("/process_write :::::" + psVO.getProcess_no());
						mailbsVO.setStatus_cd(status_cd);
						mailbsVO.setNeoss_no(psVO.getNeoss_no());
						mailbsVO.setRequest_yn(psVO.getRequest_yn());
						mailbsVO.setProcess_no(psVO.getProcess_no());
						
						//[1차오픈]]착공까지만 설정하기위해서  임시로 쓴 코드 확장이후에는 아래  if문을 삭제하고 사용
						/*if("01".equals(psVO.getStatus_cd())) {
							mailbsVO.setStatus_cd("06");
						}*/

						sendMail(mailbsVO,session);
						
					}
					
    	return "include/refresh";
    	
    }
	
	@RequestMapping(value="/process_modi" ,method = RequestMethod.POST)
    public String process_modi(@ModelAttribute ProcessVO psVO, 
    		@ModelAttribute ModelInfoVO mdVO, HttpSession session ) throws Exception{
		
		if(mdVO.getManaged_ip()!=null && !mdVO.getManaged_ip().isEmpty()) {
			mdVO.setGubun(agw_cd);
			//단계별승인정보입력
			processService.process_modelInfo_reg(mdVO);
		}
		if(psVO.getProcess_no()>0) {
			//승인이력수정
			psVO.setUpdate_id(session.getAttribute("user_id").toString());
			processService.process_modi(psVO);
		}
					
					
    	return "include/refresh";
    	
    }
	
	@RequestMapping(value="/del_request" ,method = RequestMethod.GET)
    public String bs_del_request(@RequestParam(value="neoss_no", required=false, defaultValue = "") int neoss_no
    		, @RequestParam(value="page", required=false, defaultValue = "") String page
			, Model model
	        , HttpSession session) throws Exception{
		try {
			HashMap<String, Object> map = new HashMap<String, Object>();
			map.put("neoss_no", neoss_no);
			map.put("update_id", getUserId(session));
			businessService.t_bs_del(map);
			model.addAttribute("msg","OK");
		} catch (Exception e) {
			model.addAttribute("msg", "fail");
		}
		return page;
    	
    }
	
	@RequestMapping(value="/write", method = RequestMethod.POST)
    public String bs_submit(@ModelAttribute BusinessVO bsVO, 
    		MultipartHttpServletRequest mhsq, Model model, HttpSession session,
    		ConfirmUserVO cfVO, HttpServletRequest httpServletRequest)  throws Exception{
			String modFlag= httpServletRequest.getParameter("modFlag");
			bsVO.setInput_id(session.getAttribute("user_id").toString());
			bsVO.setUpdate_id(session.getAttribute("user_id").toString());
			
			String status_cd= bsVO.getStatus_cd();
			BusinessVO mailbsVO = new BusinessVO();

			//요청시
			if(!"00".equals(bsVO.getStatus_cd())) {
				//이메일 리스트 만들기
				mailbsVO.setStatus_cd(status_cd);
				mailbsVO.setNeoss_no(bsVO.getNeoss_no());
				mailbsVO.setRequest_yn(bsVO.getRequest_yn());
			}
			
				//승인작업
				cfVO.setAgw_cd(agw_cd); //agw구분
				if(bsVO.getNeoss_no()>0) {
					//bsVO.neossno로 기존정보 셀렉트해서 vo에 담고 비교해서 틀린것만 다시 담아 히스토리에 인서트하기
					//businessService.t_bs_reg_history(bsVO);
					businessService.t_bs_modify(bsVO, cfVO, mhsq);
				}else {
					int neoss_no = businessService.t_bs_reg(bsVO, cfVO, mhsq);
					mailbsVO.setNeoss_no(neoss_no);
				}
				
				
				
			//이메일 보내기	
			if(!"00".equals(status_cd)) {
				if(!modFlag.equals("Y")) {
					sendMail(mailbsVO,session);
				}
			}

			model.addAttribute("msg","OK");
			return "business/request";
	}
	

    //착공,준공 정보 등록
	@RequestMapping(value="/construct_write", method = RequestMethod.POST)
    public String bs_construct_write(@ModelAttribute ConstructVO csVO, @ModelAttribute ProcessVO psVO,
    		HttpSession session, Model model, HttpServletRequest httpServletRequest) throws Exception {
		String gubun = httpServletRequest.getParameter("gubun");
		csVO.setInput_id(session.getAttribute("user_id").toString());
			
		String[] arryInfo = String.valueOf(csVO.getMem_03_id()).split(",");
		String[] arryInfo_no= String.valueOf(csVO.getConst_mem_no_03()).split(",");
	//	List<UserInfoVO> email_list = emailService.email_list_02(neoss_no);
		
			//[1차오픈] 준공이 없어져서 착공할때 승인자가 없어짐 
			BusinessVO mailbsVO = new BusinessVO();
			mailbsVO.setStatus_cd(psVO.getStatus_cd());
			mailbsVO.setNeoss_no(psVO.getNeoss_no());
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
			if(gubun.equals("01")) { //신규등록이면
				
					//착공정보등록&수정
					List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
					if(!csVO.getMem_01_id().equals("")) {
						list.add(csMemberMap(1, "01", Integer.parseInt(csVO.getMem_01_id()), (String) session.getAttribute("user_id"),0));
					}
					if(!csVO.getMem_02_id().equals("")) {
						list.add(csMemberMap(1, "02", Integer.parseInt(csVO.getMem_02_id()), (String) session.getAttribute("user_id"),0));
					}
					if(!csVO.getMem_03_id().equals("") ) {
		    			for (int i = 0; i < arryInfo.length; i++) {
		    				list.add(csMemberMap(1, "03", Integer.parseInt(arryInfo[i]),  (String) session.getAttribute("user_id"),0));
		    			}
		    		}
					if(!csVO.getMem_04_id().equals("")) {
						arryInfo= new String[csVO.getMem_04_id().split(",").length];
							arryInfo  = csVO.getMem_04_id().split(",");
							for (int i = 0; i < arryInfo.length; i++) {
								list.add(csMemberMap(1, "04", Integer.parseInt(arryInfo[i]),  (String) session.getAttribute("user_id"),0));
							}
					}
					if(list.size() > 0) {
						paramMap.put("list",list);
					}
					
					if(!csVO.getConst_st_desc().equals("") || !csVO.getSt_dt().equals("") || paramMap.get("list") != null) {
						//공사정보 입력하기
						businessService.t_construct_reg(csVO, paramMap);
					}
						
						//승인이력에 입력하기
						psVO.setInput_id(session.getAttribute("user_id").toString());
						psVO.setUpdate_id(session.getAttribute("user_id").toString());
						processService.process_reg(psVO);
						//준공으로 상태 변경하기
						paramMap.clear();
						paramMap.put("neoss_no", psVO.getNeoss_no());
						if(!psVO.getRequest_yn()) {
							//paramMap.put("status_cd", statusNext(psVO.getStatus_cd())); [1차오픈] 이후에 주석 풀고 사용
							paramMap.put("status_cd", psVO.getStatus_cd()); 
							paramMap.put("request_yn", true);
							
						}else {
							paramMap.put("status_cd", psVO.getStatus_cd());
							paramMap.put("request_yn", false);
						}
						
						businessService.t_construct_stat_change(paramMap);

						//[1차오픈]
						mailbsVO.setProcess_no(psVO.getProcess_no());
						mailbsVO.setRequest_yn(true);
						sendMail(mailbsVO,session);
						
			}else if(gubun.equals("02")) {//준공등록일경우
				String const_no = httpServletRequest.getParameter("constNo");
				csVO.setConst_no(Integer.parseInt(const_no));
					//착공정보 입력
					businessService.t_construct_modi_ed(csVO);
					
					if(!psVO.getRequest_yn()) { //준공신규등록
						//승인이력 입력
						psVO.setInput_id(session.getAttribute("user_id").toString());
						psVO.setUpdate_id(session.getAttribute("user_id").toString());
						processService.process_reg(psVO);
						//상태변경
						paramMap.put("neoss_no", psVO.getNeoss_no());
						paramMap.put("request_yn", true);
						paramMap.put("status_cd", psVO.getStatus_cd());
						businessService.t_construct_stat_change(paramMap);
						
						mailbsVO.setProcess_no(psVO.getProcess_no());
						sendMail(mailbsVO,session);
						
					}else {//준공수정
						psVO.setUpdate_id(session.getAttribute("user_id").toString());
						processService.process_modi(psVO);
					}
				
			}else if(gubun.equals("03")) { //착공수정인경우
					List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
					if(!csVO.getMem_01_id().equals("")) {
						list.add(csMemberMap(1, "01", Integer.parseInt(csVO.getMem_01_id()), (String) session.getAttribute("user_id"),csVO.getConst_mem_no_01()));
					}
					if(!csVO.getMem_02_id().equals("")) {
						list.add(csMemberMap(1, "02", Integer.parseInt(csVO.getMem_02_id()), (String) session.getAttribute("user_id"),csVO.getConst_mem_no_02()));
					}
					if(!csVO.getMem_03_id().equals("") ) {
		    			for (int i = 0; i < arryInfo.length; i++) {
		    				list.add(csMemberMap(1, "03", Integer.parseInt(arryInfo[i]),  (String) session.getAttribute("user_id"),Integer.parseInt(arryInfo_no[i])));
		    			}
		    		}
					if(!csVO.getMem_04_id().equals("")) {
							arryInfo= new String[csVO.getMem_04_id().split(",").length];
							arryInfo  = csVO.getMem_04_id().split(",");
							arryInfo_no= new String[String.valueOf(csVO.getConst_mem_no_04()).split(",").length];
							arryInfo_no  = String.valueOf(csVO.getConst_mem_no_04()).split(",");
							
							for (int i = 0; i < arryInfo.length; i++) {
								list.add(csMemberMap(1, "04", Integer.parseInt(arryInfo[i]),  (String) session.getAttribute("user_id"),Integer.parseInt(arryInfo_no[i])));
							}
					}
					if(list.size() > 0) {
						paramMap.put("list",list);
					}
					if(!csVO.getConst_st_desc().equals("") || !csVO.getSt_dt().equals("") || paramMap.get("list") != null) {
						businessService.t_construct_modi(csVO, paramMap);
					}
				//착공정보만 입력
				//businessService.t_construct_modi_ed(csVO);
				
				psVO.setUpdate_id(session.getAttribute("user_id").toString());
				processService.process_modi(psVO);
			}

			model.addAttribute("msg","OK");
		
		return "include/refresh";
	}
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/bs_excel_download" )
	public @ResponseBody void bs_excel_download( HttpServletResponse response,@ModelAttribute SearchVO search, 
																							HttpSession session,  HttpServletRequest request ) 	throws Exception {
		if(!isNull(search.getSearchTxt())) {
			//한번 더 인코딩 된 데이터를 utf8로 디코드해줌 (한번은 자동은로 decode되니까 한번만 더 해주면 됨)
			search.setSearchTxt(URLDecoder.decode(search.getSearchTxt(),"UTF-8"));
			//logger.info("utf-8    :>>>>"+search.getSearchTxt());
		}
		
	    HashMap<String, Object> pageInfo = getPageInfo(search, session);
        //리스트불러오기
		List<AgwExcelVO> bs_list = (List<AgwExcelVO>) businessService.t_bs_list_excel(pageInfo);
        commonutil.excel_download(bs_list, response,  agw_cd, request);

	}
	
	public HashMap<String, Object> csMemberMap(int const_no, String mem_cd, int id, 
			 String input_id, int const_mem_no)throws Exception{
		
		HashMap<String, Object> map = new HashMap<String, Object>();
		
		map.put("mem_cd", mem_cd);
		map.put("user_no",id);
		map.put("input_id", input_id);
		map.put("const_mem_no", const_mem_no);
		
		return map; 
	}
	
	private String getStatusNm(String status_cd) {
		String result = "";
		switch (status_cd) {
		case "01"	: result = "투자확정";					break;
		case "02"	: result = "IP확정";						break;
		case "03"	: result = "MGID확정";				break;
		case "04"	: result = "COLCODE확정";			break;
		case "05"	: result = "장비정보확정";			break;
		case "06"	: result = "착공(공사요청)";		break;
		case "07"	: result = "준공";						break;
		default		: result = "그외";						break;
		}
		return result;
	}
	
	
	//현재상태 구하기
	public String statusChk(String statusCd , boolean rstYn) {
		
		String result ="";
		
		if("00".equals(statusCd) && !rstYn) { //작성중
			result = "작성중";
		}else if("01".equals(statusCd) && !rstYn) {//확정요청
			result = "투자확정요청";
		}else if("01".equals(statusCd) && rstYn) {//확정
			result = "투자확정";
		}else if("02".equals(statusCd) && !rstYn) {//IP확정 요청
			result = "IP확정요청";
		}else if("02".equals(statusCd) && rstYn) {//IP확정
			result = "IP확정";
		}else if("03".equals(statusCd) && !rstYn) {//MGID확정 요청
			result = "MGID확정요청";
		}else if("03".equals(statusCd) && rstYn) {//MGID 확정
			result = "MGID확정";
		}else if("04".equals(statusCd) && !rstYn) {//COLCODE확정 요청
			result = "COLCODE확정요청";
		}else if("04".equals(statusCd) && rstYn) {//COLCODE확정 
			result = "COLCODE확정";
		}else if("05".equals(statusCd) && !rstYn) {//장비정보등록-4 확정요청
			result = "장비정보등록 요청";
		}else if("05".equals(statusCd) && rstYn) {//장비정보등록-4 확정
			result = "장비정보 확정";
		}else if("06".equals(statusCd) && !rstYn) {//공사요청
			result = "착공요청";
		}else if("06".equals(statusCd) && rstYn) {//공사중(착공)
			result = "착공(공사요청)";
		}else if("07".equals(statusCd) && !rstYn) {//준공요청
			result = "준공요청";
		}else if("07".equals(statusCd) && rstYn) {//준공
			result = "준공";
		}else if("99".equals(statusCd) && rstYn) {//반려
			result = "반려";
		}else {
			result = "알수없음";
		}
		return result;
		
	}
	
	public String statusNext(String val) {
		
		String result = "";
		//임시
		if("00".equals(val)) {
			result ="01";
		}else if ("01".equals(val)) {
			result ="02"; 
		}else if ("02".equals(val)) {
			result ="03";
		}else if ("03".equals(val)) {
			result ="04";
		}else if ("04".equals(val)) {
			result ="05";
		}else if ("05".equals(val)) {
			result ="06";
		}else if ("06".equals(val)) {
			result ="07";
		}else if ("07".equals(val)) {
			result ="07";
		}else if ("99".equals(val)) {
			result ="01";
		}
		return result;
		
	}
	
	@RequestMapping(value="/reWriteMail" ,method = RequestMethod.POST)
	public String reWriteMail(@ModelAttribute ProcessVO psVO,@ModelAttribute ModelInfoVO mdVO,  Model model ,
											@ModelAttribute ConstructVO csVO, HttpSession  session ) throws Exception{
		String input_id =session.getAttribute("user_id").toString(); 
		
		//[1차오픈]을 위한 코드
		BusinessVO mailbsVO = new BusinessVO();
		//logger.info("psVO.getStatus_cd();;;;;"+psVO.getStatus_cd());
	
		
		if(csVO.getConst_no()>0) {
			
				Map<String, Object> paramMap = new HashMap<String, Object>();
				String[] arryInfo = csVO.getMem_03_id().split(",");
				String[] arryInfo_no= String.valueOf(csVO.getConst_mem_no_03()).split(",");
				List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
				if(!csVO.getMem_01_id().equals("")) {
					list.add(csMemberMap(1, "01", Integer.parseInt(csVO.getMem_01_id()), (String) session.getAttribute("user_id"),csVO.getConst_mem_no_01()));
				}
				if(!csVO.getMem_02_id().equals("")) {
					list.add(csMemberMap(1, "02", Integer.parseInt(csVO.getMem_02_id()), (String) session.getAttribute("user_id"),csVO.getConst_mem_no_02()));
				}
				if(!csVO.getMem_03_id().equals("") ) {
					for (int i = 0; i < arryInfo.length; i++) {
						list.add(csMemberMap(1, "03", Integer.parseInt(arryInfo[i]),  (String) session.getAttribute("user_id"),Integer.parseInt(arryInfo_no[i])));
					}
				}
				if(!csVO.getMem_04_id().equals("")) {
						arryInfo= new String[csVO.getMem_04_id().split(",").length];
						arryInfo  = csVO.getMem_04_id().split(",");
						arryInfo_no= new String[String.valueOf(csVO.getConst_mem_no_04()).split(",").length];
						arryInfo_no  = String.valueOf(csVO.getConst_mem_no_04()).split(",");
						
						for (int i = 0; i < arryInfo.length; i++) {
							list.add(csMemberMap(1, "04", Integer.parseInt(arryInfo[i]),  (String) session.getAttribute("user_id"),Integer.parseInt(arryInfo_no[i])));
						}
				}
				if(list.size() > 0) {
					paramMap.put("list",list);
				}
				if(!csVO.getConst_st_desc().equals("") || !csVO.getSt_dt().equals("") || paramMap.get("list") != null) {
					csVO.setUpdate_id(input_id);
					businessService.t_construct_modi(csVO, paramMap);
				}
			
				psVO.setUpdate_id(input_id);
				processService.process_modi(psVO);
		}else {
				if(mdVO.getManaged_ip()!=null && !mdVO.getManaged_ip().isEmpty()) {
					mdVO.setGubun(agw_cd);
					//단계별승인정보입력
					processService.process_modelInfo_reg(mdVO);
				}
				if(psVO.getProcess_no()>0) {
					//승인이력수정
					psVO.setUpdate_id(input_id);
					processService.process_modi(psVO);
				}
		}
		
		//logger.info(idx+"단계 승인자 :" + no_emp);
		mailbsVO.setNeoss_no(psVO.getNeoss_no());
		mailbsVO.setStatus_cd(psVO.getStatus_cd());
		mailbsVO.setRequest_yn(psVO.getRequest_yn());
		mailbsVO.setProcess_no(psVO.getProcess_no());
	  //logger.info(mailbsVO.toString());
		
		sendMail (mailbsVO, session);
		
		return "include/refresh";
	}
	
	public void sendMail(BusinessVO bsVO, HttpSession session) throws Exception {
		String status = bsVO.getStatus_cd();
		List<UserRoleVO>email_list =null;
		//logger.info("status:::"+bsVO.getStatus());
		//logger.info("requestYn:::"+bsVO.getRequest_yn());
		bsVO.setAgw_cd(agw_cd);
		bsVO.setInput_id(session.getAttribute("user_id").toString());
		switch (status) {
		case "06": //착공
			if(!bsVO.getRequest_yn()) {
				email_list=emailService.email_list_01(bsVO);
			}else {
				email_list=emailService.email_list_02(bsVO); //착공완료작업
			}
			break;
		case "07": //준공
			email_list=emailService.email_list_02(bsVO);
			break;
		case "99"://반려
			email_list =emailService.email_list_02(bsVO);
			break;
		default: //나머지단계
			email_list=emailService.email_list_01(bsVO);
			break;
		}
		
		//셋팅하기
		EmailVO mailVO = new EmailVO();
		 //승인자 정보 가져오기
		ConfirmUserVO cfVO = new ConfirmUserVO();
		cfVO.setNeoss_no(bsVO.getNeoss_no());
		cfVO.setAgw_cd(agw_cd);
		List<ConfirmUserVO> cfList = includeService.confrimUsrList_agw(cfVO);
		for (int i = 0; i < cfList.size(); i++) {
			if(cfList.get(i).getPhone_number()!=null || !cfList.get(i).getPhone_number().equals("")) {
				cfList.get(i).setPhone_number(toTelNum(cfList.get(i).getPhone_number()));
			}
			
		}
		//해당승인자및부서리스트
		String[] receiver =  new String [email_list.size()]; //디폴트승인자 한명 먼저 셋팅
		for (int i = 0; i < receiver.length; i++) {
			if(!isNull(email_list.get(i).getEmail_address())) {
				receiver[i] = email_list.get(i).getEmail_address();
			}
		}
		
		if(receiver.length>0) {
			//메일제목설정
			String title = "";
			if ("99".equals(bsVO.getStatus_cd())) {
				title = statusChk(bsVO.getStatus_cd(), true);
			}else {
				title = statusChk(bsVO.getStatus_cd(), bsVO.getRequest_yn());
			}
			
			List<ProcessVO> psVO = processService.process_list(bsVO.getNeoss_no());
			if(psVO.size()>0) {
				for (int i = 0; i <psVO.size(); i++) {
					psVO.get(i).setStatus(statusChk(psVO.get(i).getStatus_cd(), true) );
					psVO.get(i).setPhone_number(toTelNum(psVO.get(i).getPhone_number()));
				}
			}
			mailVO.setSubject("[AGW] 수요공급요청("+title+")");
			mailVO.setContent(emailSender.getEmailContent01((BusinessVO) businessService.t_bs_list_view(bsVO.getNeoss_no()),cfList, title, psVO));
			
			//logger.info(mailVO.getSubject()+"]]]]]]]]]]]]]]]]]]");
			//logger.info(bsVO.getStatus_cd());
			mailVO.setReceiver(receiver);
			//보내기
			emailSender.sendEmail(mailVO);
			//logger.info("EmailSender ======= go");
		}
	}

	public String getUserId(HttpSession session) {
		return session.getAttribute("user_id").toString();
	}


}
