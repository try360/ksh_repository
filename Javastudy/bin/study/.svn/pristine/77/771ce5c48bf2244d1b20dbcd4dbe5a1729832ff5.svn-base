<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.kt.agwne.reformMapper">
<resultMap id="reformCnt" type="HashMap">
	<result javaType = "int" column="totalRecordCount" property="totalRecordCount"/>
	<result javaType = "int" column="modelNumCnt" property="modelNumCnt"/>
</resultMap>
	<!-- 2018-04-19 배수산
		광전화수요공급 코드들 가져오기 -->
	<select id="t_bs_code" parameterType="map" resultType="codeVO">
	 <![CDATA[
			SELECT 
				seq, code_gb , code_nm , code , column_nm
			FROM 
				agwne.t_code 
			WHERE 
				del_yn is FALSE 
			  and agw_cd = '02'
			  and column_nm='supply_cd'
			ORDER 
				by code_gb, seq	
	 ]]>
    </select>

    <!-- 장비정보 -->
    <select id="t_bs_model" parameterType="map" resultType="modelVO">
	 <![CDATA[
			SELECT cost_no,supply_nm, model_cd, type, line_num, agw_cd,
				   cost_supply, cost_construct, cost_etc, cost_total,
					(case when supply_nm != '' then '['||supply_nm||']' else '' end) ||model_cd||
					(case when type != '' then '('||type||')' else '' end) ||
					'/'||line_num 
					AS model_nick 
			FROM agwne.t_cost
			WHERE del_yn  is false
			ORDER by supply_nm, model_cd, line_num, type
	 ]]>
    </select>
    <select id="r_model_person" parameterType="int" resultType="UserInfoVO">
    <![CDATA[
	    SELECT C.user_no, C.emp_name, C.phone_number,C.office_nm  , C.dept_name, C.bonbu_name
	    FROM agwne.t_reform A 
			INNER JOIN agwne.t_reform_person B on (A.device_cd = B.device_cd and B.del_yn is false)
			LEFT OUTER JOIN agwne.t_org_user C on (B.user_no = C.user_no )
		WHERE A.neoss_no=#{neoss_no}
	]]>
    </select>
    <!-- 수요공급요청등록 -->
    <insert id="t_bs_reg" parameterType="bsVO" useGeneratedKeys="true" keyProperty="neoss_no" keyColumn="neoss_no">
	    <![CDATA[
	    	INSERT INTO agwne.t_reform(
	    		office_no
	    		,supply_cd
	    		,device_cd
	    		,model_num
	    		,supply_dt
	    		,status_cd
	    		,request_yn
	    		,del_yn
	    		,input_id
	    		,update_id
	    		,input_dt
	    		,time_stamp
	    		,docseq
	    	)values(
	    		 #{office_no}
	    		, #{supply_cd}
	    		, #{device_cd}
	    		, #{model_num}
	    		, to_date(#{supply_dt}, 'yyyy-mm-dd')
	    		, #{status_cd}
	    		 ]]>
	    		<if test="!request_yn">
	    		, FALSE
	    		</if>
	    		<if test="request_yn">
	    		, TRUE
	    		</if>
	    	<![CDATA[
	    		, FALSE
	    		, #{input_id}
	    		, #{update_id}
	    		, now()
	    		, now()
	    		, (select coalesce(max(docseq), 0) +1
					 from agwne.t_reform
				    where del_yn = false
				      and to_char(input_dt, 'yyyyMM') = to_char(now(), 'yyyyMM')
	    		  )
	    	)
	    	]]>
		<selectKey keyProperty="neoss_no" resultType="int" order="AFTER">
		 <![CDATA[
		   select CURRVAL('agwne.t_neoss_neoss_no_seq')
		  ]]>
		</selectKey>
    </insert>
    <update id="t_bs_reg_doc" parameterType="bsVO">
    <![CDATA[
		UPDATE agwne.t_reform SET doc_no = (
			SELECT 'R'||'-'||to_char(a.input_dt, 'yyyymm')||'-'||doc.org_initial||'-'||lpad(a.docseq::varchar,5,'0') as doc_no
			FROM agwne.t_reform a 
               LEFT OUTER JOIN agwne.t_bonbu_level b on (a.office_no = b.orgscode) 
			   LEFT OUTER JOIN agwne.t_org_naming doc on b.bonbu = doc.orgscode where a.neoss_no = #{neoss_no} ) 
	 		WHERE neoss_no=#{neoss_no}
	 ]]>
    </update>
    <update id="t_bs_modify" parameterType="bsVO">
     <![CDATA[
    	UPDATE agwne.t_reform SET 
		    		  office_no	= #{office_no}
		    		, supply_cd	= #{supply_cd}
		    		, device_cd	= #{device_cd}
		    		, model_num	= #{model_num}
		    		, supply_dt	= to_date(#{supply_dt}, 'yyyy-MM-dd')
					, update_id	= #{update_id}
					, time_stamp= now()
					, status_cd	= #{status_cd} 
			]]>				
					<if test="!request_yn">
		    		, request_yn		= FALSE
		    		</if>
		    		<if test="request_yn">
		    		, request_yn		= TRUE
	    			</if>
		<![CDATA[    			
			WHERE 		
					neoss_no = #{neoss_no}		
		]]>
	    	
    </update>
    
    <!-- 수요공급요청리스트 -->
    <select id="t_bs_list" parameterType="map" resultType="bsVO">
	<![CDATA[
		SELECT ROW_NUMBER()OVER(ORDER BY A.neoss_no ASC) as rnum
		     , A.neoss_no
			 , A.status_cd
			 , A.request_yn
			 , A.model_num
			 , D.office_0 as search_bonbu
			 , office_no
			 , D.office_1
			 , D.office_2
			 , D.office_3
			 , A.device_cd
			 , DA.orgname as office_nm
			 , DB.orgname as branch_nm
			 , C.code_nm as supply_cd
			 , A.input_id
			 , E.emp_name
			 , E.ex_agency_nm
			 , F.emp_name nextConfirmUsr
			 , F.ex_agency_nm nextConfirmOrg
			 , to_char(a.input_dt,'yyyy-mm-dd') input_dt
			 , A.input_dt search_dt
			 , A.doc_no
			 , H.code_nm as status
			 , A.device_cd
			 , BD.device_nm
		  FROM agwne.t_reform A
		  	   LEFT OUTER JOIN agwne.t_confirm B ON (A.neoss_no = B.neoss_no AND B.agw_cd = '02' AND B.status_cd=(CASE A.status_cd WHEN '99' THEN '01' ELSE A.status_cd END) AND B.del_yn = false)
			   LEFT OUTER JOIN agwne.t_code C ON (A.supply_cd = C.code AND C.column_nm = 'supply_cd' AND C.agw_cd ='02' AND C.del_yn = false)
			   LEFT OUTER JOIN (
								SELECT orgscode
				                     , CAST(hierarchy[1] as varchar(64)) office_0
				   					 , CAST(hierarchy[2] as varchar(64)) office_1
							 		 , COALESCE(CAST(hierarchy[3] as varchar(64)), orgscode) office_2
				   				     , CAST((CASE WHEN hierarchy[4] = hierarchy[3] THEN null ELSE hierarchy[4] END) as varchar(64)) office_3 
				                  FROM agwne.t_bonbu_level		   
			   ) D ON (A.office_no = D.orgscode )
			   LEFT OUTER JOIN agwne.t_org_user E on (A.input_id = E.no_emp)
			   LEFT OUTER JOIN agwne.t_org_user F ON (B.user_no = F.user_no)
			   LEFT OUTER JOIN agwne.t_code H ON (H.code = CONCAT(A.status_cd, A.request_yn) AND H.agw_cd = '02' AND H.column_nm = 'status_cd')
			   LEFT OUTER JOIN agwne.t_bonbu_level DA ON (D.office_0 = DA.orgscode)
			   LEFT OUTER JOIN agwne.t_bonbu_level DB ON (D.office_1 = DB.orgscode)
			   left outer join agwne.t_barcode_device BD on (A.device_cd = BD.device_cd)
		 where A.del_yn = false

			]]>	
			<if test="date_format != null and !date_format.equals('')">
			<![CDATA[
				and to_char(A.input_dt, '${date_format}') >= '${st_date}' and  to_char(A.input_dt, '${date_format}') <= '${ed_date}' 
			]]>
			</if>
			<if test="office_0 != null and office_0 != '' and office_0 != 'title'"   >
			<![CDATA[
				and D.office_0 =#{office_0}
			]]>
			</if>			
			<if test="office_1 != null and office_1 != '' and office_1 != 'title'" >
			<![CDATA[
				and D.office_1 = #{office_1} 
			]]>
			</if>
			<if test="office_2 != null and office_2 != '' and office_2 != 'title'">
			<![CDATA[
				and D.office_2 = #{office_2} 
			]]>
			</if>
			<if test="office_3 != null and office_3 != '' and office_3 != 'title'">
			<![CDATA[
				and D.office_3 = #{office_3} 
			]]>
			</if>	
			<if test="supply_cd != null and !supply_cd.equals('')">
			<![CDATA[
				and A.supply_cd = #{supply_cd}
			]]>
			</if>	
			<if test="model_num != null and !model_num.equals('') ">
					<![CDATA[
						and A.model_num =${model_num} 
					]]>
			</if>		
			<if test="status != null and !status.equals('')">
			<![CDATA[
				and H.code = '${status}'
			]]>
			</if>
			<if test="device_cd != null and !device_cd.equals('')">
			<![CDATA[
				and A.device_cd = '${device_cd}'
			]]>
			</if>	
			<if test="user_no != null and !user_no.equals('')">
			<![CDATA[
				and A.input_id = (select no_emp from agwne.t_org_user where user_no= ${user_no} )
			]]>
			</if>						
	<![CDATA[	
			ORDER BY A.neoss_no desc
			LIMIT ${recordsPerPage} OFFSET ${startRecord}
	]]>	
    </select>
    
    <!-- 수요공급요청엑셀 -->
    <select id="t_bs_list_excel" parameterType="map" resultType="reformExcelVO">
    <![CDATA[
		SELECT 
			A.doc_no, H.code_nm as status,
			DA.orgname office_nm, DB.orgname branch_nm, DC.orgname branch_nm2, DD.orgname branch_nm3,
			A.supply_dt, C.code_nm as supply_cd, 
			A.device_cd,
			A.model_num, E.emp_name, to_char(A.input_dt, 'yyyy-MM-dd') input_dt 
		FROM agwne.t_reform A
		  	   LEFT OUTER JOIN agwne.t_confirm B ON (A.neoss_no = B.neoss_no AND B.agw_cd = '02' AND B.status_cd=(CASE A.status_cd WHEN '99' THEN '01' ELSE A.status_cd END) AND B.del_yn = false)
			   LEFT OUTER JOIN agwne.t_code C ON (A.supply_cd = C.code AND C.column_nm = 'supply_cd' AND C.agw_cd ='02' AND C.del_yn = false)
			   LEFT OUTER JOIN (
					SELECT orgscode
	                     , CAST(hierarchy[1] as varchar(64)) office_0
	   					 , CAST(hierarchy[2] as varchar(64)) office_1
				 		 , COALESCE(CAST(hierarchy[3] as varchar(64)), orgscode) office_2
	   				     , CAST((CASE WHEN hierarchy[4] = hierarchy[3] THEN null ELSE hierarchy[4] END) as varchar(64)) office_3 
	                  FROM agwne.t_bonbu_level		   
			   ) D ON (A.office_no = D.orgscode )
			   LEFT OUTER JOIN agwne.t_org_user E on (A.input_id = E.no_emp)
			   LEFT OUTER JOIN agwne.t_org_user F ON (B.user_no = F.user_no)
			   LEFT OUTER JOIN agwne.t_code H ON (H.code = CONCAT(A.status_cd, A.request_yn) AND H.agw_cd = '02' AND H.column_nm = 'status_cd')
			   LEFT OUTER JOIN agwne.t_bonbu_level DA ON (D.office_0 = DA.orgscode)
			   LEFT OUTER JOIN agwne.t_bonbu_level DB ON (D.office_1 = DB.orgscode)
			   LEFT OUTER JOIN agwne.t_bonbu_level DC ON (D.office_2 = DC.orgscode)
			   LEFT OUTER JOIN agwne.t_bonbu_level DD ON (D.office_3 = DD.orgscode)

		 where A.del_yn = false
			]]>	
			<if test="date_format != null and !date_format.equals('')">
			<![CDATA[
				and to_char(A.input_dt, '${date_format}') >= '${st_date}' and  to_char(A.input_dt, '${date_format}') <= '${ed_date}' 
			]]>
			</if>
			<if test="office_0 != null and office_0 != '' and office_0 != 'title'"   >
			<![CDATA[
				and D.office_0 =#{office_0}
			]]>
			</if>			
			<if test="office_1 != null and office_1 != '' and office_1 != 'title'" >
			<![CDATA[
				and D.office_1 = #{office_1} 
			]]>
			</if>
			<if test="office_2 != null and office_2 != '' and office_2 != 'title'">
			<![CDATA[
				and D.office_2 = #{office_2} 
			]]>
			</if>
			<if test="office_3 != null and office_3 != '' and office_3 != 'title'">
			<![CDATA[
				and D.office_3 = #{office_3} 
			]]>
			</if>	
			<if test="supply_cd != null and !supply_cd.equals('')">
			<![CDATA[
				and A.supply_cd = #{supply_cd}
			]]>
			</if>	
			<if test="model_num != null and !model_num.equals('') ">
					<![CDATA[
						and A.model_num =${model_num} 
					]]>
			</if>		
			<if test="status != null and !status.equals('')">
			<![CDATA[
				and H.code = '${status}'
			]]>
			</if>
			<if test="device_cd != null and !device_cd.equals('')">
			<![CDATA[
				and A.device_cd = '${device_cd}'
			]]>
			</if>	
			<if test="user_no != null and !user_no.equals('')">
			<![CDATA[
				and A.input_id = (select no_emp from agwne.t_org_user where user_no= ${user_no} )
			]]>
			</if>						
	<![CDATA[	
			ORDER BY A.neoss_no desc
			LIMIT ${recordsPerPage} OFFSET ${startRecord}
	]]>	
    </select>
    
    <select id="t_bs_listCnt" parameterType="map" resultMap="reformCnt">
    <![CDATA[		
			SELECT 
					count(*) as totalRecordCount
					,sum(A.model_num) as modelNumCnt
		 FROM agwne.t_reform A
		  	   LEFT OUTER JOIN agwne.t_confirm B ON (A.neoss_no = B.neoss_no AND B.agw_cd = '02' AND B.status_cd=(CASE A.status_cd WHEN '99' THEN '01' ELSE A.status_cd END) AND B.del_yn = false)
			   LEFT OUTER JOIN agwne.t_code C ON (A.supply_cd = C.code AND C.column_nm = 'supply_cd' AND C.agw_cd ='02' AND C.del_yn = false)
			   LEFT OUTER JOIN (
								SELECT orgscode
				                     , CAST(hierarchy[1] as varchar(64)) office_0
				   					 , CAST(hierarchy[2] as varchar(64)) office_1
							 		 , COALESCE(CAST(hierarchy[3] as varchar(64)), orgscode) office_2
				   				     , CAST((CASE WHEN hierarchy[4] = hierarchy[3] THEN null ELSE hierarchy[4] END) as varchar(64)) office_3 
				                  FROM agwne.t_bonbu_level		   
			   ) D ON (A.office_no = D.orgscode )
			   LEFT OUTER JOIN agwne.t_org_user E on (A.input_id = E.no_emp)
			   LEFT OUTER JOIN agwne.t_org_user F ON (B.user_no = F.user_no)
			   LEFT OUTER JOIN agwne.t_code H ON (H.code = CONCAT(A.status_cd, A.request_yn) AND H.agw_cd = '02' AND H.column_nm = 'status_cd')
			   LEFT OUTER JOIN agwne.t_bonbu_level DA ON (D.office_0 = DA.orgscode)
			   LEFT OUTER JOIN agwne.t_bonbu_level DB ON (D.office_1 = DB.orgscode)

		 where A.del_yn = false
					]]>
			<if test="date_format != null and !date_format.equals('')">
			<![CDATA[
				and to_char(A.input_dt, '${date_format}') >= '${st_date}' and  to_char(A.input_dt, '${date_format}') <= '${ed_date}' 
			]]>
			</if>
			<if test="office_0 != null and office_0 != '' and office_0 != 'title'"   >
			<![CDATA[
				and D.office_0 =#{office_0}
			]]>
			</if>			
			<if test="office_1 != null and office_1 != '' and office_1 != 'title'" >
			<![CDATA[
				and D.office_1 = #{office_1} 
			]]>
			</if>
			<if test="office_2 != null and office_2 != '' and office_2 != 'title'">
			<![CDATA[
				and D.office_2 = #{office_2} 
			]]>
			</if>
			<if test="office_3 != null and office_3 != '' and office_3 != 'title'">
			<![CDATA[
				and D.office_3 = #{office_3} 
			]]>
			</if>	
			<if test="supply_cd != null and !supply_cd.equals('')">
			<![CDATA[
				and A.supply_cd = '${supply_cd}' 
			]]>
			</if>	
			<if test="model_num > 0 ">
					<![CDATA[
						and A.model_num = ${model_num} 
					]]>
			</if>		
			<if test="status != null and !status.equals('')">
			<![CDATA[
				and H.code = '${status}' 
			]]>
			</if>
			<if test="device_cd !=null and device_cd != ''">
			<![CDATA[
				and A.device_cd = '${device_cd}'
			]]>
			</if>	
			<if test="user_no > 0 ">
			<![CDATA[
				and A.input_id = (select no_emp from agwne.t_org_user where user_no= ${user_no} )
			]]>
			</if>		
    </select>
    
    <!-- 수요공급요청 상세보기 -->
 	<select id ="t_bs_list_view" parameterType="int" resultType="bsVO">
	<![CDATA[
		SELECT A.neoss_no, A.doc_no, B.code_nm supply_cd, A.office_no, A.device_cd
			  , A.model_num, to_char(A.supply_dt,'yyyy-MM-dd') supply_dt
			  , to_char(A.input_dt ,'yyyy-MM-dd') input_dt, org.emp_name, org.office_nm, status_cd, request_yn , prev_status	
			  , A.input_id	, A.device_cd
		FROM agwne.t_reform A 
			LEFT OUTER JOIN agwne.t_code B on (A.supply_cd = B.code and B.column_nm='supply_cd' and B.agw_cd='02' and B.del_yn is false) 
			LEFT OUTER JOIN agwne.t_org_user org on(A.input_id = org.no_emp)
		WHERE A.del_yn = false
	        AND A.neoss_no = #{rstNo}
	]]>
 	</select>
   <!-- 수요공급요청이력 리스트 -->
 	<select id ="r_history_list" parameterType="int" resultType="bsVO">
		<![CDATA[ 
						SELECT 
							row_number()over(order by history_no asc ) as rnum,
							history_no,
							neoss_no, 
							to_char(a.action_dt,'yyyy-mm-dd HH:mi') time_stamp,
							usr.emp_name as update_id,
							usr.office_nm,
							usr.phone_number
			FROM
							agwne.t_neoss_history a 
							LEFT OUTER JOIN agwne.t_org_user usr on (a.action_id = usr.no_emp)	
			WHERE
							a.del_yn is FALSE
							and neoss_no =#{neoss_no}
							
			ORDER BY		a.history_no DESC
		]]>
 	</select>
 	<!-- 수요공급요청이력 상세-->
 	<select id ="t_bs_list_view_hist" parameterType="java.util.HashMap" resultType="bsVO">
 	<![CDATA[
				SELECT A.neoss_no, A.doc_no, B.code_nm supply_cd, A.office_no, A.device_cd
			  , A.model_num, to_char(A.supply_dt,'yyyy-MM-dd') supply_dt
			  , to_char(A.input_dt ,'yyyy-MM-dd') input_dt, org.emp_name, org.office_nm, status_cd, request_yn , prev_status	
			  , A.input_id				
			FROM agwne.t_neoss_history A 
			LEFT OUTER JOIN agwne.t_code B on (A.supply_cd = B.code and B.column_nm='supply_cd' and B.agw_cd='02' and B.del_yn is false) 
			LEFT OUTER JOIN agwne.t_org_user org on(A.input_id = org.no_emp)
		WHERE A.del_yn = false
	        AND A.neoss_no = #{neoss_no} and history_no = #{history_no}
 	]]>
 	</select>
 	
 	
 	
    <select id="request_prev_no" parameterType="int" resultType="int">
    <![CDATA[
		select    neoss_no as prev_no
		  from    agwne.t_reform
		 where    1=1
		          and del_yn is FALSE
		          and neoss_no < #{rstNo}
		 order by neoss_no desc
		 limit    1
    ]]>
    </select>
    
    <select id="request_next_no" parameterType="int" resultType="int">
    <![CDATA[
		select    neoss_no as prev_no
		  from    agwne.t_reform
		 where    1=1
		          and del_yn is FALSE
		          and neoss_no > #{rstNo}
		 order by neoss_no asc
		 limit    1
    ]]>
    </select>
    
    <update id="t_bs_list_update" parameterType="bsVO" >
    
    	UPDATE agwne.t_reform SET
    		status_cd = #{status_cd}
    		<if test="!request_yn">
	    	, request_yn = FALSE
	    	</if>
	    	<if test="request_yn">
	    	, request_yn = TRUE
	    	</if>
	    	<if test="prev_status != null || prev_status != ''">
	    	, prev_status = #{prev_status}
	    	</if>
    	WHERE neoss_no = #{neoss_no}	
    	
    
    </update>
    
   <insert id="t_construct_reg" parameterType="csVO" useGeneratedKeys="true" keyProperty="const_no" keyColumn="const_no">
   		<![CDATA[
   			INSERT INTO agwne.t_construct(
   			  	]]>  
			  <if test="const_no >0">
			  <![CDATA[
			    const_no,
			    ]]>
			  </if>
			  <![CDATA[
			    neoss_no
			    ]]>
			<if test="st_dt  != '' ">
			  <![CDATA[
			    , st_dt
			    ]]>  
		 	</if> 
		 	  <![CDATA[   
			    , ed_dt
			    , const_st_desc
			    , const_ed_desc
			    , input_id
			    , input_dt
			    , update_id
			    , time_stamp
			)VALUES(
				]]>  
			  <if test="const_no >0">
			  <![CDATA[
			    #{const_no},
			    ]]>
			  </if>
			  <![CDATA[
			    #{neoss_no}
			  ]]>  
			  <if test="st_dt  != ''">
			  <![CDATA[
			    ,to_date(#{st_dt},'yyyy-mm-dd')
			    ]]>
			  </if>
			 <![CDATA[
			    ,to_date(#{ed_dt},'yyyy-mm-dd')
			    ,#{const_st_desc}
			    ,#{const_ed_desc}
			    ,#{input_id}
			    ,now()
			    ,#{input_id}
			    ,now()
			) ON CONFLICT(const_no) DO UPDATE SET 
				 neoss_no				= #{neoss_no}
				  ]]>  
			  <if test="st_dt  != ''">
			  <![CDATA[
			   , st_dt					= to_date(#{st_dt},'yyyy-mm-dd')
			    ]]>
			  </if>
			  <if test="ed_dt  != ''">
			 <![CDATA[
			    , ed_dt					= to_date(#{ed_dt},'yyyy-mm-dd')
			    ]]>
			    </if>
			    <![CDATA[
			    , const_st_desc		= #{const_st_desc}
			    , const_ed_desc		= #{const_ed_desc}
			    , update_id			= #{input_id}
				, time_stamp 		= now()
   				]]>
   		<selectKey keyProperty="const_no" resultType="int" order="AFTER">
   		 <if test="const_no == 0">
		 <![CDATA[
		   select CURRVAL('agwne.t_construct_const_no_seq')
		  ]]>
		  </if>
		   <if test="const_no >0">
		   	<![CDATA[
		  	select const_no from agwne.t_construct where const_no= #{const_no} and del_yn is false
		  	]]>
		   </if>
		</selectKey>
   </insert>
     <insert id="t_bs_reg_confirm" parameterType="java.util.HashMap">
         <if test = "list.size > 0 ">
   		<![CDATA[
   			INSERT INTO agwne.t_confirm (
                     neoss_no
                    ,agw_cd
                    ,status_cd
                    ,user_no
                    ,input_id
                    ,update_id
                    ,input_dt
                    ,time_stamp
			)VALUES
			]]>
			<foreach collection="list" item="item" separator=",">
			<![CDATA[
			(
			   		 #{item.neoss_no}
                    ,#{item.agw_cd}
                    ,#{item.status_cd}
                    ,#{item.user_no}
                    ,#{item.input_id}
                    ,#{item.input_id}
                    ,now()
                    ,now()
			)
			]]>
			</foreach> 
			</if>
   </insert>
      <update id="t_bs_modi_confirm" parameterType="java.util.HashMap" >
    <if test = "list.size > 0 ">
      <foreach collection="list" item="item" separator=";">
   		UPDATE agwne.t_confirm 
			SET  user_no = #{item.user_no}
				,update_id	= #{item.update_id}
				,time_stamp	= now()
		WHERE 
				agw_cd='02'
				AND neoss_no= #{item.neoss_no}
				AND status_cd = #{item.status_cd}
				AND del_yn is false
	  </foreach>		
	</if>
   </update>
   <update id="t_const_modi" parameterType="csVO">
  <![CDATA[
   		UPDATE agwne.t_construct
			SET neoss_no		= #{neoss_no}
	]]>		
		<if test = "st_dt != null || st_dt != ''" >
		 <![CDATA[
				,st_dt			= to_date(#{st_dt}, 'yyyy-mm-dd')
				,const_st_desc	= #{const_st_desc}
		]]>
		</if>		
		<if test = "ed_dt != null || ed_dt != ''" >
		 <![CDATA[
				,ed_dt			= to_date(#{ed_dt}, 'yyyy-mm-dd')
				,const_ed_desc	= #{const_ed_desc}
		]]>
		</if>		
				,update_id		= #{input_id}
				,time_stamp		= now()
		WHERE 
				const_no 		= #{const_no} 
				and del_yn is false
   </update>
   <delete id="t_const_mem_del" parameterType="int">
   		DELETE FROM 
   				agwne.t_construct_mem 
   		WHERE const_no = #{const_no} 
   		      AND del_yn IS FALSE
   
   </delete>
   <update id="t_construct_stat_change" parameterType="bsVO">
   <![CDATA[
   		UPDATE agwne.t_reform 
   			
   			SET 
   	]]>
   	<if test ="status_cd != null or !status_cd.equal('')">
   	<![CDATA[
   			status_cd = #{status_cd}
   	]]>
   	</if>
   	<if test ="!request_yn">
   	<![CDATA[
   			, request_yn = FALSE
   	]]>
   	</if>	
   	<if test ="request_yn">
   	<![CDATA[
   			, request_yn = TRUE
   	]]>
   	</if>	
   	   	<if test ="address1 != null or !address1.equal('')">
   	<![CDATA[
   			, address1 = #{address1}
   	]]>
   	</if>		
   	   	<if test ="address2 != null or !address2.equal('') ">
   	<![CDATA[
   			, address2 = #{address2}
   	]]>
   	</if>			
   	<![CDATA[		
   		WHERE neoss_no=#{neoss_no} 
   	]]> 
   </update>
   <select id="t_const_view" parameterType="int" resultType="csVO">
		SELECT 
		     a.const_no
		    , a.neoss_no
		    , to_char(st_dt, 'yyyy-mm-dd') st_dt
		    , to_char(ed_dt, 'yyyy-mm-dd') ed_dt
		    , const_st_desc
		    , const_ed_desc
		    , a.input_id
		    , d.address1
		    , d.address2   
		FROM agwne.t_construct a
	        	 LEFT OUTER JOIN agwne.t_reform d on (a.neoss_no= d.neoss_no and d.del_yn = false)
        WHERE a.neoss_no = #{rstNo}
			  AND a.del_yn is false  
   </select>
   <update id="t_bs_del" parameterType="int">
   		UPDATE agwne.t_reform
   		SET del_yn = true
   		WHERE neoss_no = #{neoss_no}
   </update>
      <update id="t_bs_del_ps" parameterType="int">
   		UPDATE agwne.t_process
   		SET del_yn = TRUE
   		WHERE neoss_no = #{neoss_no}
   </update>
   
	<select id="selectFacilities" parameterType="hashmap" resultType="facilitiesVO">
	<![CDATA[
		select a.*, b.office_nm
		  from agwne.t_facilities a
			   LEFT OUTER JOIN agwne.t_bonbu_level b on(a.office_cd = b.office_no)
		 where managed_ip = #{managed_ip}
		   and colcode = #{colcode}
		 limit 1
	]]>
	</select>
	<select id="search_reg_name" resultType="UserInfoVO">
	<![CDATA[
		SELECT DISTINCT B.bonbu_name,  B.user_no , B.emp_name
		FROM agwne.t_reform A LEFT OUTER JOIN agwne.t_org_user B ON (A.input_id= B.no_emp)
		WHERE A.del_yn is false
	]]>
	</select>
	<select id="search_result_org" parameterType="map" resultType="orgVO">
	<![CDATA[
	SELECT 
			DB.orgname , count(*) depth
		 FROM agwne.t_reform A
		  	   LEFT OUTER JOIN agwne.t_confirm B ON (A.neoss_no = B.neoss_no AND B.agw_cd = '02' AND B.status_cd=(CASE A.status_cd WHEN '99' THEN '01' ELSE A.status_cd END) AND B.del_yn = false)
			   LEFT OUTER JOIN agwne.t_code C ON (A.supply_cd = C.code AND C.column_nm = 'supply_cd' AND C.agw_cd ='02' AND C.del_yn = false)
			   LEFT OUTER JOIN (
								SELECT orgscode
				                     , CAST(hierarchy[1] as varchar(64)) office_0
				   					 , CAST(hierarchy[2] as varchar(64)) office_1
							 		 , COALESCE(CAST(hierarchy[3] as varchar(64)), orgscode) office_2
				   				     , CAST((CASE WHEN hierarchy[4] = hierarchy[3] THEN null ELSE hierarchy[4] END) as varchar(64)) office_3 
				                  FROM agwne.t_bonbu_level		   
			   ) D ON (A.office_no = D.orgscode )
			   LEFT OUTER JOIN agwne.t_org_user E on (A.input_id = E.no_emp)
			   LEFT OUTER JOIN agwne.t_org_user F ON (B.user_no = F.user_no)
			   LEFT OUTER JOIN agwne.t_code H ON (H.code = CONCAT(A.status_cd, A.request_yn) AND H.agw_cd = '02' AND H.column_nm = 'status_cd')
			   LEFT OUTER JOIN agwne.t_bonbu_level DA ON (D.office_0 = DA.orgscode)
			   LEFT OUTER JOIN agwne.t_bonbu_level DB ON (D.office_1 = DB.orgscode)

		 where A.del_yn = false
	]]>
			<if test="date_format != null and !date_format.equals('')">
			<![CDATA[
				and to_char(A.input_dt, '${date_format}') >= '${st_date}' and  to_char(A.input_dt, '${date_format}') <= '${ed_date}' 
			]]>
			</if>
			<if test="office_0 != null and office_0 != '' and office_0 != 'title'"   >
			<![CDATA[
				and D.office_0 =#{office_0}
			]]>
			</if>			
			<if test="office_1 != null and office_1 != '' and office_1 != 'title'" >
			<![CDATA[
				and D.office_1 = #{office_1} 
			]]>
			</if>
			<if test="office_2 != null and office_2 != '' and office_2 != 'title'">
			<![CDATA[
				and D.office_2 = #{office_2} 
			]]>
			</if>
			<if test="office_3 != null and office_3 != '' and office_3 != 'title'">
			<![CDATA[
				and D.office_3 = #{office_3} 
			]]>
			</if>	
			<if test="supply_cd != null and !supply_cd.equals('')">
			<![CDATA[
				and A.supply_cd = '${supply_cd}' 
			]]>
			</if>	
			<if test="model_num > 0 ">
					<![CDATA[
						and A.model_num = ${model_num} 
					]]>
			</if>		
			<if test="status != null and !status.equals('')">
			<![CDATA[
				and H.code = '${status}' 
			]]>
			</if>
			<if test="device_cd != ''">
			<![CDATA[
				and A.device_cd = '${device_cd}'
			]]>
			</if>	
			<if test="user_no > 0 ">
			<![CDATA[
				and A.input_id = (select no_emp from agwne.t_org_user where user_no= ${user_no} )
			]]>
			</if>
	<![CDATA[		 
		group by DB.orgname
		ORDER BY depth desc
	]]>
	</select>

	<select id="reform_device_all" resultType="reformDeviceVO" parameterType="String">
	<![CDATA[
		select device_cd
			, device_nm
			, vendor_nm
			, device_info
			, device_gb
			, tdx_type
			, input_id
			, input_dt
		from agwne.t_barcode_device
		where tdx_type = #{tdx_type}
		order by vendor_nm, device_info, tdx_type
	]]>
	</select>
    <select id="reform_chk_device" resultType="int" parameterType="String">
	<![CDATA[
        select count(device_cd) from agwne.t_barcode where device_cd= #{device_cd} and use_yn ='N'
	]]>
	</select>

	<update id="reform_useyn_update" parameterType="reformVO">
		<![CDATA[
			update agwne.t_barcode set use_yn = 'R' , neoss_no=#{neoss_no}
			where barcode in
						(select barcode from agwne.t_barcode where device_cd=#{device_cd} order by barcode limit #{model_num})
		]]>

	</update>
	<update id="reform_useyn_refresh" parameterType="reformVO">
		<![CDATA[
			update agwne.t_barcode set use_yn = 'N' , neoss_no=null
			where barcode in
						(select barcode from agwne.t_barcode where device_cd=#{device_cd} and neoss_no = #{neoss_no})
		]]>

	</update>
</mapper>