<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.kt.agwne.businessMapper">
<resultMap id="period" type="HashMap">
	<result javaType = "int" column="b_01" property="b_01"/>
	<result javaType = "int" column="b_02" property="b_02"/>
</resultMap>
<resultMap id="const_mem" type="HashMap">
	<result javaType = "String" column="const_mem_no" property="const_mem_no"/>
	<result javaType = "String" column="mem_cd" property="mem_cd"/>
	<result javaType = "String" column="const_no" property="const_no"/>
	<result javaType = "String" column="member_id" property="member_id"/>
	<result javaType = "String" column="department" property="department"/>
	<result javaType = "String" column="member_nm" property="member_nm"/>			
</resultMap>
<resultMap id="modelInfo" type="HashMap">
	<result javaType = "int" column="id" property="id"/>
	<result javaType = "String" column="nm" property="nm"/>
	<result javaType = "String" column="ip" property="ip"/>
	<result javaType = "String" column="ktis_ip" property="ktis_ip"/>
	<result javaType = "String" column="in_dt" property="in_dt"/>
</resultMap>
	<!-- 2018-04-19 배수산
		광전화수요공급 코드들 가져오기 -->
	<select id="t_bs_code" parameterType="map" resultType="codeVO">
	 <![CDATA[
			SELECT 
				seq, code_gb , code_nm , code , column_nm
			FROM 
				agwne.t_code 
			WHERE 
				agw_cd='01'
				AND del_yn is FALSE 
			ORDER 
				by code_gb, seq	
	 ]]>
    </select>
    <select id="t_bs_code_pots" resultMap="modelInfo">
	 <![CDATA[
			SELECT id, nm, ip FROM agwne.t_pots ORDER BY id 
	 ]]>
    </select>
    <select id="t_bs_code_ipsec" resultMap="modelInfo">
	 <![CDATA[
			SELECT id, nm, ip FROM agwne.t_ipsec_info ORDER BY id 
	 ]]>
    </select>
    <select id="t_bs_code_emsIp" resultMap="modelInfo">
	 <![CDATA[
			SELECT id, ktis_ip  FROM agwne.t_agw_4p_gw_ems_info ORDER BY id 
	 ]]>
    </select>
    <!-- 장비정보 -->
    <select id="t_bs_model" parameterType="map" resultType="modelVO">
	 <![CDATA[
			SELECT B.cost_no, B.supply_nm, A.model_cd, B.type, B.line_num, A.agw_cd,
				   B.cost_supply, B.cost_construct, B.cost_etc, B.cost_total,
					(case when B.supply_nm != '' then '['||B.supply_nm||']' else '' end) ||B.model_cd||
					(case when B.type != '' then '('||B.type||')' else '' end) ||
					'/'||B.line_num 
					AS model_nick 
			FROM agwne.t_model A
			     inner join agwne.t_cost B ON (A.model_cd = B.model_cd and B.del_yn = false and B.agw_cd = '01')
			WHERE A.del_yn  is false
			  and A.agw_cd = '01'
			ORDER by A.seq asc
	 ]]>
    </select>
    <!-- 수요공급요청등록 -->
    <insert id="t_bs_reg" parameterType="bsVO" useGeneratedKeys="true" keyProperty="neoss_no" keyColumn="neoss_no">
	    <![CDATA[
	    	INSERT INTO agwne.t_neoss(
	    		business_cd,
				office_no,
				buildshape_cd,
				section_nm,
				post,
				address1,
				address2,
				share_cd,
				build_cd,
				distance_cd,
				household_no,
				supply_cd,
				model_no,
				model_num,
				move_dt,
				supply_dt,
				change_dt,
				decide_dt,
				reason_cd,
				reason,
				baud_num,
				status_cd,
				request_yn,
				del_yn,
				input_id,
				update_id,
				input_dt,
				time_stamp,
				expense1,
				expense2,
				expense3,
				tot_expense,
				docseq
				
	    	)values(
	    		 #{business_cd}
	    		, #{office_no}
	    		, #{buildshape_cd}
	    		, #{section_nm}
	    		, #{post}
	    		, #{address1}
	    		, #{address2}
	    		, #{share_cd}
	    		, #{build_cd}
	    		, #{distance_cd}
	    		, #{household_no}
	    		, #{supply_cd}
	    		, #{model_no}
	    		, #{model_num}
	    		, to_date(#{move_dt}, 'yyyy-mm-dd')
	    		, to_date(#{supply_dt}, 'yyyy-mm-dd')
	    		, to_date(#{change_dt}, 'yyyy-mm-dd')
	    		, to_date(#{decide_dt}, 'yyyy-mm-dd')
	    		, #{reason_cd}
	    		, #{reason}
	    		, #{baud_num}
	    		, #{status_cd}
	    		 ]]>
	    		<if test="!request_yn">
	    		, FALSE
	    		</if>
	    		<if test="request_yn">
	    		, TRUE
	    		</if>
	    	<![CDATA[
	    		, FALSE
	    		, #{input_id}
	    		, #{update_id}
	    		, now()
	    		, now()
	    		, #{expense1}
	    		, #{expense2}
	    		, #{expense3}
	    		, #{tot_expense}
	    		, (select coalesce(max(docseq), 0) +1
					 from agwne.t_neoss
				    where del_yn = false
				      and to_char(input_dt, 'yyyyMM') = to_char(now(), 'yyyyMM')
	    		  )
	    	)
	    	]]>
		<selectKey keyProperty="neoss_no" resultType="int" order="AFTER">
		 <![CDATA[
		   select CURRVAL('agwne.t_neoss_neoss_no_seq')
		  ]]>
		</selectKey>
    </insert>
    <update id="t_bs_reg_doc" parameterType="bsVO">
    <![CDATA[
		UPDATE agwne.t_neoss SET doc_no = (
			SELECT 'A'||'-'||to_char(a.input_dt, 'yyyymm')||'-'||doc.org_initial||'-'||lpad(a.docseq::varchar,5,'0') as doc_no
			FROM agwne.t_neoss a 
               LEFT OUTER JOIN agwne.t_bonbu_level b on a.office_no = b.orgscode 
			   LEFT OUTER JOIN agwne.t_org_naming doc on b.bonbu = doc.orgscode where a.neoss_no = #{neoss_no} ) 
	 		WHERE neoss_no=#{neoss_no}
	 ]]>
    </update>
    <update id="t_bs_modify" parameterType="bsVO">
     <![CDATA[
    	UPDATE agwne.t_neoss SET 
		    		business_cd 	= #{business_cd} ,
					office_no 		= #{office_no},
					buildshape_cd 	= #{buildshape_cd},
					section_nm 		= #{section_nm},
					post 			= #{post},
					address1 		= #{address1} ,
					address2		= #{address2} ,
					share_cd		= #{share_cd} ,
					build_cd		= #{build_cd} ,
					distance_cd		= #{distance_cd} ,
					household_no	= #{household_no} ,
					supply_cd		= #{supply_cd} ,
					model_no		= #{model_no} ,
					model_num		= #{model_num} ,
					move_dt			= to_date(#{move_dt}, 'yyyy-mm-dd'),
					supply_dt		= to_date(#{supply_dt}, 'yyyy-mm-dd'),
					change_dt		= to_date(#{change_dt}, 'yyyy-mm-dd'),
					decide_dt		= to_date(#{decide_dt}, 'yyyy-mm-dd'),
					reason_cd		= #{reason_cd} ,
					reason			= #{reason} ,
					baud_num		= #{baud_num} ,
					status_cd		= #{status_cd} ,
		]]>
					<if test="!request_yn">
		    		request_yn		= FALSE,
		    		</if>
		    		<if test="request_yn">
		    		request_yn		= TRUE,
	    			</if>
	    			<if test="!del_yn">
		    		del_yn			= FALSE,
		    		</if>
		    		<if test="del_yn">
		    		del_yn			= TRUE,
	    			</if>
					<![CDATA[
					update_id		= #{update_id}
					, time_stamp		= now()
					, expense1 		= #{expense1}
					, expense2 		= #{expense2}
					, expense3 		= #{expense3}
					, tot_expense	= #{tot_expense}
			WHERE 		
					neoss_no = #{neoss_no}		
					]]>
	    	
    </update>
    
        <!-- 수요공급요청등록 -->
    <insert id="t_bs_reg_history" parameterType="bsVO" useGeneratedKeys="true" keyProperty="history_no" keyColumn="history_no">
      <![CDATA[
      INSERT INTO agwne.t_neoss_history (
                neoss_no,
                business_cd,
				office_no,
				buildshape_cd,
				section_nm,
				post,
				address1,
				address2,
				share_cd,
				build_cd,
				distance_cd,
				household_no,
				supply_cd,
				model_no,
				model_num,`
				move_dt,
				supply_dt,
				change_dt,
				decide_dt,
				reason_cd,
				reason,
				baud_num,
				status_cd,
				request_yn,
				del_yn,
				input_id,
				update_id,
				input_dt,
				time_stamp) SELECT   
				                neoss_no,
				                business_cd,
								office_no,
								buildshape_cd,
								section_nm,
								post,
								address1,
								address2,
								share_cd,
								build_cd,
								distance_cd,
								household_no,
								supply_cd,
								model_no,
								model_num,
								move_dt,
								supply_dt,
								change_dt,
								decide_dt,
								reason_cd,
								reason,
								baud_num,
								status_cd,
								request_yn,
								del_yn,
								input_id,
								update_id,
								input_dt,
								time_stamp 
							FROM agwne.t_neoss WHERE neoss_no = ${neoss_no}
      ]]>
      	<selectKey keyProperty="history_no" resultType="int" order="AFTER">
		 <![CDATA[
		   select CURRVAL('agwne.t_neoss_history_history_no_seq')
		  ]]>
		</selectKey>
    </insert>

    <select id="t_bs_list" parameterType="map" resultType="bsVO">
	<![CDATA[
		SELECT ROW_NUMBER()OVER(ORDER BY A.neoss_no ASC) as rnum
		     , A.neoss_no
			 , A.status_cd
			 , A.request_yn
			 , D.office_0 as search_bonbu
			 , office_no
			 , D.office_1
			 , D.office_2
			 , D.office_3
			 , O1.orgname as office_nm
			 , O2.orgname as branch_nm			 
			 , C.code_nm as buildshape_nm
			 , A.buildshape_cd
			 , A.section_nm
			 , A.household_no
			 , A.input_id
			 , E.emp_name
			 , E.ex_agency_nm
			 , F.emp_name nextConfirmUsr
			 , F.ex_agency_nm nextConfirmOrg
			 , to_char(a.input_dt,'yyyy-mm-dd') input_dt
			 , A.input_dt search_dt
			 , A.doc_no
			 , H.code_nm as status
		  FROM agwne.t_neoss A
		  	   LEFT OUTER JOIN agwne.t_confirm B ON (A.neoss_no = B.neoss_no AND B.agw_cd = '01' AND B.status_cd=(CASE A.status_cd WHEN '99' THEN '01' ELSE A.status_cd END) AND B.del_yn = false)
			   LEFT OUTER JOIN agwne.t_code C ON (A.buildshape_cd =C.code AND C.column_nm = 'buildshape_cd' AND C.agw_cd ='01' AND C.del_yn = false)
			   LEFT OUTER JOIN (
								SELECT orgscode
				                     , CAST(hierarchy[1] as varchar(64)) office_0
				   					 , CAST(hierarchy[2] as varchar(64)) office_1
							 		 , COALESCE(CAST(hierarchy[3] as varchar(64)), orgscode) office_2
				   				     , CAST((CASE WHEN hierarchy[4] = hierarchy[3] THEN null ELSE hierarchy[4] END) as varchar(64)) office_3 
				                  FROM agwne.t_bonbu_level		   
			   ) D ON (A.office_no = D.orgscode )
			   LEFT OUTER JOIN agwne.t_bonbu_level O1 on (D.office_0 = O1.orgscode)
			   LEFT OUTER JOIN agwne.t_bonbu_level O2 on (D.office_1 = O2.orgscode)
			   LEFT OUTER JOIN agwne.t_code H ON (H.code = CONCAT(A.status_cd, A.request_yn) AND H.agw_cd = '01' AND H.column_nm = 'status_cd')
			   LEFT OUTER JOIN agwne.t_org_user E on (A.input_id = E.no_emp)
			   LEFT OUTER JOIN agwne.t_org_user F ON (B.user_no = F.user_no)
		 where A.del_yn = false
		   and A.agw_cd = '01'
	]]>	
			<if test="myOrgCheck.equals('on')"  > 
			<![CDATA[
				AND D.office_0 in ( select bonbu from agwne.t_org_mapping where region =(select region from agwne.t_org_mapping where bonbu =#{user_bonbu}   and use_yn='Y' )  and use_yn='Y')
			]]>
			</if>
			<if test="date_format != null and !date_format.equals('')">
			<![CDATA[
				and to_char(A.input_dt, '${date_format}') >= '${st_date}' and  to_char(A.input_dt, '${date_format}') <= '${ed_date}' 
			]]>
			</if>
			<if test="office_0 != null and office_0 != ''  and office_0 !='title'"   >
			<![CDATA[
				and D.office_0 =#{office_0}
			]]>
			</if>			
			<if test="office_1 != null and office_1 != '' and office_1 !='title'" >
			<![CDATA[
				and D.office_1 = #{office_1} 
			]]>
			</if>
			<if test="office_2 != null and office_2 != '' and office_2 !='title'">
			<![CDATA[
				and D.office_2 = #{office_2} 
			]]>
			</if>
			<if test="office_3 != null and office_3 != '' and office_3!='title'">
			<![CDATA[
				and D.office_3 = #{office_3} 
			]]>
			</if>	
			<if test="buildshape_cd != null and !buildshape_cd.equals('')">
			<![CDATA[
				and A.buildshape_cd = '${buildshape_cd}' 
			]]>
			</if>	
			<if test="searchTxt != null and !searchTxt.equals('')">
				<if test="searchType != null and !searchType.equals('')">
					<![CDATA[
						and ${searchType} like '%${searchTxt}%' 
					]]>
				</if>
			</if>		
			<if test="status != null and !status.equals('')">
			<![CDATA[
				and H.code = '${status}' 
			]]>
			</if>						
	<![CDATA[	
			ORDER BY A.neoss_no desc
			LIMIT ${recordsPerPage} OFFSET ${startRecord}
	]]>	
    </select>
    
    <!-- 수요공급요청엑셀 -->
    <select id="t_bs_list_excel" parameterType="map" resultType="agwExcelVO">
    <![CDATA[
      SELECT 
		      	a.neoss_no, doc_no, office_no, address1, post, build_nm, buildshape_nm, section_nm,
		  		model_nm, household_no, share_nm, model_num, supply_cd, reason_nm, reason, expense1, expense2, expense3, tot_expense,
				move_dt, supply_dt,  a.input_id, phone_number, emp_name, input_dt, a.status_cd,  a.request_yn, office_nm, branch_nm, branch_nm2, branch_nm3, status,
				p1.contents contents_01 ,p2.contents contents_02,p3.contents contents_03,p4.contents contents_04, 
				p5.contents contents_05 ,p6.contents contents_06 ,p99.contents contents_99
  		FROM (

  						SELECT 
									a.neoss_no,
									a.doc_no ,
					   				a.office_no,		   				
									address1||' '||address2 AS address1,
									post,
									c3.code_nm as build_nm,
									c1.code_nm as buildshape_nm,
									section_nm, 
									(case when D.supply_nm != '' then '['||D.supply_nm||']' else '' end) ||D.model_cd||
									(case when D.type != '' then '('||D.type||')' else '' end) ||
									'/'||D.line_num AS model_nm ,
									household_no, 
									c2.code_nm as share_nm,
									model_num,
									supply_cd,
									c4.code_nm as reason_nm,
									reason,	
									a.expense1,
									a.expense2,
									a.expense3,
									a.tot_expense,
									CONCAT(move_dt,' (',EXTRACT(year from move_dt),'년 ',EXTRACT(quarter from move_dt),'분기)') as move_dt,
									CONCAT(supply_dt,' (',EXTRACT(year from supply_dt),'년 ',EXTRACT(quarter from supply_dt),'분기)') as supply_dt,
					   				e.emp_name as input_id,
									e.phone_number ,
									f.emp_name,
									TO_CHAR(a.input_dt,'yyyy-mm-dd')  as input_dt,
									a.status_cd,
									a.request_yn,
									DA.orgname as office_nm,
									DB.orgname as branch_nm,
									DC.orgname as branch_nm2,
									DD.orgname as branch_nm3,									 
									H.code_nm as status
								FROM
									agwne.t_neoss a 
					   				 LEFT OUTER JOIN (
										SELECT orgscode
											 , CAST(hierarchy[1] as varchar(64)) office_0
											 , CAST(hierarchy[2] as varchar(64)) office_1
											 , COALESCE(CAST(hierarchy[3] as varchar(64)), orgscode) office_2
											 , CAST((CASE WHEN hierarchy[4] = hierarchy[3] THEN null ELSE hierarchy[4] END) as varchar(64)) office_3 
										  FROM agwne.t_bonbu_level	
									 ) b on a.office_no = b.orgscode 
									LEFT OUTER JOIN agwne.t_bonbu_level DA ON (b.office_0 = DA.orgscode)
									LEFT OUTER JOIN agwne.t_bonbu_level DB ON (b.office_1 = DB.orgscode)
									LEFT OUTER JOIN agwne.t_bonbu_level DC ON (b.office_2 = DC.orgscode)
									LEFT OUTER JOIN agwne.t_bonbu_level DD ON (b.office_3 = DD.orgscode)
									LEFT OUTER JOIN agwne.t_code c1 ON (a.buildshape_cd = c1.code and c1.column_nm = 'buildshape_cd' and c1.del_yn is FALSE and c1.agw_cd='01')
									LEFT OUTER JOIN agwne.t_code c2 ON (a.share_cd= c2.code and c2.column_nm='share_cd' and c2.del_yn is FALSE and c2.agw_cd='01')
									LEFT OUTER JOIN agwne.t_code c3 ON (a.build_cd = c3.code and c3.column_nm='build_cd' and c3.del_yn is FALSE and c3.agw_cd='01')
									LEFT OUTER JOIN agwne.t_code c4 ON (a.reason_cd = c4.code and c4.column_nm='reason_cd' and c4.del_yn is FALSE and c4.agw_cd='01')
									LEFT OUTER JOIN agwne.t_cost D ON (a.model_no = D.cost_no and D.del_yn is FALSE and D.agw_cd = '01')
									LEFT OUTER JOIN agwne.t_org_user E ON a.input_id = E.no_emp
									LEFT OUTER JOIN agwne.t_confirm f1 ON (A.neoss_no = f1.neoss_no AND f1.agw_cd = '01' AND f1.status_cd=(CASE A.status_cd WHEN '99' THEN '01' ELSE A.status_cd END) AND f1.del_yn = false)
								    LEFT OUTER JOIN agwne.t_org_user F ON (f1.user_no = F.user_no)
								    LEFT OUTER JOIN agwne.t_code H ON (H.code = CONCAT(A.status_cd, A.request_yn) AND H.agw_cd = '01' AND H.column_nm = 'status_cd')						
					WHERE
						a.del_yn is FALSE
						and a.agw_cd = '01'
					]]>	
			<if test="myOrgCheck.equals('on')"  > 
			<![CDATA[
				AND b.office_0 in ( select bonbu from agwne.t_org_mapping where region =(select region from agwne.t_org_mapping where bonbu =#{user_bonbu}   and use_yn='Y')  and use_yn='Y')
			]]>
			</if>
			<if test="date_format != null and !date_format.equals('')">
			<![CDATA[
				and to_char(A.input_dt, '${date_format}') >= '${st_date}' and  to_char(A.input_dt, '${date_format}') <= '${ed_date}' 
			]]>
			</if>
			<if test="office_0 != null and office_0 != ''  and office_0 !='title'"   >
			<![CDATA[
				and b.office_0 =#{office_0}
			]]>
			</if>			
			<if test="office_1 != null and office_1 != '' and office_1 !='title'" >
			<![CDATA[
				and b.office_1 = #{office_1} 
			]]>
			</if>
			<if test="office_2 != null and office_2 != '' and office_2 !='title'">
			<![CDATA[
				and b.office_2 = #{office_2} 
			]]>
			</if>
			<if test="office_3 != null and office_3 != '' and office_3!='title'">
			<![CDATA[
				and b.office_3 = #{office_3} 
			]]>
			</if>	
			<if test="buildshape_cd != null and !buildshape_cd.equals('')">
			<![CDATA[
				and A.buildshape_cd = '${buildshape_cd}' 
			]]>
			</if>	
			<if test="searchTxt != null and !searchTxt.equals('')">
				<if test="searchType != null and !searchType.equals('')">
					<![CDATA[
						and ${searchType} like '%${searchTxt}%' 
					]]>
				</if>
			</if>		
			<if test="status != null and !status.equals('')">
			<![CDATA[
				and H.code = '${status}' 
			]]>
			</if>					
	<![CDATA[	
			) a 
				LEFT OUTER JOIN (select process_no, neoss_no, status_cd, contents from agwne.t_process a where process_no = (select max(process_no) from agwne.t_process where neoss_no = a.neoss_no and status_cd = '01' and del_yn is false and current_yn is true)) p1 on a.neoss_no=p1.neoss_no
				LEFT OUTER JOIN (select process_no, neoss_no, status_cd, contents from agwne.t_process a where process_no = (select max(process_no) from agwne.t_process where neoss_no = a.neoss_no and status_cd = '02' and del_yn is false and current_yn is true)) p2 on a.neoss_no=p2.neoss_no
				LEFT OUTER JOIN (select process_no, neoss_no, status_cd, contents from agwne.t_process a where process_no = (select max(process_no) from agwne.t_process where neoss_no = a.neoss_no and status_cd = '03' and del_yn is false and current_yn is true)) p3 on a.neoss_no=p3.neoss_no
				LEFT OUTER JOIN (select process_no, neoss_no, status_cd, contents from agwne.t_process a where process_no = (select max(process_no) from agwne.t_process where neoss_no = a.neoss_no and status_cd = '04' and del_yn is false and current_yn is true)) p4 on a.neoss_no=p4.neoss_no
				LEFT OUTER JOIN (select process_no, neoss_no, status_cd, contents from agwne.t_process a where process_no = (select max(process_no) from agwne.t_process where neoss_no = a.neoss_no and status_cd = '05' and del_yn is false and current_yn is true)) p5 on a.neoss_no=p5.neoss_no
				LEFT OUTER JOIN (select process_no, neoss_no, status_cd, contents from agwne.t_process a where process_no = (select max(process_no) from agwne.t_process where neoss_no = a.neoss_no and status_cd = '06' and del_yn is false and current_yn is true)) p6 on a.neoss_no=p6.neoss_no
				LEFT OUTER JOIN (select process_no, neoss_no, status_cd, contents from agwne.t_process a where process_no = (select max(process_no) from agwne.t_process where neoss_no = a.neoss_no and status_cd = '99' and del_yn is false and current_yn is true)) p99 on a.neoss_no=p99.neoss_no

			ORDER BY A.neoss_no desc
	]]>
    </select>
    
    <select id="t_bs_listCnt" parameterType="map" resultType="int">

					 <![CDATA[
     SELECT 
					count(*) as totalRecordCount
		  FROM agwne.t_neoss A
		  	   LEFT OUTER JOIN agwne.t_confirm B ON (A.neoss_no = B.neoss_no AND B.agw_cd = '01' AND B.status_cd=(CASE A.status_cd WHEN '99' THEN '01' ELSE A.status_cd END) AND B.del_yn = false)
			   LEFT OUTER JOIN (SELECT orgscode
				                     , CAST(hierarchy[1] as varchar(64)) office_0
				   					 , CAST(hierarchy[2] as varchar(64)) office_1
							 		 , COALESCE(CAST(hierarchy[3] as varchar(64)), orgscode) office_2
				   				     , CAST((CASE WHEN hierarchy[4] = hierarchy[3] THEN null ELSE hierarchy[4] END) as varchar(64)) office_3 
				                  FROM agwne.t_bonbu_level		   
			   ) D ON (A.office_no = D.orgscode )
			   LEFT OUTER JOIN agwne.t_org_user E on (A.input_id = E.no_emp)
			   LEFT OUTER JOIN agwne.t_org_user F ON (B.user_no = F.user_no)
			   LEFT OUTER JOIN agwne.t_code H ON (H.code = CONCAT(A.status_cd, A.request_yn) AND H.agw_cd = '01' AND H.column_nm = 'status_cd')
			WHERE 
					A.del_yn is FALSE
					and A.agw_cd = '01'
							
			]]>	
			<if test="myOrgCheck.equals('on')"  > 
			<![CDATA[
				AND D.office_0 in ( select bonbu from agwne.t_org_mapping where region =(select region from agwne.t_org_mapping where bonbu =#{user_bonbu}   and use_yn='Y')  and use_yn='Y')
			]]>
			</if>
			<if test="date_format != null and !date_format.equals('')">
			<![CDATA[
				and to_char(A.input_dt, '${date_format}') >= '${st_date}' and  to_char(A.input_dt, '${date_format}') <= '${ed_date}' 
			]]>
			</if>
			<if test="office_0 != null and office_0 != '' and office_0 !='title'"   >
			<![CDATA[
				and D.office_0 =#{office_0}
			]]>
			</if>			
			<if test="office_1 != null and office_1 != '' and office_1 !='title'" >
			<![CDATA[
				and D.office_1 = #{office_1} 
			]]>
			</if>
			<if test="office_2 != null and office_2 != '' and office_2 !='title'">
			<![CDATA[
				and D.office_2 = #{office_2} 
			]]>
			</if>
			<if test="office_3 != null and office_3 != '' and office_3 !='title'">
			<![CDATA[
				and D.office_3 = #{office_3} 
			]]>
			</if>	
			<if test="buildshape_cd != null and !buildshape_cd.equals('')">
			<![CDATA[
				and A.buildshape_cd = '${buildshape_cd}' 
			]]>
			</if>	
			<if test="searchTxt != null and !searchTxt.equals('')">
				<if test="searchType != null and !searchType.equals('')">
					<![CDATA[
						and ${searchType} like '%${searchTxt}%' 
					]]>
				</if>
			</if>		
			<if test="status != null and !status.equals('')">
			<![CDATA[
				and H.code = '${status}' 
			]]>
			</if>						
    
    </select>
    
    <!-- 수요공급요청 상세보기 -->
 	<select id ="t_bs_list_view" parameterType="int" resultType="bsVO">
		<![CDATA[ 
				SELECT 
							neoss_no, 
							business_cd, 
							office_no,
							office_nm,
							orgname org_name,
							post,
							address1,
							address2,
							(case when h.supply_nm != '' then '['||h.supply_nm||']' else '' end) ||h.model_cd||
							(case when h.type != '' then '('||h.type||')' else '' end) ||
							'/'||h.line_num AS model_nm ,
							c.code_nm as buildshape_nm,
							d.code_nm as share_nm,
							e.code_nm as build_nm,
							g.code_nm as reason_nm,
							a.buildshape_cd,
							a.share_cd,
							a.build_cd,
							a.distance_cd,
							a.reason_cd,
							reason,
							section_nm, 
							household_no, 
							a.model_no,
							model_num ,
							supply_cd,
							move_dt,
							supply_dt,
							change_dt,
							decide_dt,		
							TO_CHAR(a.input_dt,'yyyy-mm-dd')  as input_dt, 
							(select emp_name from agwne.t_org_user where no_emp=a.input_id) emp_name, 
							a.input_id,
							status_cd, 
							request_yn,
							a.expense1,
							a.expense2,
							a.expense3,
							a.tot_expense,
							a.doc_no ,
							a.prev_status
						FROM
							agwne.t_neoss a 
							LEFT OUTER JOIN agwne.t_code c ON (a.buildshape_cd = c.code and c.column_nm = 'buildshape_cd' and c.del_yn is FALSE and c.agw_cd='01')
							LEFT OUTER JOIN agwne.t_code d ON (a.share_cd= d.code and d.column_nm='share_cd' and d.del_yn is FALSE and d.agw_cd='01')
							LEFT OUTER JOIN agwne.t_code e ON (a.build_cd = e.code and e.column_nm='build_cd' and e.del_yn is FALSE and e.agw_cd='01')
							LEFT OUTER JOIN agwne.t_code g ON (a.reason_cd = g.code and g.column_nm='reason_cd' and g.del_yn is FALSE and g.agw_cd='01')
							LEFT JOIN agwne.t_cost h ON (a.model_no = h.cost_no and h.del_yn is FALSE and h.agw_cd = '01')		
                            LEFT OUTER JOIN agwne.t_bonbu_level b on(a.office_no = b.orgscode)
						
						WHERE
							a.del_yn is FALSE
							and a.agw_cd = '01'
							and neoss_no =#{rstNo}
		
		]]>
 	</select>
    
        
    <!-- 수요공급요청이력 리스트 -->
 	<select id ="t_bs_list_view_hist" parameterType="int" resultType="bsVO">
		<![CDATA[ 
						SELECT 
							row_number()over(order by history_no asc ) as rnum,
							history_no,
							neoss_no, 
							to_char(a.action_dt,'yyyy-mm-dd HH:mi') time_stamp,
							usr.emp_name as update_id,
							usr.office_nm,
							usr.phone_number
			FROM
							agwne.t_neoss_history a 
							LEFT OUTER JOIN agwne.t_org_user usr on (a.action_id = usr.no_emp)	
			WHERE
							a.del_yn is FALSE
							and a.agw_cd = '01'
							and neoss_no =#{rstNo}
							
			ORDER BY		a.history_no DESC
		]]>
 	</select>

 	<!-- 수요공급요청이력 리스트 -->
 	<select id ="t_bs_list_view_hist3" parameterType="java.util.HashMap" resultType="java.util.HashMap">
 	<![CDATA[
				 SELECT a.history_no, a.neoss_no, 
				        b3.orgname office_nm_present, 
				        b1.orgname branch_nm_present, 
				        b4.orgname office_nm_history, 
				        b2.orgname branch_nm_history,
				        a.post_present,
				        a.post_history,
				        a.address1_present,
				        a.address1_history,
				        a.address2_present,
				        a.address2_history,
				        a.reason_present,
				        a.reason_history,
				        a.section_nm_present,
				        a.section_nm_history,
				        a.household_no_present,
				        a.household_no_history,
				        a.model_num_present,
				        a.model_num_history,
				        (case when a.move_dt_present is null then null else CONCAT(a.move_dt_present,' (',EXTRACT(year from a.move_dt_present),'년 ',EXTRACT(quarter from a.move_dt_present),'분기)') end) as move_dt_present,
				        (case when a.move_dt_history is null then null else CONCAT(a.move_dt_history,' (',EXTRACT(year from a.move_dt_history),'년 ',EXTRACT(quarter from a.move_dt_history),'분기)') end) as move_dt_history,
				        (case when a.supply_dt_present is null then null else CONCAT(a.supply_dt_present,' (',EXTRACT(year from a.supply_dt_present),'년 ',EXTRACT(quarter from a.supply_dt_present),'분기)') end) as supply_dt_present,
				        (case when a.supply_dt_history is null then null else CONCAT(a.supply_dt_history,' (',EXTRACT(year from a.supply_dt_history),'년 ',EXTRACT(quarter from a.supply_dt_history),'분기)') end) as supply_dt_history,
				        (case when g1.supply_nm != '' then '['||g1.supply_nm||']' else '' end) ||g1.model_cd||
						(case when g1.type != '' then '('||g1.type||')' else '' end) ||
						'/'||g1.line_num AS model_nm_present, 
				        (case when g2.supply_nm != '' then '['||g2.supply_nm||']' else '' end) ||g2.model_cd||
						(case when g2.type != '' then '('||g2.type||')' else '' end) ||
						'/'||g2.line_num AS model_nm_history,
				        c1.code_nm as buildshape_nm_present,
				        c2.code_nm as buildshape_nm_history,
				        d1.code_nm as share_nm_present,
				        d2.code_nm as share_nm_history,
				        e1.code_nm as build_nm_present,
				        e2.code_nm as build_nm_history,
				        f1.code_nm as reason_nm_present,
				        f2.code_nm as reason_nm_history,
						a.expense1_history,
						a.expense1_present,
						a.expense2_history,
						a.expense2_present,
						a.expense3_history,
						a.expense3_present,
						a.tot_expense_history,
						a.tot_expense_present
				 FROM (

						    SELECT
						            a.history_no,
						            a.neoss_no,
						            b.supply_dt as supply_dt_present , a.supply_dt supply_dt_history,
						            b.move_dt as move_dt_present , a.move_dt move_dt_history,
						            b.reason as reason_present ,  a.reason  reason_history,
						            b.section_nm as section_nm_present ,  a.section_nm  section_nm_history,
						            b.household_no as household_no_present ,  a.household_no   household_no_history,
						            b.business_cd as business_cd_present ,  a.business_cd   business_cd_history,
						            b.model_num as model_num_present ,  a.model_num   model_num_history,
						            b.office_no as office_no_present ,  a.office_no   office_no_history,
						            b.post as post_present ,  a.post  post_history,
						            b.address1 as address1_present ,  a.address1   address1_history,
						            b.address2 as address2_present ,  a.address2   address2_history,
						            b.model_no as model_no_present ,  a.model_no   model_no_history,
						            b.supply_cd as supply_cd_present ,  a.supply_cd  supply_cd_history,
						            b.buildshape_cd as buildshape_cd_present ,  a.buildshape_cd  buildshape_cd_history,
						            b.share_cd as share_cd_present ,  a.share_cd  share_cd_history,
						            b.build_cd as build_cd_present , a.build_cd  build_cd_history,
						            b.reason_cd as reason_cd_present , a.reason_cd  reason_cd_history,
									b.expense1 as expense1_present , a.expense1 expense1_history,
									b.expense2 as expense2_present ,  a.expense2 expense2_history,
									b.expense3 as expense3_present , a.expense3  expense3_history,
									b.tot_expense as tot_expense_present ,  a.tot_expense  tot_expense_history
						    FROM 
						        agwne.t_neoss_history a left outer join agwne.t_neoss b on a.neoss_no=b.neoss_no
						    WHERE 
						        a.neoss_no=#{neoss_no}   and a.history_no=#{history_no}  and a.del_yn IS FALSE and a.agw_cd = '01'
						    ) a 
	                           	LEFT OUTER JOIN agwne.t_bonbu_level b1 ON (a.office_no_present = b1.orgscode) 
	                            LEFT OUTER JOIN agwne.t_bonbu_level b2 on (a.office_no_history = b2.orgscode)
	                            LEFT OUTER JOIN agwne.t_bonbu_level b3 ON (b1.bonbu = b3.orgscode)
	                            LEFT OUTER JOIN agwne.t_bonbu_level b4 ON (b2.bonbu = b4.orgscode)
	                            LEFT OUTER JOIN agwne.t_code c1 ON (a.buildshape_cd_present = c1.code and c1.column_nm = 'buildshape_cd' and c1.del_yn is FALSE and c1.agw_cd='01')
	                            LEFT OUTER JOIN agwne.t_code c2 ON (a.buildshape_cd_history = c2.code and c2.column_nm = 'buildshape_cd' and c2.del_yn is FALSE and c2.agw_cd='01')
	                            LEFT OUTER JOIN agwne.t_code d1 ON (a.share_cd_present = d1.code and d1.column_nm='share_cd' and d1.del_yn is FALSE and d1.agw_cd='01')
	                            LEFT OUTER JOIN agwne.t_code d2 ON (a.share_cd_history = d2.code and d2.column_nm='share_cd' and d2.del_yn is FALSE and d2.agw_cd='01')
								LEFT OUTER JOIN agwne.t_code e1 ON (a.build_cd_present = e1.code and e1.column_nm='build_cd' and e1.del_yn is FALSE and e1.agw_cd='01')
	                            LEFT OUTER JOIN agwne.t_code e2 ON (a.build_cd_history = e2.code and e2.column_nm='build_cd' and e2.del_yn is FALSE and e2.agw_cd='01')
	                            LEFT OUTER JOIN agwne.t_code f1 ON (a.reason_cd_present = f1.code and f1.column_nm='reason_cd' and f1.del_yn is FALSE and f1.agw_cd='01')
	                            LEFT OUTER JOIN agwne.t_code f2 ON (a.reason_cd_history = f2.code and f2.column_nm='reason_cd' and f2.del_yn is FALSE and f2.agw_cd='01')
	                            LEFT outer JOIN agwne.t_cost g1 ON (a.model_no_present = g1.cost_no and g1.del_yn is FALSE and g1.agw_cd = '01')
	                            LEFT outer JOIN agwne.t_cost g2 ON (a.model_no_history = g2.cost_no and g2.del_yn is FALSE and g2.agw_cd = '01')	

									
 	]]>
 	</select>
 	
 	
 	
    <select id="request_prev_no" parameterType="int" resultType="int">
    <![CDATA[
		select    neoss_no as prev_no
		  from    agwne.t_neoss
		 where    1=1
		          and del_yn is FALSE
		          and agw_cd = '01'
		           and status_cd != '00'
		          and neoss_no < #{rstNo}
		 order by neoss_no desc
		 limit    1
    ]]>
    </select>
    
    <select id="request_next_no" parameterType="int" resultType="int">
    <![CDATA[
		select    neoss_no as prev_no
		  from    agwne.t_neoss
		 where    1=1
		          and del_yn is FALSE
		          and agw_cd = '01'
		          and status_cd != '00'
		          and neoss_no > #{rstNo}
		 order by neoss_no desc
		 limit    1
    ]]>
    </select>
    
    <update id="t_bs_list_update" parameterType="bsVO" >
    
    	UPDATE agwne.t_neoss SET
    		status_cd = #{status_cd}
    		<if test="status_cd == '01'">
    		, decide_dt = now()
    		</if>
    		<if test="!request_yn">
	    	, request_yn = FALSE
	    	</if>
	    	<if test="request_yn">
	    	, request_yn = TRUE
	    	</if>
	    	<if test="prev_status != null || prev_status != ''">
	    	, prev_status = #{prev_status}
	    	</if>
    	WHERE neoss_no = #{neoss_no}	
    	
    
    </update>
    
    
   <select id="request_period_chk" resultMap="period">
     <![CDATA[
		select SUM(CASE WHEN A.business_cd = '01' THEN 1 ELSE 0 END) as b_01
		     , SUM(CASE WHEN A.business_cd = '02' THEN 1 ELSE 0 END) as b_02
		  from (
				select A.period_no
		             , A.business_cd
					 , CAST(CONCAT(EXTRACT(YEAR from now()) + A.start_year, '-', A.start_dt) as DATE) as start_date
					 , CAST(CONCAT(EXTRACT(YEAR from now()) + A.end_year, '-', A.end_dt) as DATE) as end_date
					 , (CASE WHEN B.user_id IS NULL THEN 0 ELSE 1 END) exception
				  from agwne.t_period A
				       LEFT OUTER JOIN agwne.t_period_exception B ON (    B.del_yn = false 
																  AND A.agw_cd = B.agw_cd 
														          AND A.business_cd = (CASE B.business_cd WHEN '00' THEN A.business_cd
																					   ELSE B.business_cd END)
														  		  AND B.user_id = #{user_id})
				 where A.del_yn = false
				   AND A.notify_yn = true
				   AND A.agw_cd = 'B'
				 order by A.business_cd, A.quarter
				) A
		where 1=1 
		  and (   (current_date >= A.start_date and current_date <= A.end_date)
	   		   OR A.exception = 1)
	]]>
   </select>
   
   <insert id="t_construct_reg" parameterType="csVO" useGeneratedKeys="true" keyProperty="const_no" keyColumn="const_no">
   		<![CDATA[
   			INSERT INTO agwne.t_construct(
   			  	]]>  
			  <if test="const_no >0">
			  <![CDATA[
			    const_no,
			    ]]>
			  </if>
			  <![CDATA[
			    neoss_no
			    ]]>
			<if test="st_dt  != '' ">
			  <![CDATA[
			    , st_dt
			    ]]>  
		 	</if> 
		 	  <![CDATA[   
			    , ed_dt
			    , const_st_desc
			    , const_ed_desc
			    , input_id
			    , input_dt
			    , update_id
			    , time_stamp
			)VALUES(
				]]>  
			  <if test="const_no >0">
			  <![CDATA[
			    #{const_no},
			    ]]>
			  </if>
			  <![CDATA[
			    #{neoss_no}
			  ]]>  
			  <if test="st_dt  != ''">
			  <![CDATA[
			    ,to_date(#{st_dt},'yyyy-mm-dd')
			    ]]>
			  </if>
			 <![CDATA[
			    ,to_date(#{ed_dt},'yyyy-mm-dd')
			    ,#{const_st_desc}
			    ,#{const_ed_desc}
			    ,#{input_id}
			    ,now()
			    ,#{input_id}
			    ,now()
			) ON CONFLICT(const_no) DO UPDATE SET 
				 neoss_no				= #{neoss_no}
				  ]]>  
			  <if test="st_dt  != ''">
			  <![CDATA[
			   , st_dt					= to_date(#{st_dt},'yyyy-mm-dd')
			    ]]>
			  </if>
			  <if test="ed_dt  != ''">
			 <![CDATA[
			    , ed_dt					= to_date(#{ed_dt},'yyyy-mm-dd')
			    ]]>
			    </if>
			    <![CDATA[
			    , const_st_desc		= #{const_st_desc}
			    , const_ed_desc		= #{const_ed_desc}
			    , update_id			= #{input_id}
				, time_stamp 		= now()
   				]]>
   		<selectKey keyProperty="const_no" resultType="int" order="AFTER">
   		 <if test="const_no == 0">
		 <![CDATA[
		   select CURRVAL('agwne.t_construct_const_no_seq')
		  ]]>
		  </if>
		   <if test="const_no >0">
		   	<![CDATA[
		  	select const_no from agwne.t_construct where const_no= #{const_no} and del_yn is false
		  	]]>
		   </if>
		</selectKey>
   </insert>
     <insert id="t_construct_mem_reg" parameterType="java.util.HashMap">
     <if test = "list.size > 0 ">
   		<![CDATA[
   			INSERT INTO agwne.t_construct_mem(
			    const_no
			    , mem_cd
			    , user_no
			    , input_id
			    , input_dt
			    , update_id
			    , time_stamp
			)VALUES
			]]>
			<foreach collection="list" item="item" separator=",">
			<![CDATA[
			(
			    #{const_no}
			    ,#{item.mem_cd}
			    ,#{item.user_no}
			    ,#{item.input_id}
			    ,now()
			    ,#{item.input_id}
			    ,now()
			)
			]]>
			</foreach> 
		</if>
   </insert>
     <insert id="t_bs_reg_confirm" parameterType="java.util.HashMap">
         <if test = "list.size > 0 ">
   		<![CDATA[
   			INSERT INTO agwne.t_confirm (
                     neoss_no
                    ,agw_cd
                    ,status_cd
                    ,user_no
                    ,input_id
                    ,update_id
                    ,input_dt
                    ,time_stamp
			)VALUES
			]]>
			<foreach collection="list" item="item" separator=",">
			<![CDATA[
			(
			   		#{item.neoss_no}
                    ,#{item.agw_cd}
                    ,#{item.status_cd}
                    ,#{item.user_no}
                    ,#{item.input_id}
                    ,#{item.input_id}
                    ,now()
                    ,now()
			)
			]]>
			</foreach> 
			</if>
   </insert>
   <insert id="t_const_mem_modi" parameterType="java.util.HashMap">
   		<![CDATA[
   		   INSERT INTO agwne.t_construct_mem(
   		   ]]>
   		   <if test="const_mem_no > 0">
   		   <![CDATA[
   		   			const_mem_no,
   		   ]]>
   		   </if>
   		   <![CDATA[
				    const_no
				    , mem_cd
				    , user_no
				    , input_id
				    , input_dt
				    , update_id
				    , time_stamp
			)VALUES(
		   ]]>
   		   <if test="const_mem_no > 0">
   		   <![CDATA[
   		   			#{const_mem_no},
   		   ]]>
   		   </if>
   		   <![CDATA[
				    #{const_no}
				    ,#{mem_cd}
				    ,#{user_no}
				    ,#{input_id}
				    ,now()
				    ,#{input_id}
				    ,now()
			)ON CONFLICT(const_mem_no) DO UPDATE SET 
			 		const_mem_no		= #{const_mem_no}
			 		, const_no				= #{const_no}
				    , mem_cd				= #{mem_cd}
				    , user_no				= #{user_no}
				    , update_id			= #{input_id}
				    , time_stamp			= now()
			]]>
   </insert>
   <update id="t_bs_modi_confirm" parameterType="java.util.HashMap" >
    <if test = "list.size > 0 ">
      <foreach collection="list" item="item" separator=";">
   		UPDATE agwne.t_confirm 
			SET  user_no = #{item.user_no}
				,update_id	= #{item.update_id}
				,time_stamp	= now()
		WHERE 
				agw_cd='01'
				AND neoss_no= #{item.neoss_no}
				AND status_cd = #{item.status_cd}
				AND del_yn is false
	  </foreach>		
	</if>
   </update>
   <update id="t_const_modi" parameterType="csVO">
  <![CDATA[
   		UPDATE agwne.t_construct
			SET neoss_no		= #{neoss_no}
	]]>		
		<if test = "st_dt != null || st_dt != ''" >
		 <![CDATA[
				,st_dt			= to_date(#{st_dt}, 'yyyy-mm-dd')
				,const_st_desc	= #{const_st_desc}
		]]>
		</if>		
		<if test = "ed_dt != null || ed_dt != ''" >
		 <![CDATA[
				,ed_dt			= to_date(#{ed_dt}, 'yyyy-mm-dd')
				,const_ed_desc	= #{const_ed_desc}
		]]>
		</if>		
				,update_id		= #{input_id}
				,time_stamp		= now()
		WHERE 
				const_no 		= #{const_no} 
				and del_yn is false
   </update>
   <update id="t_const_modi_expense" parameterType ="csVO">
		   UPDATE agwne.t_neoss SET 
		           expense1 		= ${expense1}
		           , expense2 	= ${expense2} 
		           , expense3 	= ${expense3} 
		           , tot_expense 	= ${tot_expense}
				WHERE 	neoss_no	= ${neoss_no}
   </update>
   <delete id="t_const_mem_del" parameterType="int">
   		DELETE FROM 
   				agwne.t_construct_mem 
   		WHERE const_no = #{const_no} 
   		      AND del_yn IS FALSE
   
   </delete>
   <delete id="t_confirm_mem_del" parameterType="int">
   		DELETE FROM 
   				agwne.t_confirm  
   		WHERE neoss_no = #{neoss_no} 
   			  AND agw_cd = '01'
   		      AND del_yn IS FALSE
   
   </delete>
   <update id="t_construct_stat_change" parameterType="java.util.HashMap">
   		UPDATE agwne.t_neoss 
   			
   			SET 
   				status_cd = #{status_cd}
   				, request_yn = #{request_yn}
   			
   		WHERE neoss_no=#{neoss_no}  
   </update>
   <select id="t_const_view" parameterType="int" resultType="csVO">
		SELECT 
		     a.const_no
		    , a.neoss_no
		    , to_char(st_dt, 'yyyy-mm-dd') st_dt
		    , to_char(ed_dt, 'yyyy-mm-dd') ed_dt
		    , const_st_desc
		    , const_ed_desc
            , d.expense1
            , d.expense2
            , d.expense3
            , d.tot_expense
		    , a.input_id   
		FROM agwne.t_construct a
	        	 LEFT OUTER JOIN agwne.t_neoss d on (a.neoss_no= d.neoss_no and d.del_yn = false and d.agw_cd = '01')
        WHERE a.neoss_no = #{rstNo}
			  AND a.del_yn is false   
   </select>
   <select id="t_const_mem_view" parameterType="int" resultType="csmemVO">
		SELECT const_mem_no, const_no, mem_cd, mb.user_no, emp_name, ex_agency_nm, dept_name, ex_biz_company_nm, phone_number
		FROM (select const_mem_no, const_no, mem_cd, user_no , del_yn  from agwne.t_construct_mem where const_no = (select const_no from agwne.t_construct where neoss_no=#{rstNo}) and del_yn is false) mb 
		      , agwne.t_org_user usr 
		WHERE mb.user_no = usr.user_no
		AND	mb.del_yn is false
		order by mem_cd 
   </select>
   <update id="t_bs_del" parameterType="hashmap">
   		UPDATE agwne.t_neoss
   		SET del_yn = true
   		  , update_id = #{update_id}
   		  , time_stamp = now()
   		WHERE neoss_no = #{neoss_no}
   </update>
      <update id="t_bs_del_ps" parameterType="int">
   		UPDATE agwne.t_process
   		SET del_yn = TRUE
   		WHERE neoss_no = #{neoss_no}
   </update>
</mapper>