/**
 * agw-ne
 *
 * Copyright ⓒ 2018 kt corp. All rights reserved.
 *
 * This is a proprietary software of kt corp, and you may not use this file except in
 * compliance with license agreement with kt corp. Any redistribution or use of this
 * software, with or without modification shall be strictly prohibited without prior written
 * approval of kt corp, and the copyright notice above does not evidence any actual or
 * intended publication of such software.
 * 
 * @ author kt
 * @ since 2018-04-15
 * @ file UserInfoController.java
 * @ version 1.0
 * @ see
 * @ Copyright ⓒ 2018 By kt corp. All rights reserved.
 */

package kr.co.kt.agwne.web;

import java.util.List;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.co.kt.agwne.dto.OrgList;
import kr.co.kt.agwne.dto.OrgVO;
import kr.co.kt.agwne.dto.UserInfoList;
import kr.co.kt.agwne.dto.UserInfoVO;
import kr.co.kt.agwne.service.UserInfoService;
import kr.co.kt.agwne.service.UserRoleService;
import kr.co.kt.agwne.validate.UserInfoValidation;
import kr.co.kt.common.ParamValidatChk;

@Controller
@RequestMapping("/userInfo")
public class UserInfoController extends ParamValidatChk {

    private static final Logger logger = LoggerFactory.getLogger(UserInfoController.class);

    @Autowired
    private UserInfoService userInfoService;
    
    @Autowired
    private UserRoleService userRoleService;
    
    @Autowired
    private UserInfoValidation userInfoValidation;
    
    @InitBinder
    protected void initBinder(WebDataBinder binder) {
    	binder.addValidators(userInfoValidation);
    }
    
    @RequestMapping("/userInfo_write.do")
    public String userInfo_write(Model model, 
    		@Validated @ModelAttribute UserInfoVO userInfoVO, BindingResult bindingResult,
    		HttpServletResponse response, HttpSession session) throws Exception {
    	logger.info("userInfo_write["+userInfoVO.getCrud().toUpperCase()+"]["+userInfoVO.toString()+"]"+userInfoVO.getNo_emp());
    	int cnt = 0;
    	String searchType = userInfoVO.getSearchType();
    	String searchTxt = userInfoVO.getSearchTxt();
    	//등록
    	if("c".equals(userInfoVO.getCrud())) {
    		if(bindingResult.hasErrors()) {
    			List<ObjectError> list = bindingResult.getAllErrors();
    			for(ObjectError err : list) {
    				logger.info("col:"+err.getCode()+", message:"+err.getDefaultMessage());
    			}
    			model.addAttribute("message", "필수 항목을 입력하세요.");
    			userInfoVO.setCrud("n");
    		}
    		else {
    			userInfoVO.setNo_emp(userInfoVO.getNo_emp_a());
    			UserInfoVO vo = userInfoService.userInfo_one(userInfoVO);
		    	if(vo == null) {
		    		cnt = userInfoService.userInfo_reg(userInfoVO);
		    		logger.info("insert count: "+cnt);
		    		if(cnt > 0) {
		    			userInfoVO.setCrud("r");
		    	    	model.addAttribute("message", "성공");
		    		}
		    	}
		    	else {
		    		model.addAttribute("message", "이미 등록된 계정 입니다.");
		    		userInfoVO.setCrud("n");
		    	}
    		}
    	}
    	//조회
    	else if("r".equals(userInfoVO.getCrud())) {
    		userInfoVO = userInfoService.userInfo_one(userInfoVO);
    		userInfoVO.setCrud("r");
    	}
    	//수정
    	else if("u".equals(userInfoVO.getCrud())) {
    		if(bindingResult.hasErrors()) {
    			List<ObjectError> list = bindingResult.getAllErrors();
    			for(ObjectError err : list) {
    				logger.info("col:"+err.getCode()+", message:"+err.getDefaultMessage());
    			}
    			model.addAttribute("message", "필수 항목을 입력하세요.");
    		}
    		else {
    			if(userInfoVO.getRole().equals("02")) {
    				UserInfoVO vo = new UserInfoVO();
    				vo.setNo_emp(userInfoVO.getNo_emp());
    				vo.setUser_id(session.getAttribute("user_id").toString());
    				userInfoService.insertTmInfo(vo);
    			}
    			userInfoVO.setUser_id(session.getAttribute("user_id").toString());
	    		cnt = userInfoService.userInfo_update(userInfoVO);
	    		logger.info("update count: "+ cnt);
	    		if(cnt > 0) {
	    			userInfoVO.setCrud("r");
	    	    	model.addAttribute("message", "성공");
	    		}
    		}
    	}
    	//삭제
    	else if("d".equals(userInfoVO.getCrud())) {
    		if(bindingResult.hasErrors()) {
    			List<ObjectError> list = bindingResult.getAllErrors();
    			for(ObjectError err : list) {
    				logger.info("col:"+err.getCode()+", message:"+err.getDefaultMessage());
    			}
    			model.addAttribute("message", "필수 항목을 입력하세요.");
    		}
    		else {
	    		cnt = userInfoService.userInfo_deleteOne(userInfoVO);
	    		logger.info("delete count:"+ cnt);
	    		if(cnt > 0) {
	    			//userInfoVO.setCrud("r");
	    			//model.addAttribute("message", "성공");
	    			//model.addAttribute("userInfoVO", userInfoVO);
	    			return "redirect:/userInfo/userInfo_list.do";
	    		}
    		}
    	}
    	userInfoVO.setSearchType(searchType);
    	userInfoVO.setSearchTxt(searchTxt);
    	logger.info("view:::"+userInfoVO.toString());
    	model.addAttribute("userInfoVO", userInfoVO);
    	logger.info("userInfoVO(/userInfo/write):"+userInfoVO.toString());
    	return "/userInfo/write";
    }

    @RequestMapping("/del_list.do")
    public String board_del_list(@ModelAttribute UserInfoList userInfoList, Model model	) throws Exception {
    	for(UserInfoVO userInfoVO : userInfoList.getList()) {
    		logger.info("del_list["+userInfoVO.toString()+"]");
    		if("1".equals(userInfoVO.getDel())) {
    			userInfoService.userInfo_deleteOne(userInfoVO);
    		}
    	}
    	logger.info("#####del_list.do: ");
    	return "redirect:/userInfo/userInfo_list.do";
    }
    
    @RequestMapping(value = "/userInfo_list.do")
    public String userInfo_list(Model model, RedirectAttributes attributes, @ModelAttribute UserInfoVO userInfoVO
            /*@RequestParam(value = "currentPage", required = false, defaultValue = "1") String currentPage,
            @RequestParam(value = "searchType", required = false, defaultValue = "") String searchType,
            @RequestParam(value = "searchTxt", required = false, defaultValue = "") String searchTxt*/
            ) throws Exception {
    	logger.info("userInfo_list[userInfoVO:"+userInfoVO.toString()+"]");
    	String currentPage = String.valueOf(userInfoVO.getCurrentPage());
    	String searchType = userInfoVO.getSearchType();
    	String searchTxt = userInfoVO.getSearchTxt();
    	if(searchTxt != null) {
    		userInfoVO.setSearchTxt(Pattern.compile("[',%,?]*").matcher(searchTxt).replaceAll(""));
    	}
        int currentPageNo = 1;
        if (isNull(currentPage) || isEmpty(currentPage)) {
            currentPage = "1";
        } else {
            if (!isNumeric(currentPage)) {
                currentPage = "1";
            } else {
                try {
                    currentPageNo = Integer.parseInt(currentPage);
                } catch (Exception e) {
                    currentPageNo = 1;
                }
            }
        }
        if (isNull(searchTxt) || isEmpty(searchTxt)) {
            searchType = "";
            searchTxt = "";
        } else {
            if (isNull(searchType) || isEmpty(searchType)) {
                searchType = "";
                searchTxt = "";
            } else {
                if (searchType.equals("no_emp") || searchType.equals("emp_name")) {

                }
            }
        }

        int recordsPerPage = 10;
        int startRecord = (currentPageNo - 1) * recordsPerPage;
        /*
        UserInfoVO userInfoVT = new UserInfoVO();
        userInfoVT.setStartRecord(startRecord);
        userInfoVT.setRecordsPerPage(recordsPerPage);
        userInfoVT.setSearchType(searchType);
        userInfoVT.setSearchTxt(searchTxt);
        */
        userInfoVO.setStartRecord(startRecord);
        userInfoVO.setRecordsPerPage(recordsPerPage);
        UserInfoList list = new UserInfoList();
        list.setList(userInfoService.userInfo_list(userInfoVO));
        model.addAttribute("userInfoList", list);        
        model.addAttribute("currentPage", currentPage);
        model.addAttribute("totalRecordCount", userInfoService.userInfo_totalCnt(userInfoVO));
        model.addAttribute("recordsPerPage", recordsPerPage);
        model.addAttribute("searchType", searchType);
        model.addAttribute("searchTxt", searchTxt);
        
        /////////////////////////////////////////////////////////
        //userInfoService.listOrgDept("369889"); //강북운용단:369889        
        //logger.info(userInfoService.listOrgDeptString("369889").toString());
        //userInfoService.orgDepth("369792"); //통화서비스품질팀:369792        
        /////////////////////////////////////////////////////////
        
        return "/userInfo/list";
    }
    
    @RequestMapping("/popup_org.do")
    public String popup_userAppr(Model model,RedirectAttributes attributes, @ModelAttribute UserInfoVO userInfoVO
    		,@RequestParam(value = "bonbu", required = false, defaultValue = "") String bonbu
            /*@RequestParam(value = "currentPage", required = false, defaultValue = "1") String currentPage,
            @RequestParam(value = "bonbu", required = false, defaultValue = "369937") String bonbu,
            @RequestParam(value = "dept_code", required = false, defaultValue = "") String dept_code,
            @RequestParam(value = "searchType", required = false, defaultValue = "") String searchType,
            @RequestParam(value = "searchTxt", required = false, defaultValue = "") String searchTxt*/
            ) throws Exception {
    	logger.info("popup_org[userInfoVO:"+userInfoVO.toString()+"][bonbu:"+bonbu+"]");
    	String currentPage = String.valueOf(userInfoVO.getCurrentPage());
    	String searchType = userInfoVO.getSearchType();
    	String searchTxt = userInfoVO.getSearchTxt();
    	if("".equals(bonbu) || userInfoVO.getBonbu() == null) {
    		userInfoVO.setBonbu("369937");
    	}
    	else if(!"".equals(bonbu)) {
    		userInfoVO.setBonbu(bonbu);
    	}
    	int currentPageNo = 1;
        if (isNull(currentPage) || isEmpty(currentPage)) {
            currentPage = "1";
        } else {
            if (!isNumeric(currentPage)) {
                currentPage = "1";
            } else {
                try {
                    currentPageNo = Integer.parseInt(currentPage);
                } catch (Exception e) {
                    currentPageNo = 1;
                }
            }
        }
        if (isNull(searchTxt) || isEmpty(searchTxt)) {
            searchType = "";
            searchTxt = "";
        } else {
            if (isNull(searchType) || isEmpty(searchType)) {
                searchType = "";
                searchTxt = "";
            } else {
                /*if (searchType.equals("office_cd")) {

                }*/
            }
        }

        int recordsPerPage = 10;
        int startRecord = (currentPageNo - 1) * recordsPerPage;
        
        OrgVO orgVO = new OrgVO();
        orgVO.setStartRecord(startRecord);
        orgVO.setRecordsPerPage(recordsPerPage);
        orgVO.setBonbu(userInfoVO.getBonbu());
        orgVO.setOrgscode(userInfoVO.getDept_code());
        orgVO.setSearchType(searchType);
        orgVO.setSearchTxt(searchTxt);
        OrgList list = new OrgList();
        list.setList(userRoleService.org_list(orgVO));
       
        //model.addAttribute("orgcode", orgcode);
        //model.addAttribute("org_name", org_name);
        model.addAttribute("approvalList", list);
        model.addAttribute("crud", "crud");
        model.addAttribute("currentPage", currentPage);
        model.addAttribute("totalRecordCount", userRoleService.org_totalCnt(orgVO));
        model.addAttribute("recordsPerPage", recordsPerPage);
        model.addAttribute("searchType", searchType);
        model.addAttribute("searchTxt", searchTxt);
        model.addAttribute("bonbu", userInfoVO.getBonbu());
        //logger.info("#org_name:"+org_name);
       return "/userInfo/popup_org";
    }

}
