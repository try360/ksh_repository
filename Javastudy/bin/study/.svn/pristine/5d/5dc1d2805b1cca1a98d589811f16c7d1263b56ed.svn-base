package kr.co.kt.agwne.service.impl;

import java.util.HashMap;
import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Service;

import kr.co.kt.agwne.dao.ProcessDAO;
import kr.co.kt.agwne.dto.ConstructVO;
import kr.co.kt.agwne.dto.ModelInfoVO;
import kr.co.kt.agwne.dto.ProcessVO;
import kr.co.kt.agwne.service.ProcessService;
/**
 * agw-ne
 *
 * Copyright ¨Ï 2018 kt corp. All rights reserved.
 *
 * This is a proprietary software of kt corp, and you may not use this file except in
 * compliance with license agreement with kt corp. Any redistribution or use of this
 * software, with or without modification shall be strictly prohibited without prior written
 * approval of kt corp, and the copyright notice above does not evidence any actual or
 * intended publication of such software.
 * 
 * @ author kt
 * @ since 2010-11-22
 * @ file UserApprValidation.java
 * @ version 1.0
 * @ see
 * @ Copyright ¨Ï 2018 By kt corp. All rights reserved.
 */
@Service
public class ProcessServiceImpl implements ProcessService {

	@Inject
	private ProcessDAO psDAO;
	
	@Override
	public int process_reg(ProcessVO psVO) throws Exception{
		return psDAO.process_reg(psVO);
	}

	@Override
	public ProcessVO process_info_ajax(int process_no) throws Exception {
		return psDAO.process_info_ajax(process_no);
	}

	@Override
	public List<ProcessVO> process_list(int neoss_no) throws Exception {
		return psDAO.process_list(neoss_no);
	}
	
	@Override
	public Object process_modelInfo_reg(ModelInfoVO mdVO) throws Exception{
		return psDAO.process_modelInfo_reg(mdVO);
	}

	@Override
	public ModelInfoVO process_modelInfo_view(HashMap<String, Object> info) throws Exception {
		return psDAO.process_modelInfo_view(info);
	}

	@Override
	public HashMap<String, Object> process_contents(int neoss_no) throws Exception {
		return psDAO.process_contents(neoss_no);
	}
	@Override
	public HashMap<String, Object> process_contents_01(int neoss_no) throws Exception {
		return psDAO.process_contents_01(neoss_no);
	}
	@Override
	public int process_modi(ProcessVO psVO) throws Exception {
		return psDAO.process_modi(psVO);
	}

	@Override
	public Object selectMacSearching(HashMap<String, Object> macMap) {
		return psDAO.selectMacSearching(macMap);
	}

	@Override
	public Object selectExMailing(String orgscode) {
		return psDAO.selectExMailing(orgscode);
	}

	@Override
	public Object selectCurrent(int neoss_no) {
		return psDAO.selectCurrent(neoss_no);
	}

	@Override
	public String selectEponSearching(String agw_mac) {
		return psDAO.selectEponSearching(agw_mac);
	}

	@Override
	public int selectCntManagedip(String managed_ip) {
		return psDAO.selectCntManagedip(managed_ip);
	}

	@Override
	public void updateProcess_back(ProcessVO psVO) {
		psDAO.updateProcess_back(psVO);
	}

	@Override
	public void delete_construct(ConstructVO csVO) {
		psDAO.delete_construct_mem(csVO);
		psDAO.delete_construct(csVO);
	}

	@Override
	public int selectCntMegacoip(String megaco_ip) {
		return psDAO.selectCntMegacoip(megaco_ip);
	}
}
