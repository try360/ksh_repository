/**
 * agw-ne
 *
 * Copyright 使 2018 kt corp. All rights reserved.
 *
 * This is a proprietary software of kt corp, and you may not use this file except in
 * compliance with license agreement with kt corp. Any redistribution or use of this
 * software, with or without modification shall be strictly prohibited without prior written
 * approval of kt corp, and the copyright notice above does not evidence any actual or
 * intended publication of such software.
 * 
 * @ author kt
 * @ since 2018-04-15
 * @ file IncludeController.java
 * @ version 1.0
 * @ see
 * @ Copyright 使 2018 By kt corp. All rights reserved.
 */

package kr.co.kt.agwne.web;
import java.util.HashMap;
import java.util.List;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 * agw-ne
 *
 * Copyright 使 2018 kt corp. All rights reserved.
 *
 * This is a proprietary software of kt corp, and you may not use this file except in
 * compliance with license agreement with kt corp. Any redistribution or use of this
 * software, with or without modification shall be strictly prohibited without prior written
 * approval of kt corp, and the copyright notice above does not evidence any actual or
 * intended publication of such software.
 * 
 * @ author kt
 * @ since 2010-11-22
 * @ file UserApprService.java
 * @ version 1.0
 * @ see
 * @ Copyright 使 2018 By kt corp. All rights reserved.
 */
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.co.kt.agwne.dto.OrgUserExMailVO;
import kr.co.kt.agwne.service.IncludeSearchService;

@Controller
@RequestMapping("/include")
public class IncludeController {
		private static final Logger logger = LoggerFactory.getLogger(IncludeController.class);
	 @Inject
	 IncludeSearchService includeService;
	 
	@RequestMapping("/usrSearch")
	public String usrSearch(Model model) {
		return "/include/pop_usrSearch";
	}
	
	@GetMapping("/usr_exSearch")
	public String usr_exSearch(Model model) {
		return "/include/usr_exSearch";
	}
	
	@RequestMapping(value="/usrSearchSelectAjax" ,method = RequestMethod.POST)
    public @ResponseBody List<HashMap<String,Object>> subOffice(
    		  @RequestParam(value="emp_name", required=false, defaultValue = "") String emp_name) throws Exception{
   
    	HashMap<String, Object> info = new HashMap<String, Object>();
    	info.put("emp_name", emp_name);
    	List<HashMap<String, Object>> list = includeService.userSearchSelect(info);
    	logger.info(list.toString());
    	return list;
    	
    }
	
	@SuppressWarnings("unchecked")
	@PostMapping("usrExSearchAjax")
	public @ResponseBody List<OrgUserExMailVO> selectExMailingSearching(
			  @RequestParam(value="emp_name", required=true) String emp_name) {
		HashMap<String, Object> info = new HashMap<String, Object>();
    	info.put("emp_name", emp_name);
		List<OrgUserExMailVO> list = (List<OrgUserExMailVO>) includeService.selectExMailingSearching(info);
		
		return list;
	}
	
	@GetMapping("refresh")
	public String refresh() {
		return "/include/refresh";
	}
	
	@GetMapping("ieNotice")
	public String ieNotice() {
		return "/include/pop_notice";
	}
	
	@GetMapping("ieNotice2")
	public String ieNotice2() {
		return "/include/pop_notice2";
	}
}
