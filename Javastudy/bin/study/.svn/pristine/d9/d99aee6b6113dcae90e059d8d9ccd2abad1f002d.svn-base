package kr.co.kt.agwne.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import kr.co.kt.agwne.dao.UserInfoDAO;
import kr.co.kt.agwne.dao.UserRoleDAO;
import kr.co.kt.agwne.dto.OrgVO;
import kr.co.kt.agwne.dto.UserInfoVO;
import kr.co.kt.agwne.dto.UserRoleVO;
import kr.co.kt.agwne.service.UserInfoService;

/**
 * agw-ne
 *
 * Copyright ⓒ 2018 kt corp. All rights reserved.
 *
 * This is a proprietary software of kt corp, and you may not use this file except in
 * compliance with license agreement with kt corp. Any redistribution or use of this
 * software, with or without modification shall be strictly prohibited without prior written
 * approval of kt corp, and the copyright notice above does not evidence any actual or
 * intended publication of such software.
 * 
 * @ author kt
 * @ since 2010-11-22
 * @ file LoginServiceImpl.java
 * @ version 1.0
 * @ see
 * @ Copyright ⓒ 2018 By kt corp. All rights reserved.
 */
@Service
public class UserInfoServiceImpl implements UserInfoService {

	@Autowired
    private UserInfoDAO userInfoDao; 
	
	@Autowired
    private UserRoleDAO userRoleDao; 
	
	private static final Logger logger = LoggerFactory.getLogger(UserInfoServiceImpl.class);
	@Override
	public int userInfo_totalCnt(UserInfoVO userInfoVO) throws Exception{
		return userInfoDao.userInfo_totalCnt(userInfoVO);
	}
	
	@Override
	public List<UserInfoVO> userInfo_list(UserInfoVO userInfoVO) throws Exception {
		return userInfoDao.userInfo_list(userInfoVO);
	}

	@Override
	public UserInfoVO userInfo_one(UserInfoVO userInfoVO) {
		UserInfoVO vo = userInfoDao.userInfo_one(userInfoVO);
		if(vo != null) {
			vo.setNo_emp_a(vo.getNo_emp().substring(0, 1)+"********");
		}
		return vo;
	}

	@Override
	public UserInfoVO login_one(UserInfoVO userInfoVO){
		return userInfoDao.login_one(userInfoVO);
	}
	
	@Override
	@Transactional
	public int userInfo_reg(UserInfoVO userInfoVO) throws Exception{
		if(!"".equals(userInfoVO.getRole())){
			UserRoleVO userRoleVO = new UserRoleVO();
			userRoleVO.setUser_id(userInfoVO.getNo_emp());
			userRoleVO.setRole(userInfoVO.getRole());
			//userRoleVO.setErp_job("01");
			logger.info("#userRole_reg:"+userRoleVO.toString());
			userRoleDao.userRole_reg(userRoleVO);
			/*userRoleVO.setErp_job("02");
			logger.info("#userRole_reg:"+userRoleVO.toString());
			userRoleDao.userRole_reg(userRoleVO);
			userRoleVO.setErp_job("03");
			logger.info("#userRole_reg:"+userRoleVO.toString());
			userRoleDao.userRole_reg(userRoleVO);*/
		}		
		return userInfoDao.userInfo_reg(userInfoVO);
	}
	
	@Override
	@Transactional
	public int userInfo_update(UserInfoVO userInfoVO) throws Exception{
		//ROLE 수정
		if(!"".equals(userInfoVO.getRole())){
			UserRoleVO userRoleVO = new UserRoleVO();
			userRoleVO.setUser_id(userInfoVO.getNo_emp());
			userRoleVO.setRole(userInfoVO.getRole());
			userRoleVO.setUpt_id(userInfoVO.getUser_id());
			List<UserRoleVO> list = userRoleDao.userRoleInfo(userRoleVO);
			if(list.size() > 0){// role 정보 확인
				logger.info("#UPDATE# "+userRoleVO.toString());
				userRoleDao.userRole_updateOne(userRoleVO);//agwne.t_user_role
			}
			else {
				logger.info("#INSERT# "+userRoleVO.toString());
				//userRoleVO.setOrgcodes("");
				//userRoleVO.setOrgnames("");
				//userRoleVO.setErp_job("01");
				userRoleDao.userRole_reg(userRoleVO);//agwne.t_user_role
				//userRoleVO.setErp_job("02");
				//userRoleDao.userRole_reg(userRoleVO);
				//userRoleVO.setErp_job("03");
				//userRoleDao.userRole_reg(userRoleVO);
			}
		}
		//사용자 수정
		if(userInfoVO.getStaff() == 3) {//1:KT, 2:업체, 3:ADMIN
				logger.info("# 직원정보 수정: "+userInfoVO.toString());
				userInfoDao.userInfo_update(userInfoVO);//agwne.t_user_info
		}
		return 1;
	}

	@Override
	@Transactional
	public int userInfo_deleteOne(UserInfoVO userInfoVO) throws Exception{
		//ROLE 정보 삭제
		UserRoleVO userRoleVO = new UserRoleVO();
		userRoleVO.setUser_id(userInfoVO.getNo_emp());
		List<UserRoleVO> list = userRoleDao.userRoleInfo(userRoleVO);
		if(list.size() > 0){
			userRoleDao.userRole_dels(userRoleVO);
		}
		//사용자 정보 삭제
		return userInfoDao.userInfo_deleteOne(userInfoVO);
	}

	public List<OrgVO> _listOrgDept(String orgcode, int depth, List<OrgVO> OrgList) throws Exception{
		depth++;
		List<OrgVO> list = userInfoDao.listOrgDept(orgcode);
		for(OrgVO vo : list) {
			logger.info(depth+"# Orgscode: "+vo.getOrgscode()+" > "+vo.getPorgscode());
			vo.setDepth(depth);
			OrgList.add(vo);
			_listOrgDept(vo.getOrgscode(), depth, OrgList);
		}
		return OrgList;
	}
	
	public OrgVO setOrgDept(OrgVO orgVO) throws Exception{
		orgVO.setList(userInfoDao.listOrgDept(orgVO.getOrgscode()));
		int depth = orgVO.getDepth()+1;
		for(int i=0; i < orgVO.getList().size(); i++) {
			//logger.info(orgVO.getDepth()+"# Orgscode: "+vo.getOrgscode()+" > "+vo.getPorgscode());
			OrgVO vo = orgVO.getList().get(i);
			vo.setDepth(depth);
			vo.setPath((orgVO.getPath() == null)?vo.getOrgname():orgVO.getPath()+"/"+vo.getOrgname());
			setOrgDept(vo);
		}
		return orgVO;
	}
	
	public void getOrgDeptList(OrgVO orgVO, List<OrgVO> list, Map<String, OrgVO> map) throws Exception{
		for(int i=0; i < orgVO.getList().size(); i++) {
			OrgVO vo = orgVO.getList().get(i);
			//logger.info(vo.getDepth()+"# Orgscode: "+vo.getOrgscode()+":"+vo.getPath()+" > "+vo.getPorgscode());
			list.add(vo);
			map.put(vo.getOrgscode(), vo);
			getOrgDeptList(vo, list, map);
		}
	}
	
	@Override
	public OrgVO listOrgDept(String orgcode) throws Exception{
		OrgVO orgVO = new OrgVO();
		orgVO.setOrgscode(orgcode);
		orgVO.setDepth(0);
		setOrgDept(orgVO);
		//print list
		List<OrgVO> list = new ArrayList<OrgVO>();
		Map<String, OrgVO> map = new HashMap<String, OrgVO>();
		getOrgDeptList(orgVO, list, map);
		for(OrgVO vo : list) {
			logger.info("=======>"+vo.getDepth()+" "+vo.getPath());
		}
		logger.info("<369921>"+map.get("369921").getPath());//test
		return orgVO;
		/*
		List<OrgVO> orgList = _listOrgDept(orgcode, 0, new ArrayList<OrgVO>());
		logger.info("#["+orgcode+"]###############################");
        for(OrgVO vo : orgList) {
        	logger.info(vo.getDepth()+"."+vo.getOrgscode()+" "+vo.getPath());
        }        
        logger.info("#############################################");
        return orgList;
        */
	}
	
	@Override
	public StringBuffer listOrgDeptString(String orgcode) throws Exception{
		StringBuffer sb = new StringBuffer();
		List<OrgVO> list = new ArrayList<OrgVO>();
		Map<String, OrgVO> map = new HashMap<String, OrgVO>();
		getOrgDeptList(listOrgDept(orgcode), list, map);
		for(int i=0; i<list.size(); i++) {
			if(i == 0) {
				sb.append("'").append(list.get(i).getOrgscode()).append("'");
			}
			else {
				sb.append(",'").append(list.get(i).getOrgscode()).append("'");
			}
		}		
		return sb;
	}
	
	public List<OrgVO> _orgDepth(String orgcode, int depth, List<OrgVO> OrgList) throws Exception{
		OrgVO vo = userInfoDao.orgDepth(orgcode);
		if(vo.getPorgscode() != null && !"000001".equals(vo.getPorgscode())) { //(주)KT
			logger.info(depth+"# Orgscode: "+vo.getOrgscode()+" > "+vo.getPorgscode());
			vo.setDepth(depth++);
			OrgList.add(vo);
			_orgDepth(vo.getPorgscode(), depth, OrgList);
		}
		return OrgList;
	}
	
	@Override
	public List<OrgVO> orgDepth(String orgcode) throws Exception{
		List<OrgVO> orgList = _orgDepth(orgcode, 0, new ArrayList<OrgVO>());		
		logger.info("#["+orgcode+"]###############################");
        for(OrgVO vo : orgList) {
        	logger.info(vo.getDepth()+"."+vo.getPorgscode());
        }        
        logger.info("#############################################");
        return orgList;
	}
	
	@Override
	public StringBuffer orgDepthString(String orgcode) throws Exception{
		StringBuffer sb = new StringBuffer();
		List<OrgVO> list = orgDepth(orgcode);
		for(int i=0; i<list.size(); i++) {
			if(i == 0) {
				sb.append("'").append(list.get(i).getOrgscode()).append("'");
			}
			else {
				sb.append(",'").append(list.get(i).getOrgscode()).append("'");
			}
		}		
		return sb;
	}
	
	@Override
	public void loginHist(UserInfoVO userInfoVO) throws Exception{
		userInfoDao.loginHist(userInfoVO);
	}
	
	@Override
	public void logoutHist(UserInfoVO userInfoVO) throws Exception{
		userInfoDao.logoutHist(userInfoVO);
	}

	@Override
	public int select_error_cnt(String loginID) {
		return userInfoDao.select_error_cnt(loginID);
	}

	@Override
	public void updatePwdErrorCnt(String loginID) {
		userInfoDao.updatePwdErrorCnt(loginID);
	}

	@Override
	public void updatePwdErrorCntReset(String loginID) {
		userInfoDao.updatePwdErrorCntReset(loginID);
	}

	@Override
	public void updateTmPw(UserInfoVO userInfoVO) throws Exception {
		userInfoDao.updateTmPw(userInfoVO);
		
	}

	@Override
	public void insertTmInfo(UserInfoVO userInfoVO) throws Exception {
		userInfoDao.insertTmInfo(userInfoVO);
	}

}
