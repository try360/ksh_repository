/**
 * agw-ne
 *
 * Copyright ⓒ 2018 kt corp. All rights reserved.
 *
 * This is a proprietary software of kt corp, and you may not use this file except in
 * compliance with license agreement with kt corp. Any redistribution or use of this
 * software, with or without modification shall be strictly prohibited without prior written
 * approval of kt corp, and the copyright notice above does not evidence any actual or
 * intended publication of such software.
 * 
 * @ author kt
 * @ since 2018-04-15
 * @ file ParamValidatChk.java
 * @ version 1.0
 * @ see
 * @ Copyright ⓒ 2018 By kt corp. All rights reserved.
 */

package kr.co.kt.common;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.regex.Pattern;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class ParamValidatChk {

	public boolean isNumeric(String param){
		if (param.matches("^[+-]?\\d*(\\.?\\d*)$")){
			return true;
		}
		return false;
	}

	public int toInteger(String param){
		if (param.length() > 10) param = param.substring(0,10);
		if (isNumeric(param)==false) return -1;
		return Integer.parseInt(param);
	}

	public String setLength(String param, int length){
		String result = "";
		if (param.length() > length){
			result = param.substring(0, length);
		} else {
			result = param;
		}
		return result;
	}

	public boolean isEmpty(String param) {
		if (param == null || param.equals("")){
			return true;
		}
		return false;
	}

	public boolean isNull(Object param){
		if (param == null){
			return true;
		}
		return false;
	}

	public String getParam(String param){
		if (isEmpty(param)==false){
			param = param.trim();
			param = Pattern.compile("\\s").matcher(param).replaceAll("");
			param = param.replace("<", "&lt;").replace(">", "&gt");
		}
		return param;
	}

	public String getText(String param) {
		if (isEmpty(param)==false){
			param = param.trim();
			param = param.replace("<", "&lt;").replace(">", "&gt");
		}
		return param;
	}

	@SuppressWarnings("unused")
	public boolean isDate(String param){
		Date dt = null;
		try {
			dt = new SimpleDateFormat("yyyy-MM-dd").parse(param);
			return true;
		} catch (ParseException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return false;
	}

	public Date toDate(String param, String pattern){
		Date date = null;
		try {
			SimpleDateFormat sdf = new SimpleDateFormat(pattern);
			date = sdf.parse(param);
		} catch (ParseException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return date;
	}

	public boolean isFloat(String param, int num, int dec){
		String regex = "^\\d{1,"+ num +"}(.\\d{"+ dec +"})?$";
		if (param.matches(regex)){
			return true;
		}
		return false;
	}

	public boolean pattern(String gubun, String param){
		String reg;

		switch (gubun) {
			case "email":
				reg = "/^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i";
				break;
			case "email2": 
				reg = "^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$";
				break;
			case "password":
				reg = "/^(?=.*[a-zA-Z])((?=.*\\d)|(?=.*\\W)).{6,20}$/";
				break;
			case "nickname":
				reg  = "/^[0-9a-zA-Z가-힣]{3,10}$/";
				break;
			default :
				reg = "";
				break;
		}

		if (!isEmpty(reg)){
			Boolean result = Pattern.matches(reg, param);
			return result;
		}
		return false;
	}

	public String brContent(String content) {
		return content.replaceAll("\r\n","<br>");
	}

	public String toTelNum(String telnum) {
		telnum = toDigit(telnum);

		String result = "";
		String n1, n2, n3;
		n1 = getAreaNumber(telnum);
		telnum = telnum.substring(n1.length());
		if (telnum.length() >= 8) {
			n2 = telnum.substring(0, 2) + "**";
			n3 = "*"+ telnum.substring(5);
		} else if (telnum.length() >= 7) {
			n2 = telnum.substring(0, 1) + "**";
			n3 = "*"+ telnum.substring(4);
		} else if (telnum.length() >= 6) {
			n2 = telnum.substring(0, 0) + "**";
			n3 = "*"+ telnum.substring(3);
		} else if (telnum.length() >= 5) {
			n2 = telnum.substring(0, 0) + "*";
			n3 = "*"+ telnum.substring(2);
		} else {
			n2 = telnum;
			n3 = "";
		}
		result = n1;
		if (!isEmpty(n1)) {
			result += "-";
		}
		result += n2;
		if (!isEmpty(n3)) {
			result += "-"+ n3;
		}

		return result;
	}

	public String getAreaNumber(String tel) {
		String areaStr = "010,011,012,015,016,017,018,,019,02,031,032,033,041,042,043,044,051,052,053,054,055,061,062,063,064,070,060,050,080,081,082";
		String[] areaArr = areaStr.split(",");

		String result = "";
		if (tel.length() > 4) {
			for (int i = 0; i < areaArr.length; i++) {
				if (areaArr[i].length() == 2) {
					String n1 = tel.substring(0, 2);
					if (areaArr[i].equals(n1)) {
						result = areaArr[i];
						break;
					}
				} else if (areaArr[i].length() == 3) {
					String n1 = tel.substring(0, 3);
					if (areaArr[i].equals(n1)) {
						if (areaArr[i].equals("050")) {
							result = tel.substring(0, 4);
						} else {
							result = areaArr[i];
						}
						break;
					}
				}
			}
		}

		return result;
	}

	public String toMacAddress(String mac) {
		String result = mac;
		if (!isEmpty(mac)) {
			if (mac.length() == 12) {
				String mac1, mac2, mac3, mac4, mac5, mac6;
				mac1 = mac.substring(0, 2);
				mac2 = mac.substring(2, 4);
				mac3 = mac.substring(4, 6);
				mac4 = mac.substring(6, 8);
				mac5 = mac.substring(8, 10);
				mac6 = mac.substring(10, 12);

				result = ""+ mac1 +":"+ mac2 +":"+ mac3 +":"+ mac4 +":"+ mac5 +":"+ mac6;
			}
		}

		return result;
	}
	public String toTelNumSecurity(String telnum) {
		telnum = toTelNum(telnum);
		String[] telArr = telnum.split("-");

		String result = "";
		if (telArr.length > 2) {
			result = telArr[0] +"-"+ telArr[1] +"-****";
		} else {
			result = telArr[0] +"-****";
		}

		return telnum;
	}

	public HttpServletResponse createCookie(HttpServletResponse response, String cName, String cValue) {
		response.addCookie(new Cookie(cName, cValue));
		return response;

	}

	public String getCookie(HttpServletRequest request, String cName) {
		String result = "";
		Cookie[] getCookie = request.getCookies();
		if (!isNull(getCookie)) {
			for (int i=0; i < getCookie.length; i++) {
				Cookie c = getCookie[i];
				String name = c.getName();

				if (cName.equals(name)) {
					result = c.getValue();
					break;
				}
			}
		}

		return result;
	}

	public void delCookie(HttpServletResponse response, String cName) {
		Cookie ck = new Cookie(cName, null);
		ck.setMaxAge(0);
		response.addCookie(ck);
	}

	public String toDigit(String strInput){
		StringBuffer sb = new StringBuffer();

		for (int i=0; i < strInput.length(); i++) {
			if (Character.isDigit(strInput.charAt(i))) {
				sb.append(strInput.charAt(i));
			}
		}

		return sb.toString();
	}

	public String[] AddToStringArray(String[] oldArray, String newString) {
		String[] newArray = Arrays.copyOf(oldArray,  oldArray.length+1);
		newArray[oldArray.length] = newString;
		return newArray;
	}

	//�쁺�뼱&�닽�옄留�
	public boolean strOrNum(String param1,String param2,String param3) {
		if(param1.matches("^[A-Z0-9]*$")
				&& param2.matches("^[A-Z0-9]*$")
				&& param3.matches("^[A-Z0-9]*$")) {
			return true;
		}
		return false;
	}


}
