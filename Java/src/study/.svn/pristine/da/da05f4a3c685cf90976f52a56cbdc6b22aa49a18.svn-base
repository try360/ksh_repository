package kr.co.kt.agwne.web;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import kr.co.kt.agwne.dto.AttachVO;
import kr.co.kt.agwne.dto.BbsVO;
import kr.co.kt.agwne.dto.EmailVO;
import kr.co.kt.agwne.dto.ReplyVO;
import kr.co.kt.agwne.service.AttachService;
import kr.co.kt.agwne.service.BoardService;
import kr.co.kt.agwne.service.ReplyService;
import kr.co.kt.common.Attachment;
import kr.co.kt.common.EmailSender;
import kr.co.kt.common.ParamValidatChk;

/**
 * agw-ne
 *
 * Copyright ⓒ 2018 kt corp. All rights reserved.
 *
 * This is a proprietary software of kt corp, and you may not use this file except in
 * compliance with license agreement with kt corp. Any redistribution or use of this
 * software, with or without modification shall be strictly prohibited without prior written
 * approval of kt corp, and the copyright notice above does not evidence any actual or
 * intended publication of such software.
 * 
 * @ author kt
 * @ since 2010-11-22
 * @ file BoardController.java
 * @ version 1.0
 * @ see
 * @ Copyright ⓒ 2018 By kt corp. All rights reserved.
 */

@Controller
@RequestMapping("/board")
public class BoardController extends ParamValidatChk {

    private static final Logger logger = LoggerFactory.getLogger(BoardController.class);
    private static final String table_gb = "t_bbs";
    @Inject
    private BoardService boardService;
    @Inject
    private ReplyService replyService;
    @Inject
    private AttachService attachService;
    @Autowired
    private Attachment attachment;
	@Autowired
	private EmailSender emailSender;


    /**
     * Simply selects the home view to render by returning its name.
     * 
     * @throws Exception
     */

    /*
     * 작성자: 이상준 작성일: 기능: 게시판 작성 화면이동
     */
    @GetMapping("/write")
    public String board_write(
    		    @ModelAttribute BbsVO vo
              , @RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage
              , @RequestParam(value = "searchType", required = false, defaultValue = "") String searchType
              , @RequestParam(value = "searchTxt", required = false, defaultValue = "") String searchTxt
    		  , Model model) throws Exception {
    	model.addAttribute("sub_title", getSub_Title(vo.getBbs_gb()));
    	model.addAttribute("doc_title", getDoc_Title(vo.getBbs_no()));
        model.addAttribute("currentPage", currentPage);
        model.addAttribute("searchType", searchType);
        model.addAttribute("searchTxt", searchTxt);
        model.addAttribute("bbs_gb", vo.getBbs_gb());
        String parameters = "bbs_gb="+ vo.getBbs_gb() +"&currentPage="+ currentPage;
        if (!isEmpty(searchType)) parameters += "&searchType="+ URLEncoder.encode(searchType, "EUC-KR") +"&searchTxt="+ URLEncoder.encode(searchTxt, "EUC-KR");
        model.addAttribute("parameters", parameters);

        
    	BbsVO bbsVO = null;
    	if (vo.getBbs_no() == 0) {
    		bbsVO = vo;
    	} else {
    		bbsVO = (BbsVO) boardService.board_get(vo);
    	}
    	if (isEmpty(vo.getBbs_gb())) {
    		vo.setBbs_gb("N");
    	}
    	List<AttachVO> attachList = attachService.select(vo.getBbs_no(), table_gb);
        model.addAttribute("BbsVO", bbsVO);
        model.addAttribute("attachList", attachList);
        
        return "/board/write";
    }

    /*
     * 작성자: 이상준 작성일: 기능: 게시판 게시물 저장
     */
    @PostMapping("/regist")
    public String board_rdg(
    		    @ModelAttribute BbsVO bbsVO
              , @RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage
              , @RequestParam(value = "searchType", required = false, defaultValue = "") String searchType
              , @RequestParam(value = "searchTxt", required = false, defaultValue = "") String searchTxt
    		  , MultipartHttpServletRequest mhsq
    		  , HttpSession session) throws Exception {
        String parameters = "bbs_gb="+ bbsVO.getBbs_gb() +"&currentPage="+ currentPage;
        if (!isEmpty(searchType)) parameters += "&searchType="+ URLEncoder.encode(searchType, "EUC-KR") +"&searchTxt="+ URLEncoder.encode(searchTxt, "EUC-KR");

        bbsVO.setTitle(getText(bbsVO.getTitle()));
        bbsVO.setContents(getText(bbsVO.getContents()));
        bbsVO.setUpdate_id(getUserId(session));

        if (bbsVO.getBbs_no() == 0) {
        	bbsVO.setInput_id(getUserId(session));
        	boardService.board_reg(bbsVO);
        } else {
        	boardService.board_update(bbsVO);
        }
        
        attachment.Attachment(mhsq, bbsVO.getBbs_no(), bbsVO.getUpdate_id(), table_gb);
        
        if (bbsVO.getBbs_no() == 0) {
        	return "redirect:/board/list?bbs_gb="+ bbsVO.getBbs_gb();
        } else {
        	return "redirect:/board/content?bbs_no="+ bbsVO.getBbs_no() +"&"+ parameters;
        }
    }

    public HashMap<String, Object> getPageInfo(int currentPage, int recordsPerPage, String searchType, String searchTxt) {
        if (isNull(searchTxt) || isEmpty(searchTxt)) {
            searchType = "";
            searchTxt = "";
        } else {
            if (isNull(searchType) || isEmpty(searchType)) {
                searchType = "";
                searchTxt = "";
            } else {
                if (!searchType.equals("A.title") && !searchType.equals("A.content") && !searchType.equals("D.emp_name")) {
                	searchType = "";
                	searchTxt = "";
                }
            }
        }

        if (isNull(currentPage)) {
            currentPage = 1;
        } else {
            if (currentPage < 1) {
                currentPage = 1;
            }
        }
        int startRecord = (currentPage - 1) * recordsPerPage;
        
        HashMap<String, Object> pageInfo = new HashMap<>();
        pageInfo.put("currentPage", currentPage);
        pageInfo.put("recordsPerPage", recordsPerPage);
        pageInfo.put("startRecord", startRecord);
        pageInfo.put("searchType", searchType);
        pageInfo.put("searchTxt", searchTxt);
        
        return pageInfo;
    }
    /*
     * 작성자: 이상준 작성일: 기능: 게시판 글 목록 리스트페이지 이동 , 검색 기능 및 페이징 기능
     */
    @GetMapping(value = "/list")
    public String board_list(Model model,
              @RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage
            , @RequestParam(value = "searchType", required = false, defaultValue = "") String searchType
            , @RequestParam(value = "searchTxt", required = false, defaultValue = "") String searchTxt
            , @RequestParam(value = "bbs_gb", required = false, defaultValue = "N") String bbs_gb
            , HttpServletRequest request) throws Exception {
    	model.addAttribute("sub_title", getSub_Title(bbs_gb));
    	String cName = "bbs"+ bbs_gb +"record";
    	int recordsPerPage = 10;
    	if (isEmpty(getCookie(request, cName))) {
    	} else {
    		if (isNumeric(getCookie(request, cName))) {
    			recordsPerPage = toInteger(getCookie(request, cName));
    		}
    	}
        
        HashMap<String, Object> pageInfo = getPageInfo(currentPage, recordsPerPage, searchType, searchTxt);
        pageInfo.put("bbs_gb", bbs_gb);
        model.addAttribute("noticeList", boardService.noticeList(bbs_gb));
        model.addAttribute("bbsList", boardService.board_list(pageInfo));
        model.addAttribute("pageInfo", pageInfo);
        
        model.addAttribute("totalRecordCount", boardService.board_totalCnt(pageInfo));
        model.addAttribute("recordsPerPage", recordsPerPage);
        model.addAttribute("currentPage", pageInfo.get("currentPage"));
        model.addAttribute("indexPerPage", 10);
        
        String parameters = "bbs_gb="+ bbs_gb;
        if (!searchTxt.equals("")) parameters += "&searchType="+ pageInfo.get("searchType") +"&searchTxt="+ pageInfo.get("searchTxt");
        model.addAttribute("parameters", parameters);
        
        return "/board/list";
    }
    
    @PostMapping("/setrecord")
    public String setRecordPerPage(
    		  @RequestParam(value = "recordsPerPage", required = false, defaultValue = "10") int recordsPerPage
    		, @RequestParam(value = "searchType", required = false, defaultValue = "") String searchType
            , @RequestParam(value = "searchTxt", required = false, defaultValue = "") String searchTxt
            , @RequestParam(value = "bbs_gb", required = false, defaultValue = "N") String bbs_gb
            , HttpServletRequest request
            , HttpServletResponse response) throws UnsupportedEncodingException {
        String cName = "bbs"+ bbs_gb +"record";
        String bbsrecord = getCookie(request, cName);
        int bbsRecord = 0;
        if (!isEmpty(bbsrecord)) {
        	if (isNumeric(bbsrecord)) {
        		bbsRecord = toInteger(bbsrecord);
        	}
        }
        if (recordsPerPage == 0) {
        	if (bbsRecord == 0) {
        		recordsPerPage = 10;
        	} else {
        		recordsPerPage = bbsRecord;
        	}
        } else {
        	if (bbsRecord == 0) {
        		delCookie(response, cName);
        		response.addCookie(new Cookie(cName, recordsPerPage+""));
        	} else {
        		if (recordsPerPage != bbsRecord) {
            		delCookie(response, cName);
            		response.addCookie(new Cookie(cName, recordsPerPage+""));
            		bbsRecord = recordsPerPage;
        		}
        	}
        }
        
        logger.info(">>>>>>>>>>>>>>>>>>>>>>>>>"+ recordsPerPage);
        
        String url = "redirect:list?bbs_gb="+ bbs_gb +"&searchType="+ URLEncoder.encode(searchType, "EUC-KR") +"&searchTxt="+ URLEncoder.encode(searchTxt, "EUC-KR");
        return url;
    }

    /*
     * 작성자: 이상준 작성일: 기능: 게시판 상세보기 페이지 내 삭제
     */
    @GetMapping("/delete")
    public String board_del(Model model
            , @RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage
            , @RequestParam(value = "searchType", required = false, defaultValue = "") String searchType
            , @RequestParam(value = "searchTxt", required = false, defaultValue = "") String searchTxt
    		, @ModelAttribute BbsVO bbsVO
    		, HttpSession session) throws Exception {
        String parameters = "bbs_gb="+ bbsVO.getBbs_gb() +"&currentPage="+ currentPage;
        if (!isEmpty(searchType)) parameters += "&searchType="+ URLEncoder.encode(searchType, "EUC-KR") +"&searchTxt="+ URLEncoder.encode(searchTxt, "EUC-KR");

        bbsVO.setDelete_id("testDeleteID");
        boardService.board_del(bbsVO);
        
        return "redirect:/board/list?"+ parameters;
    }

    /*
     * 작성자: 이상준 작성일: 기능: 게시판 상세보기 +댓글 리스트 가져오기
     */
    @RequestMapping(value = "/content")
    public String board_view(
    		@ModelAttribute ReplyVO replyVO
    	  , @ModelAttribute BbsVO bbsVO
          , @RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage
          , @RequestParam(value = "searchType", required = false, defaultValue = "") String searchType
          , @RequestParam(value = "searchTxt", required = false, defaultValue = "") String searchTxt
          , Model model
          , HttpServletRequest request
          , HttpServletResponse response) throws Exception {
    	model.addAttribute("sub_title", getSub_Title(bbsVO.getBbs_gb()));
        model.addAttribute("currentPage", currentPage);
        model.addAttribute("searchType", searchType);
        model.addAttribute("searchTxt", searchTxt);
        model.addAttribute("bbs_gb", bbsVO.getBbs_gb());
        String parameters = "bbs_gb="+ bbsVO.getBbs_gb() +"&currentPage="+ currentPage;
        if (!isEmpty(searchType)) parameters += "&searchType="+ URLEncoder.encode(searchType, "EUC-KR") +"&searchTxt="+ URLEncoder.encode(searchTxt, "EUC-KR");
        model.addAttribute("parameters", parameters);
        
        BbsVO vo = (BbsVO) boardService.board_get(bbsVO);
        vo.setContents(brContent(vo.getContents()));
        List<AttachVO> attachList = attachService.select(vo.getBbs_no(), table_gb);

        BbsVO prevVO = (BbsVO) boardService.board_prev_no(bbsVO);
        BbsVO nextVO = (BbsVO) boardService.board_next_no(bbsVO);

        // 하루에 한번만 방문자수 증가
        if (!getCookie(request, "bbs"+ bbsVO.getBbs_gb()).equals("OK")) {
        	boardService.board_visit(vo.getBbs_no());
        	response.addCookie(new Cookie("bbs"+ vo.getBbs_no(), "OK"));
        }

        /* 댓글리스트 가져오기 */
        model.addAttribute("replyList", boardService.reply_list(vo.getBbs_no()));
        model.addAttribute("bbsVO", vo);
        model.addAttribute("prevVO", prevVO);
        model.addAttribute("nextVO", nextVO);
        model.addAttribute("attachList", attachList);
        
        return "/board/contents";
    }

    /*
     * 작성자: 이상준 작성일: 기능: 게시물 업데이트 저장
     */
    @RequestMapping(value = "/board_update.do")
    public String board_update(@ModelAttribute BbsVO bbsVO) throws Exception {
        bbsVO.setUpdate_id("testUpDateID");
        boardService.board_update(bbsVO);
        return "redirect:/board/board_list.do?bbs_gb="+bbsVO.getBbs_gb();
    }
    
    @PostMapping("filedel")
    public @ResponseBody String filedel(@RequestParam(value="attach_no", required=true) int attach_no
    		, HttpSession session) {
    	
        String result = "";
        try {
            attachment.deleteFile(attach_no, getUserId(session));
            result = "SUCCESS";
        } catch (Exception e) {
            result = "FAILED";
            e.printStackTrace();
            
        }
        return result;

    }
    
    @PostMapping("/reply_reg")
    public String reply_reg(
    		  @ModelAttribute ReplyVO replyVO
            , @RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage
            , @RequestParam(value = "searchType", required = false, defaultValue = "") String searchType
            , @RequestParam(value = "searchTxt", required = false, defaultValue = "") String searchTxt
            , @RequestParam(value = "email_yn", required = true) Boolean email_yn
    		, HttpSession session
    		, Model model) throws Exception {
        String parameters = "bbs_gb="+ replyVO.getBbs_gb() +"&currentPage="+ currentPage;
        if (!isEmpty(searchType)) parameters += "&searchType="+ URLEncoder.encode(searchType, "EUC-KR") +"&searchTxt="+ URLEncoder.encode(searchTxt, "EUC-KR");
        parameters +="#replyList";
  	  
        replyVO.setContents(getText(replyVO.getContents()));
        replyVO.setInput_id(getUserId(session)); 
        replyService.reply_reg(replyVO);
        
        //이메일 보내기
        if (email_yn) {
        	replyVO = replyService.replyEmailSelect(replyVO.getReply_no());
        	EmailVO email = new EmailVO();
        	String[] receiver = {replyVO.getEmail_address()};
        	email.setReceiver(receiver);
        	email.setSubject("[AGW-Ne] '"+ getSub_Title(replyVO.getBbs_gb()) +"'에 등록하신 게시물에 댓글이 등록되었습니다");
        	email.setContent(emailSender.getEmailBBS(replyVO));
        	emailSender.sendEmail(email);
        }
         
        return "redirect:content?bbs_no="+ replyVO.getBbs_no() +"&"+ parameters;
    }     

      @PostMapping("/reply_del")
      public @ResponseBody String reply_del(Model model, ReplyVO replyVO, HttpSession session) throws Exception {
          String result = "";
          try {
              replyVO.setDelete_id(getUserId(session));
              replyService.reply_del(replyVO);
             
              result = "SUCCESS";
          } catch (Exception e) {
              result = "FAILED";
              e.printStackTrace();
              
          }
          return result;
      }

    private String getSub_Title(String bbs_gb) {
    	String result = "";
    	switch (bbs_gb) {
    	case "N"	: result = "공지사항";		break;
    	case "D"	: result = "자료실";		break;
    	case "Q"	: result = "QnA";		break;
    	default		: result = "---";		break;
    	}
    	
    	return result;
    }

    private String getDoc_Title(int bbs_no) {
    	String result = "";
    	if (bbs_no == 0) {
    		result = "글쓰기";
    	} else {
    		result = "수정하기";
    	}
    	
    	return result;
    }
    
    private String getUserId(HttpSession session) {
    	String result = session.getAttribute("user_id").toString();
    	
    	return result;
    }
    
}
