/**
 * agw-ne
 *
 * Copyright ⓒ 2018 kt corp. All rights reserved.
 *
 * This is a proprietary software of kt corp, and you may not use this file except in
 * compliance with license agreement with kt corp. Any redistribution or use of this
 * software, with or without modification shall be strictly prohibited without prior written
 * approval of kt corp, and the copyright notice above does not evidence any actual or
 * intended publication of such software.
 * 
 * @ author kt
 * @ since 2018-04-15
 * @ file SecureInterceptor.java
 * @ version 1.0
 * @ see
 * @ Copyright ⓒ 2018 By kt corp. All rights reserved.
 */

package kr.co.kt.common;

import java.io.PrintWriter;
import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import kr.co.kt.agwne.dto.LogVO;
import kr.co.kt.agwne.dto.UserInfoVO;
import kr.co.kt.agwne.service.IncludeSearchService;

import static java.util.Objects.isNull;
import static org.springframework.web.util.WebUtils.getCookie;

@Component
public class SecureInterceptor extends HandlerInterceptorAdapter {
	
	private static final Logger logger = LoggerFactory.getLogger(SecureInterceptor.class);
	
	@Autowired
	IncludeSearchService service; 
	
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		
		response.addHeader("X-UA-Compatible", "IE=edge");
		
		String user_id = request.getParameter("user_id");
		String password = request.getParameter("password");
		String uri = request.getRequestURI();
		HttpSession session = request.getSession(true);
		UserInfoVO userInfo = (UserInfoVO)session.getAttribute("userinfo");
		
//		logger.info("#[user_id:"+user_id+"][password:"+password+"][URI:"+uri+"]");
		if(!"/".equals(uri) && !"/login".equals(uri) && !"/signin".equals(uri) && !"/error".equals(uri) && !"/include/ieNotice".equals(uri) && !"/include/ieNotice2".equals(uri) && ! "/ssoSignin".equals(uri) ) {//
			//logger.info("#userInfo:"+userInfo+"][resources:"+uri.indexOf("resources")+"]");
			if(userInfo == null && uri.indexOf("resources") == -1) {
//				logger.info("1. UserRole is null "+uri);
				if(uri.equals("/business/request") || uri.equals("/4p/request") || uri.equals("/reform/request")
						|| uri.equals("/manage/role_agw_pop") || uri.equals("/manage/popup_approval_info.do")
						|| uri.equals("/manage/popup_approval_user.do")){
					response.setContentType("text/html; charset=UTF-8");
					response.setCharacterEncoding("utf-8");
					PrintWriter writer=response.getWriter();
					writer.println("<script type='text/javascript'>");
					writer.println("alert('세션이 만료되어 로그아웃 되었습니다.\\n다시 로그인 해주세요.');");
					writer.println("opener.parent.location.reload();");
					writer.println("window.close();");
					writer.println("</script>");
					writer.flush();
				}else if(!isNull(getCookie(request,"KTSSOKey")) && !isNull(getCookie(request,"struid"))){ //sso 인증키가 있고 struid 가 있으면 (전에 인증 했엇으면)
				    logger.info("SSO Sign Already ");

                    response.sendRedirect("/ssoSignin");

                }else {
					response.sendRedirect("/");
				}
				//logger.info("preHandle return false");
				//logger.info("#[URI:"+uri+"] Fail");
				return false;
			}
		}
//		logger.info("#[URI:"+uri+"] OK");
		return true;
	}
	
	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
		HttpSession session = request.getSession(true);
		UserInfoVO userInfo = (UserInfoVO) session.getAttribute("userinfo");
		String user_id = null;
		if (userInfo != null) user_id = userInfo.getNo_emp();
		
		String requestURI = request.getRequestURI();
		String title = "";  
		String sub_title = "";
		String folder = "";
		String sub_folder = "";
//		logger.info("#post handle: requestURI["+requestURI+"]");
		try {
			folder = requestURI.substring(requestURI.indexOf("/")+1, requestURI.indexOf("/", 1)).toLowerCase();
		} catch (Exception e) {
			folder = "root";
		}
		switch (folder) {
			case "board"		: title = "게시판"; break;
			case "business"		: title = "수요공급요청";		sub_title = "AGW"; 			break;
			case "4p"			: title = "수요공급요청"; 		sub_title = "4P-AGW";		break;
			case "reform"		: title = "수요공급요청"; 		sub_title = "Reform-AGW";	break;
			case "userinfo"		: title = "관리자"; break;
			case "manage"		: title = "운용관리";
				title = "운용관리";
				if (requestURI.split("/").length > 2) {
					sub_folder = requestURI.split("/")[2].toLowerCase();
					if (sub_folder.equals("role_agw")) sub_title = "AGW";
					if (sub_folder.equals("role_4p")) sub_title = "4P-AGW";
					if (sub_folder.equals("userRole_write.do")) sub_title = "4P-AGW";
					if (sub_folder.equals("reform")) sub_title = "Reform-AGW";
					if (sub_folder.equals("email")) sub_title = "메일링 관리";
				}
				break;
			case "facility"		: 
				title = "시설관리";
				if (requestURI.split("/").length > 2) {
					sub_folder = requestURI.split("/")[2].toLowerCase();
					if (sub_folder.equals("4p")) sub_title = "4P-AGW";
					if (sub_folder.equals("agw")) sub_title = "AGW";
					if (sub_folder.equals("reform")) sub_title = "Reform-AGW";
				}
				break;
			default				: title = "광전화 망설계"; break;
		}
		if (!folder.equals("resources") && !folder.equals("WEB-INF")) {
			String ip = request.getHeader("X-FORWARDED-FOR");
			if (ip == null) ip = request.getRemoteAddr();
			
			LogVO logVO = new LogVO();     
			logVO.setMethod(request.getMethod());
			logVO.setQuerystring(request.getQueryString());
			logVO.setSessionid(request.getRequestedSessionId());
			logVO.setIp(ip);
			logVO.setRequesturi(request.getRequestURI());
			logVO.setServletpath(request.getServletPath());
			logVO.setUseragent(request.getHeader("User-Agent"));
			logVO.setReferer(request.getHeader("referer"));
			logVO.setInput_id(user_id);
			//service.insertLog(logVO);
		}

		HashMap<String, String> menuMap = new HashMap<String, String>();
		menuMap.put("FOLDER", folder);
		menuMap.put("TITLE", title);
		menuMap.put("SUB_FOLDER", sub_folder);
		menuMap.put("SUB_TITLE", sub_title);
//		logger.info("> folder:"+folder+", title:"+title +", sub_folder:"+ sub_folder);   
		try {
			modelAndView.addObject("menuMap", menuMap);
		} catch (Exception e) {
			logger.debug(e.getMessage());
		}
		//return;
	}
}
