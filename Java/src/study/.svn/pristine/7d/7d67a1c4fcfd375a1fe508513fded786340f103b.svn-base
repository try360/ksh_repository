package kr.co.kt.agwne.web;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import kr.co.kt.agwne.dto.Agw4pExcelVO;
import kr.co.kt.agwne.dto.ApprovalInfoVO;
import kr.co.kt.agwne.dto.AttachVO;
import kr.co.kt.agwne.dto.BusinessVO;
import kr.co.kt.agwne.dto.CodeVO;
import kr.co.kt.agwne.dto.ConfirmUserVO;
import kr.co.kt.agwne.dto.ConstructMemVO;
import kr.co.kt.agwne.dto.ConstructVO;
import kr.co.kt.agwne.dto.EmailVO;
import kr.co.kt.agwne.dto.EmsVO;
import kr.co.kt.agwne.dto.FacilitiesVO;
import kr.co.kt.agwne.dto.ModelInfoVO;
import kr.co.kt.agwne.dto.OfficeVO;
import kr.co.kt.agwne.dto.ProcessVO;
import kr.co.kt.agwne.dto.SearchVO;
import kr.co.kt.agwne.dto.UserExMailVO;
import kr.co.kt.agwne.dto.UserInfoVO;
import kr.co.kt.agwne.dto.data.NeossData;
import kr.co.kt.agwne.service.AesService;
import kr.co.kt.agwne.service.AttachService;
import kr.co.kt.agwne.service.BusinessService;
import kr.co.kt.agwne.service.CodeService;
import kr.co.kt.agwne.service.EmailService;
import kr.co.kt.agwne.service.IncludeSearchService;
import kr.co.kt.agwne.service.NeossService;
import kr.co.kt.agwne.service.OfficeService;
import kr.co.kt.agwne.service.ProcessService;
import kr.co.kt.agwne.service.UserRoleService;
import kr.co.kt.agwne.service.impl.Agw4pServiceImpl;
import kr.co.kt.common.Attachment;
import kr.co.kt.common.CommonUtility;
import kr.co.kt.common.EmailSender;
import kr.co.kt.common.ParamValidatChk;

/**
 * agw-ne
 * <p>
 * Copyright ⓒ 2018 kt corp. All rights reserved.
 * <p>
 * This is a proprietary software of kt corp, and you may not use this file except in
 * compliance with license agreement with kt corp. Any redistribution or use of this
 * software, with or without modification shall be strictly prohibited without prior written
 * approval of kt corp, and the copyright notice above does not evidence any actual or
 * intended publication of such software.
 *
 * @ author kt
 * @ since 2010-11-22
 * @ file Agw4pController.java
 * @ version 1.0
 * @ see
 * @ Copyright ⓒ 2018 By kt corp. All rights reserved.
 */
@Controller
@RequestMapping("/4p")
public class Agw4pController extends ParamValidatChk {
    private static final Logger logger = LoggerFactory.getLogger(Agw4pController.class);
    private static final String table_gb = "t_neoss";
    private static final String agw_cd = "03";
    private static final int SLEEP_TIME = 4;
    @Inject
    private AesService aes;
    @Inject
    private OfficeService officeService;
    @Autowired
    @Qualifier("agw4pService")
    private BusinessService businessService;
    @Inject
    private NeossService neossService;
    @Inject
    private ProcessService processService;
    @Inject
    private AttachService attachService;
    @Autowired
    private Attachment attachment;
    @Inject
    private CommonUtility commonutil;
    @Inject
    private IncludeSearchService includeService;
    @Inject
    private EmailService emailService;
    @Autowired
    private EmailSender emailSender;
    @Autowired
    @Qualifier("agw4pService")
    private Agw4pServiceImpl agwService;
    @Autowired
    private UserRoleService userRoleService;
    @Inject
    private CodeService codeService;

    public HashMap<String, Object> getPageInfo(SearchVO vo, HttpSession session) throws UnsupportedEncodingException, ParseException {
        HashMap<String, Object> pageInfo = new HashMap<String, Object>();
        String param = "";

        int currentPageNo = 1;
        if (isNull(vo.getCurrentPage()) || isEmpty(vo.getCurrentPage())) {
            currentPageNo = 1;
        } else {
            if (!isNumeric(vo.getCurrentPage())) {
                currentPageNo = 1;
            } else {
                try {
                    currentPageNo = Integer.parseInt(vo.getCurrentPage());
                } catch (Exception e) {
                    currentPageNo = 1;
                }
            }
        }
        param += "currentPage=" + currentPageNo;

        int recordsPerPage = 12;
        int startRecord = (currentPageNo - 1) * recordsPerPage;
        pageInfo.put("currentPage", currentPageNo);
        pageInfo.put("startRecord", startRecord);
        pageInfo.put("recordsPerPage", recordsPerPage);


        String searchType = vo.getSearchType();
        String searchTxt = vo.getSearchTxt();
        if (isEmpty(searchTxt)) {
            searchType = "";
            searchTxt = "";
        } else {
            if (isEmpty(searchType)) {
                searchType = "";
                searchTxt = "";
            } else {
                if (!searchType.equals("A.section_nm") && !searchType.equals("A.doc_no") && !searchType.equals("E.emp_name") && !searchType.equals("F.emp_name")) {
                    searchType = "";
                    searchTxt = "";
                } else {
                    //그대로
                    param += "&searchType=" + searchType + "&searchTxt=" + URLEncoder.encode(searchTxt, "EUC-KR");
                }
            }
        }
        pageInfo.put("searchType", searchType);
        pageInfo.put("searchTxt", searchTxt);

        //검색폼 파라미터 셋팅
        String date_sql = "";
        String date_java = "yyyy-MM";
        String radio_date = vo.getRadio_date();
        String st_date = vo.getSt_date();
        String ed_date = vo.getEd_date();
        if (!isEmpty(radio_date)) {
            if (radio_date.equals("year")) {
                date_sql = "YYYY";
                date_java = "yyyy";
            } else if (radio_date.equals("month")) {
                date_sql = "YYYY-MM";
                date_java = "yyyy-MM";
            } else if (radio_date.equals("day")) {
                date_sql = "YYYY-MM-DD";
                date_java = "yyyy-MM-dd";
            } else if (radio_date.equals("all")) {
                date_sql = null;
                date_java = null;
            } else {
                //검색이 없으면 월검색이 Default
                radio_date = null;
                date_sql = null;
                date_java = null;
            }
        } else {
            radio_date = "day";
            date_sql = "YYYY-MM-DD";
            date_java = "yyyy-MM-dd";
        }
        if (!isEmpty(radio_date)) {
            param += "&radio_date=" + radio_date;
        }
        if (!isNull(date_java)) {
            SimpleDateFormat sdf = new SimpleDateFormat(date_java);
            if (isEmpty(st_date) && isEmpty(ed_date)) {
                ed_date = sdf.format(new Date());
                Calendar c = Calendar.getInstance();
                c.setTime(sdf.parse(ed_date));
                c.add(Calendar.DATE, -30);
                st_date = sdf.format(c.getTime());
            } else {
                if (isEmpty(st_date)) {
                    st_date = null;
                    ed_date = null;
                }
                if (isEmpty(ed_date)) {
                    st_date = null;
                    ed_date = null;
                }
            }
            if (!isNull(st_date) && !isNull(ed_date)) {
                param += "&st_date=" + st_date + "&ed_date=" + ed_date;
            }
        }
        pageInfo.put("radio_date", radio_date);
        pageInfo.put("date_format", date_sql);
        pageInfo.put("st_date", st_date);
        pageInfo.put("ed_date", ed_date);

        String buildshape_cd = vo.getBuildshape_cd();
        if (!isEmpty(buildshape_cd)) {
            param += "&buildshape_cd=" + buildshape_cd;
        } else {
            buildshape_cd = null;
        }
        pageInfo.put("buildshape_cd", buildshape_cd);

        String status = vo.getStatus();
        if (!isEmpty(status)) {
            if (status.length() != 3) {
                status = null;
            } else {
                param += "&status=" + status;
            }
        } else {
            status = null;
        }
        pageInfo.put("status", status);

        UserInfoVO usrVO = (UserInfoVO) session.getAttribute("userinfo");
        pageInfo.put("region", usrVO.getRegion());
        pageInfo.put("user_bonbu", usrVO.getBonbu());
        pageInfo.put("user_role", session.getAttribute("role"));

        String myOrgCheck = vo.getMyOrgCheck();
        String onoffSwitch = vo.getOnoffSwitch();
        if (!pageInfo.get("user_role").equals("02")) { //일반회원
            if (isNull(onoffSwitch)) {//초기로딩시
                if (isNull(myOrgCheck)) {
                    myOrgCheck = "on";
                }
            } else {//검색버튼누른상태
                if (!isNull(myOrgCheck)) {
                    if (!myOrgCheck.equals("off")) {
                        myOrgCheck = "on";
                    }
                } else {
                    myOrgCheck = "off";
                }
            }
        } else {
            if (isNull(myOrgCheck)) {
                myOrgCheck = "off";
            } else {
                if (!myOrgCheck.equals("off")) {
                    myOrgCheck = "on";
                }
            }
        }
        param += "&onoffSwitch=" + onoffSwitch + "&myOrgCheck=" + myOrgCheck;
        pageInfo.put("onoffSwitch", onoffSwitch);
        pageInfo.put("myOrgCheck", myOrgCheck);

        String office_0 = vo.getOffice_0();
        String office_1 = vo.getOffice_1();
        String office_2 = vo.getOffice_2();
        String office_3 = vo.getOffice_3();
        if (!isEmpty(office_0) || !isEmpty(office_1) || !isEmpty(office_2) || !isEmpty(office_3)) {
            if (!isEmpty(office_3)) {
                pageInfo.put("orgscode", office_3);
                pageInfo.put("level", null);
                param += "&office_0=" + office_0 + "&office_1=" + office_1 + "&office_2=" + office_2 + "&office_3=" + office_3;
            } else if (!isEmpty(office_2)) {
                pageInfo.put("orgscode", office_2);
                pageInfo.put("level", null);
                office_3 = null;
                param += "&office_0=" + office_0 + "&office_1=" + office_1 + "&office_2=" + office_2;
            } else if (!isEmpty(office_1)) {
                pageInfo.put("orgscode", office_1);
                pageInfo.put("level", null);
                office_3 = null;
                office_2 = null;
                param += "&office_0=" + office_0 + "&office_1=" + office_1;
            } else if (!isEmpty(office_0)) {
                pageInfo.put("orgscode", office_0);
                pageInfo.put("level", null);
                office_3 = null;
                office_2 = null;
                office_1 = null;
                param += "&office_0=" + office_0;
            } else {
                office_3 = null;
                office_2 = null;
                office_1 = null;
                office_0 = null;
                pageInfo.put("orgscode", null);
                pageInfo.put("level", null);
            }
        } else {
            office_0 = null;
            office_1 = null;
            office_2 = null;
            office_3 = null;
        }
        pageInfo.put("office_0", office_0);
        pageInfo.put("office_1", office_1);
        pageInfo.put("office_2", office_2);
        pageInfo.put("office_3", office_3);
        pageInfo.put("param", param);

        return pageInfo;
    }

    //수요공급요청리스트
    @SuppressWarnings("unchecked")
    @GetMapping("/list")
    public String bs_list(Model model
            , @ModelAttribute SearchVO search
            , HttpSession session) throws Exception {

        HashMap<String, Object> pageInfo = getPageInfo(search, session);
        HashMap<String, Object> codeMap = new HashMap<>();
        codeMap.put("agw_cd", agw_cd);
        codeMap.put("column_nm", "status_cd");

        int totalCnt = businessService.t_bs_listCnt(pageInfo);
//    	logger.info("listTotalCnt"+totalCnt);
        List<OfficeVO> officeSubList = officeService.t_office_sub_list(pageInfo);
        List<BusinessVO> bs_list = (List<BusinessVO>) businessService.t_bs_list(pageInfo);
        List<OfficeVO> officeList = (List<OfficeVO>) officeService.t_office_list_top();
        List<CodeVO> codeStatusList = (List<CodeVO>) codeService.codeSelect(codeMap);
        codeMap.put("column_nm", "buildshape_cd");
        List<CodeVO> codeBuildshapeList = (List<CodeVO>) codeService.codeSelect(codeMap);
        int cmCnt = userRoleService.selectCmCnt(getSessionAttr(session, "dept_code"));

        model.addAttribute("searchInfo", pageInfo);
        model.addAttribute("search_office_list", officeSubList);
        model.addAttribute("bs_list", bs_list);
        model.addAttribute("OfficeList", officeList);
        model.addAttribute("statusCodeList", codeStatusList);
        model.addAttribute("BusinessCode", codeBuildshapeList);
        model.addAttribute("currentPage", pageInfo.get("currentPage"));
        model.addAttribute("totalRecordCount", totalCnt);
        model.addAttribute("recordsPerPage", pageInfo.get("recordsPerPage"));
        model.addAttribute("cmCnt", cmCnt);

        return "business4p/list";
    }

    //수요공급요청상세보기
    @SuppressWarnings("unchecked")
    @RequestMapping(value = "/request_view")
    public String bs_request_view(
            @ModelAttribute SearchVO searchVO
            , @RequestParam(value = "rstNo", required = false, defaultValue = "1") int rstNo
            , Model model
            , HttpSession session) throws Exception {

        HashMap<String, Object> pageInfo = getPageInfo(searchVO, session);
        pageInfo.put("rstNo", rstNo);
        int prev_no = businessService.request_prev_no(rstNo);
        int next_no = businessService.request_next_no(rstNo);

        //상세정보불러와서 셋팅
        BusinessVO bsVO = (BusinessVO) businessService.t_bs_list_view(rstNo);
        if (bsVO.getRequest_yn()) {
            bsVO.setStatus_next(statusChk(statusNext(bsVO.getStatus_cd()), true));
        } else {
            bsVO.setStatus_next(statusChk(bsVO.getStatus_cd(), true));
        }

        //승인자 정보 가져오기
        ConfirmUserVO cfVO = new ConfirmUserVO();
        cfVO.setNeoss_no(rstNo);
        cfVO.setAgw_cd(agw_cd);
        List<ConfirmUserVO> cfList = includeService.confrimUsrList_agw(cfVO);
        HashMap<String, Object> confirm = new HashMap<String, Object>();
        HashMap<String, Object> confirmNo_emp = new HashMap<String, Object>();
        HashMap<String, String> confirmRegion = new HashMap<String, String>();
        List<ConfirmUserVO> list01 = new ArrayList<>();
        List<ConfirmUserVO> list02 = new ArrayList<>();
        List<ConfirmUserVO> list03 = new ArrayList<>();
        List<ConfirmUserVO> list04 = new ArrayList<>();
        List<ConfirmUserVO> list05 = new ArrayList<>();
        for (int i = 0; i < cfList.size(); i++) {
            if (cfList.get(i).getStatus_cd().equals("01")) {
                list01.add(cfList.get(i));
            } else if (cfList.get(i).getStatus_cd().equals("02")) {
                list02.add(cfList.get(i));
            } else if (cfList.get(i).getStatus_cd().equals("03")) {
                list03.add(cfList.get(i));
            } else if (cfList.get(i).getStatus_cd().equals("04")) {
                list04.add(cfList.get(i));
            } else if (cfList.get(i).getStatus_cd().equals("05")) {
                list05.add(cfList.get(i));
            }
//			confirmNo_emp.put("st_"+cfList.get(i).getStatus_cd(), cfList.get(i).getUser_no());
//			confirmRegion.put("st_"+cfList.get(i).getStatus_cd(), cfList.get(i).getRegion());
//			logger.info("st_"+ cfList.get(i).getStatus_cd() +":::::::::::"+ confirmNo_emp.get("st_"+ cfList.get(i).getStatus_cd())+"");
        }
        confirm.put("st_01", list01);
        confirm.put("st_02", list02);
        confirm.put("st_03", list03);
        confirm.put("st_04", list04);
        confirm.put("st_05", list05);

        //요청처리 이력 리스트 셋팅
        List<ProcessVO> vo = processService.process_list(rstNo);

        for (int i = 0; i < vo.size(); i++) {
            if (vo.get(i).getStatus_cd().equals("00")) {
                vo.get(i).setStatus("재요청");
            } else {
                vo.get(i).setStatus(statusChk2(vo.get(i).getStatus_cd(), true, vo.get(i).getReturn_yn()));
            }
        }

        //승인정보입력정보가져오기
        HashMap<String, Object> info = new HashMap<String, Object>();
        info.put("neoss_no", bsVO.getNeoss_no());
        info.put("status_cd", bsVO.getStatus_cd());
        info.put("gubun", agw_cd); //agw
        ModelInfoVO mdVO = processService.process_modelInfo_view(info);
        FacilitiesVO faciInfo;
        if (mdVO != null) {
            if ((mdVO.getManaged_ip() != null && !mdVO.getManaged_ip().equals("")) &&
                    (mdVO.getColcode() != null && !mdVO.getColcode().equals(""))) {
                HashMap<String, Object> map = new HashMap<>();
                map.put("managed_ip", mdVO.getManaged_ip());
                map.put("colcode", mdVO.getColcode());
                faciInfo = agwService.selectFacilities(map);
            } else {
                faciInfo = new FacilitiesVO();
            }
        } else {
            faciInfo = new FacilitiesVO();
        }
        model.addAttribute("faciInfo", faciInfo);
        List<HashMap<String, Object>> md_list = businessService.t_bs_pots(bsVO.getRegion());
        List<HashMap<String, Object>> md_list2 = businessService.t_bs_ipsec();
        List<HashMap<String, Object>> md_list3 = businessService.t_bs_emsIp();
        //최신의견가져오기
        HashMap<String, Object> pr_contents = processService.process_contents(bsVO.getNeoss_no());

        //착공준공정보 가져오기
        ConstructVO csVO = (ConstructVO) businessService.t_construct_view(rstNo);
        List<UserExMailVO> exMailList = null;
        List<ConstructMemVO> csmemVO = null;
        if (csVO != null) {
            csmemVO = businessService.t_construct_mem(rstNo);
//		   for (int i = 0; i < csmemVO.size(); i++) {
//			   logger.info(csmemVO.get(i).getEmp_name());
//		}
            //cs_mem_list = businessService.t_construct_mem(csVO.getConst_no());
        } else {
            exMailList = (List<UserExMailVO>) processService.selectExMailing(bsVO.getOffice_no());
        }

        HashMap<String, String> authChk = getAuthChk(bsVO, session);

        //수정 이력에 대한 정보 셋팅
        List<BusinessVO> bsVO_hist_list = businessService.t_bs_list_view_hist(rstNo);
        //첨부파일
        List<AttachVO> attachList = attachService.select(rstNo, table_gb);
        model.addAttribute("exMailList", exMailList);
        model.addAttribute("requestView", bsVO);
        model.addAttribute("requestViewHistory", bsVO_hist_list); //변경이력
        model.addAttribute("processView", vo); //승인이력 리스트
        model.addAttribute("csVO", csVO); //착공준공정보
        model.addAttribute("csmemVO", csmemVO); //착공준공정보
        model.addAttribute("modelInfo_view", mdVO); //착공준공정보
        model.addAttribute("md_list", md_list); //pots정보
        model.addAttribute("md_list2", md_list2); //ipsec_ip
        model.addAttribute("md_list3", md_list3); //ems_ip
        model.addAttribute("pr_contents", pr_contents); //검토의견
        model.addAttribute("prev_no", prev_no);
        model.addAttribute("next_no", next_no);
        model.addAttribute("confrimUsrList", cfList);
        model.addAttribute("confirmNo_emp", confirmNo_emp);
        model.addAttribute("confirmRegion", confirmRegion);
        model.addAttribute("attachList", attachList);
        model.addAttribute("pageInfo", pageInfo);
        model.addAttribute("authChk", authChk);
        model.addAttribute("list01", list01);
        model.addAttribute("list02", list02);
        model.addAttribute("list03", list03);
        model.addAttribute("list04", list04);
        model.addAttribute("list05", list05);
        return "business4p/request_view";

    }

    @SuppressWarnings("unchecked")
    private HashMap<String, String> getAuthChk(BusinessVO bsVO, HttpSession session) {
        String status_cd = bsVO.getStatus_cd();
        int user_no = toInteger(session.getAttribute("user_no").toString());
        String user_id = session.getAttribute("user_id").toString();
        Map<String, ApprovalInfoVO> sess_apprVO = (Map<String, ApprovalInfoVO>) session.getAttribute("approvalMap_4PAGW");

        HashMap<String, Object> deptMap = (HashMap<String, Object>) emailService.select_teamCode(bsVO.getNeoss_no());
        deptMap.put("neoss_no", bsVO.getNeoss_no());
        List<UserInfoVO> list01 = (List<UserInfoVO>) emailService.select_4p_step01(deptMap);
        List<UserInfoVO> list02 = (List<UserInfoVO>) emailService.select_4p_step02(deptMap);
        List<UserInfoVO> list03 = (List<UserInfoVO>) emailService.select_4p_step03(deptMap);
        List<UserInfoVO> list04 = (List<UserInfoVO>) emailService.select_4p_step04(deptMap);
        List<UserInfoVO> list05 = (List<UserInfoVO>) emailService.select_4p_step05(deptMap);

//	   logger.info(session.getAttribute("approvalMap_4PAGW").toString());
        if (sess_apprVO.size() > 0) {
            ApprovalInfoVO vo = new ApprovalInfoVO();
            vo.setStep("00");
            if (sess_apprVO.get("01") == null) {
                sess_apprVO.put("01", vo);
            }
            if (sess_apprVO.get("02") == null) {
                sess_apprVO.put("02", vo);
            }
            if (sess_apprVO.get("03") == null) {
                sess_apprVO.put("03", vo);
            }
            if (sess_apprVO.get("04") == null) {
                sess_apprVO.put("04", vo);
            }
            if (sess_apprVO.get("05") == null) {
                sess_apprVO.put("05", vo);
            }
        }
        String sessRegion = (String) session.getAttribute("region");
//	   logger.info("region:::::::::::::::::::::::::::::"+ sessRegion);
        String role = session.getAttribute("role").toString();
//	   logger.info(status_cd);
        String a0 = "N";
        String a1 = "N";
        String a2 = "N";
        String a3 = "N";
        String a4 = "N";
        String a5 = "N";
        String a0_mail = "N";
        String a1_mail = "N";
        String a2_mail = "N";
        String a3_mail = "N";
        String a4_mail = "N";
        String a5_mail = "N";

//	   logger.info("status_cd:"+ status_cd +";requst_yn:"+ bsVO.getRequest_yn() +";confirmNo_emp.st_06:"+ confirmNo_emp.get("st_06") +";session.user_id:"+ user_id +";confirmRegion.st_06:"+ confirmRegion.get("st_06") + ";session.region:"+ region +":apprVO.appr_06:"+ apprVO.get("01").getStep().equals("01"));
//	   logger.info("status_cd:"+ status_cd +";requst_yn:"+ bsVO.getRequest_yn() );
        if (role.equals("02")) {
            a0 = "Y";
            a1 = "Y";
            a2 = "Y";
            a3 = "Y";
            a4 = "Y";
            a5 = "Y";
            if (status_cd.equals("01")) {
                a0_mail = "Y";
            }
            if (status_cd.equals("02")) {
                a0_mail = "Y";
                a1_mail = "Y";
            }
            if (status_cd.equals("03")) {
                a0_mail = "Y";
                a1_mail = "Y";
                a2_mail = "Y";
            }
            if (status_cd.equals("04")) {
                a0_mail = "Y";
                a1_mail = "Y";
                a2_mail = "Y";
                a3_mail = "Y";
            }
            if (status_cd.equals("05") && !bsVO.getRequest_yn()) {
                a0_mail = "Y";
                a1_mail = "Y";
                a2_mail = "Y";
                a3_mail = "Y";
                a4_mail = "Y";
            }
            if (status_cd.equals("05") && bsVO.getRequest_yn()) {
                a0_mail = "Y";
                a1_mail = "Y";
                a2_mail = "Y";
                a3_mail = "Y";
                a4_mail = "Y";
                a5_mail = "Y";
            }

        } else {
            if (user_id.equals(bsVO.getInput_id())) {
                if (status_cd.equals("00") || status_cd.equals("99")) {
                    a0 = "Y";
                } else if (status_cd.equals("01")) {
                    a0_mail = "Y";
                }
            }
            if (sess_apprVO.size() > 0) {
                if (list01 != null) {
                    for (UserInfoVO vo : list01) {
                        if (vo.getUser_no() == user_no && sess_apprVO.get("01").getStep().equals("01")) {
                            if (status_cd.equals("01")) {
                                a0 = "Y";
                                a1 = "Y";
                            } else if (!status_cd.equals("01")) {
                                a1 = "Y";
                                a1_mail = "Y";
                            }
                            break;
                        }
                    }
                }
                if (list02 != null) {
                    for (UserInfoVO vo : list02) {
                        if (vo.getUser_no() == user_no && sess_apprVO.get("02").getStep().equals("02")) {
                            if (status_cd.equals("02")) {
                                a0 = "Y";
                                a1 = "Y";
                                a2 = "Y";
                            } else if (!status_cd.equals("02")) {
                                a2 = "Y";
                                a2_mail = "Y";
                            }
                            break;
                        }
                    }
                }
                if (list03 != null) {
                    for (UserInfoVO vo : list03) {
                        if (vo.getUser_no() == user_no && sess_apprVO.get("03").getStep().equals("03")) {
                            if (status_cd.equals("03")) {
                                a0 = "Y";
                                a1 = "Y";
                                a2 = "Y";
                                a3 = "Y";
                            } else if (!status_cd.equals("03")) {
                                a3 = "Y";
                                a3_mail = "Y";
                            }
                            break;
                        }
                    }
                }
                if (list04 != null) {
                    for (UserInfoVO vo : list04) {
                        if (vo.getUser_no() == user_no && sess_apprVO.get("04").getStep().equals("04")) {
                            if (status_cd.equals("04")) {
                                a0 = "Y";
                                a1 = "Y";
                                a2 = "Y";
                                a3 = "Y";
                                a4 = "Y";
                            } else if (!status_cd.equals("04")) {
                                a4 = "Y";
                                a4_mail = "Y";
                            }
                            break;
                        }
                    }
                }
                if (list05 != null) {
                    for (UserInfoVO vo : list05) {
//					   logger.info(vo.getUser_no()+",");
                        if (vo.getUser_no() == user_no && sess_apprVO.get("05").getStep().equals("05")) {
//						   logger.info("status05::::::::::::::::::confirm"+ vo.getUser_no() +":::::::session"+ user_no +":::::::::::::region"+ vo.getRegion() +":::::sessRegion"+ sessRegion +"::::appr05:::"+ sess_apprVO.get("05").getStep() +"::::");
                            if (status_cd.equals("05")) {
                                a0 = "Y";
                                a1 = "Y";
                                a2 = "Y";
                                a3 = "Y";
                                a4 = "Y";
                                a5 = "Y";
                                a5_mail = "Y";
                            }
                            break;
                        }
                    }
                }
            }
        }

        HashMap<String, String> confirmAuth = new HashMap<>();
        confirmAuth.put("a0", a0);
        confirmAuth.put("a1", a1);
        confirmAuth.put("a2", a2);
        confirmAuth.put("a3", a3);
        confirmAuth.put("a4", a4);
        confirmAuth.put("a5", a5);
        confirmAuth.put("a0_mail", a0_mail);
        confirmAuth.put("a1_mail", a1_mail);
        confirmAuth.put("a2_mail", a2_mail);
        confirmAuth.put("a3_mail", a3_mail);
        confirmAuth.put("a4_mail", a4_mail);
        confirmAuth.put("a5_mail", a5_mail);

//	   logger.info("confirmAuthhhhhhhhhhhhhhhhhhhhhhhh:"+ confirmAuth.toString());

        return confirmAuth;
    }

    //공급요청작성 페이지
    @SuppressWarnings("unchecked")
    @RequestMapping(value = "/request", method = RequestMethod.GET)
    public String bs_request(Model model
            , @RequestParam(value = "modFlag", required = true, defaultValue = "0") String modFlag
            , @RequestParam(value = "neoss_no", required = false) String neossNo
            , HttpSession session) throws Exception {
        int neoss_no;
        if (isEmpty(neossNo)) {
            neoss_no = 0;
        } else {
            if (isNumeric(neossNo)) {
                neoss_no = toInteger(neossNo);
                if (neoss_no < 1) {
                    neoss_no = 0;
                }
            } else {
                neoss_no = 0;
            }
        }
        BusinessVO bsVO;
        String dept_code;
        HashMap<String, Object> deptMap;
        List<UserInfoVO> list01, list02, list03, list04, list05;

        // 신규등록
        if (neoss_no == 0) {
            bsVO = new BusinessVO();
            bsVO.setShare_cd("15");
            bsVO.setPower_yn(false);
            dept_code = getSessionAttr(session, "dept_code");

            deptMap = (HashMap<String, Object>) emailService.select_teamCode_cd(dept_code);
            deptMap.put("neoss_no", 0);
            list01 = (List<UserInfoVO>) emailService.select_4p_step01(deptMap);
            list02 = (List<UserInfoVO>) emailService.select_4p_step02(deptMap);
            list03 = (List<UserInfoVO>) emailService.select_4p_step03(deptMap);
            list04 = (List<UserInfoVO>) emailService.select_4p_step04(deptMap);
            list05 = (List<UserInfoVO>) emailService.select_4p_step05_cd((String) deptMap.get("cm_code"));
//			listEx = (List<UserInfoVO>) emailService.select_4p_stepEx((String) deptMap.get("oper_code"));
            // 작성중
        } else {
            bsVO = (BusinessVO) businessService.t_bs_list_view(neoss_no);
            List<AttachVO> attachList = attachService.select(neoss_no, table_gb);
            ModelInfoVO infoVO = (ModelInfoVO) neossService.select_inettie(neoss_no);
            dept_code = bsVO.getOffice_no();

            deptMap = (HashMap<String, Object>) emailService.select_teamCode(neoss_no);
            deptMap.put("neoss_no", neoss_no);
            list01 = (List<UserInfoVO>) emailService.select_4p_step01(deptMap);
            list02 = (List<UserInfoVO>) emailService.select_4p_step02(deptMap);
            list03 = (List<UserInfoVO>) emailService.select_4p_step03(deptMap);
            list04 = (List<UserInfoVO>) emailService.select_4p_step04(deptMap);
            list05 = (List<UserInfoVO>) emailService.select_4p_step05(deptMap);
//			listEx = (List<UserInfoVO>) emailService.select_4p_stepEx((String) deptMap.get("oper_code"));

            //승인자 정보 가져오기
//			ConfirmUserVO cfVO = new ConfirmUserVO();
//			cfVO.setNeoss_no(neoss_no);
//			cfVO.setAgw_cd(agw_cd);
//			List<ConfirmUserVO> cfList = includeService.confrimUsrList_agw(cfVO);

            model.addAttribute("attachList", attachList);
            model.addAttribute("infoVO", infoVO);
        }

//		logger.info("listEx::"+ listEx.toString());
        OfficeVO myCmTeam = (OfficeVO) officeService.select_mycmOffice(dept_code);
//        logger.info(myCmTeam.toString());
        if (myCmTeam == null) {
            myCmTeam = new OfficeVO();
            myCmTeam.setBonbu("0");
            myCmTeam.setBranch("0");
            myCmTeam.setOffice("0");
        }
        List<OfficeVO> bonbuList = (List<OfficeVO>) officeService.select_cmBonbuAll();
        List<OfficeVO> branchList = (List<OfficeVO>) officeService.select_cmBranchAll(myCmTeam.getBonbu());
        List<OfficeVO> officeList = (List<OfficeVO>) officeService.select_cmOfficeAll(myCmTeam.getBranch());

        model.addAttribute("cmVO", myCmTeam);
        model.addAttribute("bonbuList", bonbuList);
        model.addAttribute("branchList", branchList);
        model.addAttribute("officeList", officeList);

        //나머지 코드 불러오기 (건물형태, 건물구분, 공급사유)
        HashMap<String, Object> listCodeInfo = new HashMap<String, Object>();
        model.addAttribute("BusinessCode", businessService.t_bs_code(listCodeInfo));

        //장비 정보 불러오기
        HashMap<String, Object> listModelInfo = new HashMap<String, Object>();
        model.addAttribute("BusinessModel", businessService.t_bs_model(listModelInfo));

        if (modFlag.equals("1")) {
            model.addAttribute("modFlag", "Y");
        } else if (modFlag.equals("0")) {
            model.addAttribute("modFlag", "N");
        } else {
            model.addAttribute("modFlag", "X");
        }

//    	logger.info(list01.toString());
        model.addAttribute("bsVO", bsVO);
//    	model.addAttribute("confirmUsrList",cfList);
        model.addAttribute("list01", list01);
        model.addAttribute("list02", list02);
        model.addAttribute("list03", list03);
        model.addAttribute("list04", list04);
        model.addAttribute("list05", list05);
//    	model.addAttribute("listEx", listEx);
        return "business4p/request";
    }

    //공급요청작성 페이지
    @RequestMapping(value = "/history_view", method = RequestMethod.GET)
    public String bs_history_view(HttpServletRequest httpServletRequest, Model model) throws Exception {

        int neoss_no = Integer.parseInt(httpServletRequest.getParameter("neoss_no"));
        int history_no = Integer.parseInt(httpServletRequest.getParameter("history_no"));

        //현재꺼
		/*BusinessVO bsVO_present = new BusinessVO();
		bsVO_present = (BusinessVO) businessService.t_bs_list_view(neoss_no);
		model.addAttribute("bsVO_present",bsVO_present );
		
		//기존꺼
		BusinessVO bsVO_history = new BusinessVO();
		bsVO_history = (BusinessVO) businessService.t_bs_list_view_hist2(history_no);
		model.addAttribute("bsVO_history",bsVO_history);*/
        HashMap<String, Integer> paramInfo = new HashMap<String, Integer>();
        paramInfo.put("neoss_no", neoss_no);
        paramInfo.put("history_no", history_no);

        HashMap<String, Object> resultInfo = businessService.t_bs_list_view_hist3(paramInfo);
        model.addAttribute("result", resultInfo);

        return "business4p/history";
    }

    @SuppressWarnings("unchecked")
    @PostMapping("/macSearching")
    public @ResponseBody
    List<String> macSearching(
            @RequestParam(value = "mac", required = true) String agw_mac) {
        HashMap<String, Object> macMap = new HashMap<>();
        macMap.put("agw_mac", agw_mac.toUpperCase());
        List<String> macList = (List<String>) processService.selectMacSearching(macMap);

        return macList;
    }

    @PostMapping("/eponSearching")
    public @ResponseBody
    String eponSearching(
            @RequestParam(value = "mac", required = true) String agw_mac) {
        if (isEmpty(agw_mac)) {
            return null;
        } else {
            if (agw_mac.length() != 12) {
                return null;
            }
        }
        String epon_mac = processService.selectEponSearching(agw_mac);

        return epon_mac;
    }

    @PostMapping("/managedIpDupliChk")
    public @ResponseBody
    String managedIpDupliChk(
            @RequestParam(value = "ip", required = true) String managed_ip) {
        if (isEmpty(managed_ip)) {
            return null;
        }
        int cnt = processService.selectCntManagedip(managed_ip);

        return cnt + "";
    }

    @PostMapping("/megacoIpDupliChk")
    public @ResponseBody
    String megacoIpDupliChk(
            @RequestParam(value = "ip", required = true) String megaco_ip) {
        if (isEmpty(megaco_ip)) {
            return null;
        }
        int cnt = processService.selectCntMegacoip(megaco_ip);

        return cnt + "";
    }

    //하위지사Ajax
    @RequestMapping(value = "/subOfficeAjax", method = RequestMethod.POST, produces = "application/json;charset=utf8")
    public @ResponseBody
    List<OfficeVO> subOffice(@RequestParam(value = "office_cd", required = false, defaultValue = "") int office_cd) throws Exception {

        HashMap<String, Object> listInfo = new HashMap<String, Object>();
        listInfo.put("office_cd", office_cd);
        List<OfficeVO> list = officeService.t_office_sub_list(listInfo);
        return list;

    }

    //하위지사Ajax
    @RequestMapping(value = "/subOfficeAjaxNew", method = RequestMethod.POST, produces = "application/json;charset=utf8")
    public @ResponseBody
    List<OfficeVO> subOffice_new(@RequestParam(value = "orgscode", required = false, defaultValue = "") String orgscode,
                                 @RequestParam(value = "level", required = false, defaultValue = "") int level) throws Exception {

        HashMap<String, Object> listInfo = new HashMap<String, Object>();
        listInfo.put("orgscode", orgscode);
        listInfo.put("level", level);
        List<OfficeVO> list = officeService.t_office_sub_list(listInfo);
        return list;

    }

    @RequestMapping(value = "/attachDelAjax")
    @ResponseBody
    public String attachDelAjax(@RequestParam(value = "ref_no", required = false, defaultValue = "") int ref_no
            , HttpSession session) throws Exception {


        String result = "";
        try {
            attachment.deleteFile(ref_no, getUserId(session));
            result = "SUCCESS";
        } catch (Exception e) {
            result = "FAILED";
            e.printStackTrace();

        }
        return result;
    }

    @RequestMapping(value = "/rspColcodeAjax", method = RequestMethod.POST)
    public @ResponseBody
    FacilitiesVO rspColcodeAjax(
            @RequestParam(value = "managed_ip", required = true) String managed_ip
            , @RequestParam(value = "colcode", required = true) String colcode) {
        HashMap<String, Object> map = new HashMap<>();
        map.put("managed_ip", managed_ip);
        map.put("colcode", colcode);
        FacilitiesVO vo = agwService.selectFacilities(map);

        if (vo == null) {
            vo = new FacilitiesVO();
        }
        return vo;
    }

    /*
     * 반려시 전단계로 이동
     */
    @PostMapping("/process_back")
    public String process_back(@ModelAttribute ProcessVO psVO
            , @ModelAttribute ConstructVO csVO
            , HttpSession session
            , HttpServletRequest request) throws Exception {
        psVO.setInput_id(getUserId(session));
        psVO.setUpdate_id(getUserId(session));

        psVO.setReturn_yn(true);
        String status_cd = psVO.getStatus_cd();
        String prev_status = statusPrev(status_cd);

        //반려의견 등록하고
        processService.process_reg(psVO);

        //전단계 의견 current_yn = false
        psVO.setStatus_cd(prev_status);
        if (prev_status.equals("00")) {
            processService.process_reg(psVO);
        } else {
            processService.updateProcess_back(psVO);
        }

        //착공상태 삭제 하기
        if (status_cd.equals("05")) {
            String const_no = request.getParameter("constNo");
            if (isEmpty(const_no)) {
                csVO.setConst_no(0);
            } else {
                if (isNumeric(const_no) && !const_no.equals("0")) {
                    csVO.setConst_no(toInteger(const_no));
                    csVO.setUpdate_id(getUserId(session));
                    processService.delete_construct(csVO);
                }
            }
        }

        //문서 상태 변경
        BusinessVO vo = new BusinessVO();
        vo.setNeoss_no(psVO.getNeoss_no());
        vo.setStatus_cd(psVO.getStatus_cd());
        vo.setRequest_yn(false);
        businessService.t_bs_update(vo);

        BusinessVO mailbsVO = new BusinessVO();
        mailbsVO.setStatus_cd(statusBack(status_cd));
        mailbsVO.setNeoss_no(psVO.getNeoss_no());
        mailbsVO.setRequest_yn(vo.getRequest_yn());
        mailbsVO.setProcess_no(psVO.getProcess_no());
        mailbsVO.setReason("반려");
        mailbsVO.setAgw_cd(agw_cd);
        //이메일전송
        sendMail(mailbsVO, session);

        return "include/refresh";
    }

    @RequestMapping(value = "/process_write", method = RequestMethod.POST)
    public String rstProcess(
            @ModelAttribute ProcessVO psVO
            , @ModelAttribute ModelInfoVO mdVO
            , HttpSession session) throws Exception {

        boolean mod_flag = false;
        if (psVO.getProcess_no() > 0) {
            mod_flag = true;
        }

        BusinessVO vo = new BusinessVO();
        vo.setNeoss_no(psVO.getNeoss_no());
//		if("99".equals(psVO.getStatus_cd())) {//반려인경우처음으로
//			vo.setStatus_cd(statusPrev(psVO.getPrev_status()));
////			vo.setStatus_cd("99");
//			vo.setRequest_yn(false);
//			vo.setPrev_status(psVO.getPrev_status());
//		}else {//요청이면
        if (!psVO.getRequest_yn()) {
            String status_next = statusNext(psVO.getStatus_cd());
            vo.setStatus_cd(status_next);
        } else {
            vo.setStatus_cd(psVO.getStatus_cd());
        }
        vo.setRequest_yn(psVO.getRequest_yn());

//		}

//			logger.info("status::::::::"+ psVO.getStatus_cd() +";;;psVO.getRequest:::"+ psVO.getRequest_yn() +"::::mod_flag"+ mod_flag);
        if (!psVO.getStatus_cd().equals("00") && !psVO.getRequest_yn() || (psVO.getStatus_cd().equals("05") && psVO.getRequest_yn())) {
            psVO.setInput_id(getUserId(session));
            psVO.setUpdate_id(getUserId(session));
            if (psVO.getStatus_cd().equals("05")) {
                vo.setRequest_yn(true);
            }

            if (!(psVO.getStatus_cd().equals("01") && !psVO.getRequest_yn())
                    || (psVO.getStatus_cd().equals("05") && psVO.getRequest_yn())) { //투자확정이후부터 입력되게
//				if(!psVO.getStatus_cd().equals("99")) { //반려상태가 요청 된경우 olt 테이블에 인서트 안함
                //오늘날짜 셋팅
                Date today = new Date();
                SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                mdVO.setGubun(agw_cd);
                // OLT 정보입력
                if (psVO.getStatus_cd().equals("02")) {
                    mdVO.setOlt_user_id(getUserId(session));
                    mdVO.setOlt_in_dt(date.format(today));
                    mdVO.setMac_user_id(getUserId(session));
                    mdVO.setMac_in_dt(date.format(today));
                    // POTS 입력자
                } else if (psVO.getStatus_cd().equals("03")) {
                    mdVO.setPots_user_id(getUserId(session));
                    mdVO.setPots_in_dt(date.format(today));
                    // FM 입력자
                } else if (psVO.getStatus_cd().equals("05")) {
                    mdVO.setFm_user_id(getUserId(session));
                    mdVO.setFm_in_dt(date.format(today));
                }

                //단계별승인정보입력
                processService.process_modelInfo_reg(mdVO);
//				}
            }

            //신규등록이면
            if (!mod_flag) {
                processService.process_reg(psVO);
                //문서상태변경
                businessService.t_bs_update(vo);
                //메일보내기
                BusinessVO mailbsVO = new BusinessVO();
                mailbsVO.setStatus_cd(psVO.getStatus_cd());
                mailbsVO.setNeoss_no(psVO.getNeoss_no());
                mailbsVO.setRequest_yn(vo.getRequest_yn());
                mailbsVO.setProcess_no(psVO.getProcess_no());
                mailbsVO.setAgw_cd(agw_cd);
                //이메일전송
                sendMail(mailbsVO, session);
            } else {
                //검토의견만 수정
                processService.process_modi(psVO);
            }

        } else {
            businessService.t_bs_update(vo);
            //메일보내기
            BusinessVO mailbsVO = new BusinessVO();
            mailbsVO.setStatus_cd(psVO.getStatus_cd());
            mailbsVO.setNeoss_no(psVO.getNeoss_no());
            mailbsVO.setRequest_yn(vo.getRequest_yn());
            mailbsVO.setProcess_no(psVO.getProcess_no());
            mailbsVO.setAgw_cd(agw_cd);
            //이메일전송
            sendMail(mailbsVO, session);
        }

        return "include/refresh";

    }

    @RequestMapping(value = "/process_modi", method = RequestMethod.POST)
    public String process_modi(@ModelAttribute ProcessVO psVO,
                               @ModelAttribute ModelInfoVO mdVO, HttpSession session) throws Exception {

        if (mdVO.getManaged_ip() != null && !mdVO.getManaged_ip().isEmpty()) {
            mdVO.setGubun(agw_cd);
            //단계별승인정보입력
            processService.process_modelInfo_reg(mdVO);
        }
        if (psVO.getProcess_no() > 0) {
            //승인이력수정
            psVO.setUpdate_id(session.getAttribute("user_id").toString());
            processService.process_modi(psVO);
        }


        return "include/refresh";

    }

    @RequestMapping(value = "/del_request", method = RequestMethod.GET)
    public String bs_del_request(@RequestParam(value = "neoss_no", required = false, defaultValue = "") int neoss_no
            , @RequestParam(value = "page", required = false, defaultValue = "") String page, Model model) throws Exception {
        try {
            businessService.t_bs_del(neoss_no);
            model.addAttribute("msg", "OK");
        } catch (Exception e) {
            model.addAttribute("msg", "fail");
        }
        return page;

    }

    @InitBinder
    public void initBinder(WebDataBinder binder) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        sdf.setLenient(true);
        binder.registerCustomEditor(Date.class, new CustomDateEditor(sdf, true, 10));
    }

    private PrintWriter alert(HttpServletResponse response, String msg) throws IOException {
        response.setCharacterEncoding("EUC-KR");
        PrintWriter writer = response.getWriter();
        writer.println("<script type='text/javascript'>");
        writer.println("alert('" + msg + "');");
        writer.println("history.back();");
        writer.println("</script>");

        return writer;
    }

    @RequestMapping(value = "/write", method = RequestMethod.POST)
    public String bs_submit(
            @ModelAttribute @Valid NeossData neossVO
            , BindingResult br
            , @RequestParam(value = "inet_tie", required = true) String inet_tie
            , MultipartHttpServletRequest mhsq
            , Model model
            , HttpSession session
            , HttpServletResponse response
            , ConfirmUserVO cfVO) throws Exception {

        String msg = "";
        if (br.hasErrors()) {
            List<FieldError> errors = br.getFieldErrors();
            for (FieldError error : errors) {
                msg = error.getDefaultMessage();
                logger.info("msg======================" + msg);
                PrintWriter writer = alert(response, msg);
                writer.flush();
                break;
            }
            return null;
        }
        ModelInfoVO infoVO = new ModelInfoVO();
        if (isEmpty(inet_tie)) {
            PrintWriter writer = alert(response, "Inet-Tie 정보를 입력해 주세요.");
            writer.flush();
            return null;
        } else {
            infoVO.setInet_tie(inet_tie);
        }
        if (isNull(neossVO.isDirect_yn())) {
            neossVO.setDirect_yn(false);
        }
//		logger.info("direct_ynnnnnnnnnnnnnnnnnnnnnnnnnnnn:"+ neossVO.isDirect_yn());
        neossVO.setInput_id(getUserId(session));
        neossVO.setUpdate_id(getUserId(session));
        cfVO.setAgw_cd(agw_cd);
        String status_cd = neossVO.getStatus_cd();
        int neoss_no = neossVO.getNeoss_no();
        if (neoss_no > 0) {
            neossService.t_bs_modify(neossVO, infoVO, cfVO, mhsq);
        } else {
            int device_num = neossVO.getDevice_num();
            if (device_num > 1) {
                status_cd = "00";
                neossVO.setDevice_num(1);
                int expense1 = neossVO.getExpense1() / device_num;
                int expense2 = neossVO.getExpense2() / device_num;
                int expense3 = neossVO.getExpense3() / device_num;
                int expense4 = neossVO.getTot_expense() / device_num;

                for (int i = 0; i < device_num; i++) {
                    neossVO.setExpense1(expense1);
                    neossVO.setExpense2(expense2);
                    neossVO.setExpense3(expense3);
                    neossVO.setTot_expense(expense4);
                    if (i > 0)
                        mhsq = null;
                    neossService.t_bs_reg(neossVO, infoVO, cfVO, mhsq);
                }
            } else {
                neoss_no = neossService.t_bs_reg(neossVO, infoVO, cfVO, mhsq);
            }
        }

        //요청시 메일 보내기
        if (!status_cd.equals("00")) {
            BusinessVO mailbsVO = new BusinessVO();
            mailbsVO.setNeoss_no(neoss_no);
            mailbsVO.setStatus_cd("00");
            mailbsVO.setRequest_yn(neossVO.isRequest_yn());
            mailbsVO.setAgw_cd(agw_cd);

            sendMail(mailbsVO, session);
        }

        model.addAttribute("msg", "OK");
        return "business4p/request";
    }


    //착공,준공 정보 등록
    @RequestMapping(value = "/construct_write", method = RequestMethod.POST)
    public String bs_construct_write(
            @ModelAttribute ConstructVO csVO
            , @ModelAttribute ProcessVO psVO
            , HttpSession session
            , Model model
            , HttpServletRequest httpServletRequest) throws Exception {
        String const_no = httpServletRequest.getParameter("constNo");
        csVO.setInput_id(session.getAttribute("user_id").toString());

        Map<String, Object> paramMap = new HashMap<String, Object>();
        //신규등록이면
        if (isEmpty(const_no)) {
            List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
            String[] arryInfo = null;
            if (!isEmpty(csVO.getMem_04_id())) {
                arryInfo = new String[csVO.getMem_04_id().split(",").length];
                arryInfo = csVO.getMem_04_id().split(",");
                for (int i = 0; i < arryInfo.length; i++) {
                    list.add(csMemberMap(1, "04", toInteger(arryInfo[i]), (String) session.getAttribute("user_id"), 0));
                }
            }

            paramMap.put("list", list);

            //공사정보 입력하기
            businessService.t_construct_reg(csVO, paramMap);
            //승인이력에 입력하기
            psVO.setInput_id(session.getAttribute("user_id").toString());
            psVO.setUpdate_id(session.getAttribute("user_id").toString());
            processService.process_reg(psVO);

            //다음으로 상태 변경하기
            paramMap.clear();
            paramMap.put("neoss_no", psVO.getNeoss_no());
            paramMap.put("request_yn", psVO.getRequest_yn());
            if (!psVO.getRequest_yn()) {
                paramMap.put("status_cd", statusNext(psVO.getStatus_cd()));
            } else {
                paramMap.put("status_cd", psVO.getStatus_cd());
            }

            businessService.t_construct_stat_change(paramMap);

            BusinessVO mailbsVO = new BusinessVO();
            mailbsVO.setStatus_cd(psVO.getStatus_cd());
            mailbsVO.setNeoss_no(psVO.getNeoss_no());
            mailbsVO.setRequest_yn(psVO.getRequest_yn());
            mailbsVO.setAgw_cd(agw_cd);
            sendMail(mailbsVO, session);

            //착공수정인경우
        } else {
            psVO.setUpdate_id(session.getAttribute("user_id").toString());
            csVO.setConst_no(Integer.parseInt(const_no));
            businessService.t_construct_modi(csVO, paramMap);
            processService.process_modi(psVO);
        }

        model.addAttribute("msg", "OK");

        return "include/refresh";
    }

    @SuppressWarnings("unchecked")
    @RequestMapping(value = "/bs_excel_download")
    public @ResponseBody
    void bs_excel_download(HttpServletResponse response, @ModelAttribute SearchVO search,
                           HttpSession session, HttpServletRequest request) throws Exception {

        if (!isNull(search.getSearchTxt())) {
            //한번 더 인코딩 된 데이터를 utf8로 디코드해줌 (한번은 자동은로 decode되니까 한번만 더 해주면 됨)
            search.setSearchTxt(URLDecoder.decode(search.getSearchTxt(), "UTF-8"));
//			logger.info("utf-8    :>>>>"+search.getSearchTxt());
        }

        HashMap<String, Object> pageInfo = getPageInfo(search, session);
        logger.info(pageInfo.toString());
        //리스트불러오기
        List<Agw4pExcelVO> bs_list = (List<Agw4pExcelVO>) businessService.t_bs_list_excel(pageInfo);

        commonutil.excel_download(bs_list, response, agw_cd, request);

    }

    public HashMap<String, Object> csMemberMap(int const_no, String mem_cd, int user_no,
                                               String input_id, int const_mem_no) throws Exception {

        HashMap<String, Object> map = new HashMap<String, Object>();

        map.put("mem_cd", mem_cd);
        map.put("member_id", user_no);
        map.put("input_id", input_id);
        map.put("const_mem_no", const_mem_no);

        return map;
    }

    //현재상태 구하기
    public String statusChk(String statusCd, boolean rstYn) {

        String result = "";

        if ("00".equals(statusCd) && !rstYn) { //작성중
            result = "작성중";
        } else if ("01".equals(statusCd) && !rstYn) {//확정요청
            result = "투자확정요청";
        } else if ("01".equals(statusCd) && rstYn) {//확정
            result = "투자확정";
        } else if ("02".equals(statusCd) && !rstYn) {//IP확정 요청
            result = "IP&MAC확정요청";
        } else if ("02".equals(statusCd) && rstYn) {//IP확정
            result = "IP&MAC확정";
        } else if ("03".equals(statusCd) && !rstYn) {//MGID확정 요청
            result = "MGID확정요청";
        } else if ("03".equals(statusCd) && rstYn) {//MGID 확정
            result = "MGID확정";
        } else if ("04".equals(statusCd) && !rstYn) {//공사요청
            result = "착공(공사요청)";
        } else if ("04".equals(statusCd) && rstYn) {//공사중(착공)
            result = "착공(공사요청)";
        } else if ("05".equals(statusCd) && !rstYn) {//COLCODE확정 요청
            result = "COLCODE확정요청";
        } else if ("05".equals(statusCd) && rstYn) {//COLCODE확정
            result = "COLCODE확정";
        } else if ("06".equals(statusCd) && !rstYn) {//준공요청
            result = "준공요청";
        } else if ("06".equals(statusCd) && rstYn) {//준공
            result = "준공";
        } else if ("99".equals(statusCd) && rstYn) {//반려
            result = "반려";
        } else {
            result = "알수없음";
        }
        return result;

    }

    public String statusChk2(String statusCd, boolean rstYn, boolean returnYn) {

        String result = "";

        if ("00".equals(statusCd) && !rstYn) { //작성중
            result = "작성중";
        } else if ("01".equals(statusCd) && !rstYn) {//확정요청
            result = "투자확정요청";
        } else if ("01".equals(statusCd) && rstYn) {//확정
            result = "투자확정";
        } else if ("02".equals(statusCd) && !rstYn) {//IP확정 요청
            result = "IP&MAC확정요청";
        } else if ("02".equals(statusCd) && rstYn) {//IP확정
            result = "IP&MAC확정";
        } else if ("03".equals(statusCd) && !rstYn) {//MGID확정 요청
            result = "MGID확정요청";
        } else if ("03".equals(statusCd) && rstYn) {//MGID 확정
            result = "MGID확정";
        } else if ("04".equals(statusCd) && !rstYn) {//공사요청
            result = "착공(공사요청)";
        } else if ("04".equals(statusCd) && rstYn) {//공사중(착공)
            result = "착공(공사요청)";
        } else if ("05".equals(statusCd) && !rstYn) {//COLCODE확정 요청
            result = "COLCODE확정요청";
        } else if ("05".equals(statusCd) && rstYn) {//COLCODE확정
            result = "COLCODE확정";
        } else if ("06".equals(statusCd) && !rstYn) {//준공요청
            result = "준공요청";
        } else if ("06".equals(statusCd) && rstYn) {//준공
            result = "준공";
        } else if ("99".equals(statusCd) && rstYn) {//반려
            result = "반려";
        } else {
            result = "알수없음";
        }
        if (returnYn) result += " 반려";

        return result;

    }

    public String statusNext(String val) {

        String result = "";
        //임시
        if ("00".equals(val)) {
            result = "01";
        } else if ("01".equals(val)) {
            result = "02";
        } else if ("02".equals(val)) {
            result = "03";
        } else if ("03".equals(val)) {
            result = "04";
        } else if ("04".equals(val)) {
            result = "05";
        } else if ("05".equals(val)) {
            result = "05";
        } else if ("99".equals(val)) {
            result = "01";
        }
        return result;

    }

    public String statusPrev(String val) {
        String result = "";
        if (val.equals("01")) {
            result = "99";
        } else if (val.equals("02")) {
            result = "01";
        } else if (val.equals("03")) {
            result = "02";
        } else if (val.equals("04")) {
            result = "03";
        } else if (val.equals("05")) {
            result = "04";
        } else {
            result = "99";
        }
        return result;
    }

    public String statusBack(String val) {
        String result = "";
        if (val.equals("01")) {
            result = "99";
        } else if (val.equals("02")) {
            result = "00";
        } else if (val.equals("03")) {
            result = "01";
        } else if (val.equals("04")) {
            result = "02";
        } else if (val.equals("05")) {
            result = "03";
        } else {
            result = "99";
        }
        return result;
    }

    private String getStatusNm(String status_cd) {
        String result = "";
        switch (status_cd) {
            case "01":
                result = "투자확정";
                break;
            case "02":
                result = "IP&MAC확정";
                break;
            case "03":
                result = "MGID확정";
                break;
            case "04":
                result = "착공(공사요청)";
                break;
            case "05":
                result = "COLCODE확정";
                break;
            default:
                result = "그외";
                break;
        }
        return result;
    }

    @RequestMapping(value = "/reWriteMail", method = RequestMethod.POST)
    public String reWriteMail(@ModelAttribute ProcessVO psVO, Model model, HttpSession session) throws Exception {
        BusinessVO mailbsVO = new BusinessVO();
        mailbsVO.setNeoss_no(psVO.getNeoss_no());
        mailbsVO.setStatus_cd(psVO.getStatus_cd());
        mailbsVO.setRequest_yn(psVO.getRequest_yn());
        mailbsVO.setAgw_cd(agw_cd);
//		logger.info(psVO.getStatus_cd());
//		logger.info(mailbsVO.toString());

        sendMail(mailbsVO, session);

        return "include/refresh";
//		return null;
    }

    @SuppressWarnings({"unchecked", "unused"})
    public void sendMail(BusinessVO bsVO, HttpSession session) throws Exception {
        String status = bsVO.getStatus_cd();
        bsVO.setInput_id(session.getAttribute("user_id").toString());
        List<UserInfoVO> email_list = new ArrayList<>();

        HashMap<String, Object> deptMap = (HashMap<String, Object>) emailService.select_teamCode(bsVO.getNeoss_no());
        deptMap.put("neoss_no", bsVO.getNeoss_no());
//		logger.info(deptMap.toString());
//		logger.info(status);

        //00 작성자
        //01 선로시설팀
        //02 운용팀
        //03 교환기술지원팀
        //04 설계팀
        //05 CS지원팀
        //Ex 2군협력사
        List<UserInfoVO> list00 = (List<UserInfoVO>) emailService.select_4p_step00(bsVO.getNeoss_no());
        List<UserInfoVO> list01 = (List<UserInfoVO>) emailService.select_4p_step01(deptMap);
        List<UserInfoVO> list02 = (List<UserInfoVO>) emailService.select_4p_step02(deptMap);
        List<UserInfoVO> list03 = (List<UserInfoVO>) emailService.select_4p_step03(deptMap);
        List<UserInfoVO> list04 = (List<UserInfoVO>) emailService.select_4p_step04(deptMap);
        List<UserInfoVO> list05 = (List<UserInfoVO>) emailService.select_4p_step05(deptMap);
        List<UserInfoVO> listEx = (List<UserInfoVO>) emailService.select_4p_stepEx((String) deptMap.get("oper_code"));
        List<UserInfoVO> listPr = (List<UserInfoVO>) emailService.select_4p_process(bsVO);

        String msg = "";
        switch (status) {
            case "00":
                // 00:승인요청 - 선로시설팀
                msg = "투자확정요청 - 선로시설팀";
                email_list.addAll(list01);
                break;
            case "01":
                // 01:투자확정 - 운용팀, 2군협력사, 교환기술지원팀, 설계팀
                msg = "IP확정요청 - 운용팀, 2군협력사, 교환기술지원팀, 설계팀";
                email_list.addAll(list02);
                email_list.addAll(list03);
                email_list.addAll(list04);
                if (!bsVO.isDirect_yn()) {
                    email_list.addAll(listEx);
                }
                break;
            case "02":
                // 02:IP확정 - 교환기술지원팀
                msg = "MGID확정요청 - 교환기술지원팀";
                email_list.addAll(list03);
                break;
            case "03":
                // 03:MGID확정 - 작성자, 운용팀, 2군협력사, 교환기술지원팀, 설계팀, CS지원팀, 관련된 모든 사람
                msg = "착공확정요청 - 작성자, 운용팀, 2군협력사, 교환기술지원팀, 설계팀, CS지원팀, 관련된 모든 사람";
                email_list.addAll(list00);
                email_list.addAll(list01);
                email_list.addAll(list02);
                email_list.addAll(list03);
                email_list.addAll(list04);
                email_list.addAll(list05);
                if (!bsVO.isDirect_yn()) {
                    email_list.addAll(listEx);
                }
                break;
            case "04":
                // 04:착공 - 2군협력사, CS지원팀
                msg = "colcode확정요청 - 2군협력사, CS지원팀";
                if (!bsVO.isDirect_yn()) {
                    email_list.addAll(listEx);
                }
                email_list.addAll(list05);
                break;
            case "05":
                // 05:COLOCDE확정 - 관련된 모든 사람들
                msg = "colcode확정완료 - 관련된 모든 사람들";
                email_list.addAll(list00);
                email_list.addAll(list01);
                email_list.addAll(list02);
                email_list.addAll(list03);
                email_list.addAll(list04);
                email_list.addAll(list05);
                if (!bsVO.isDirect_yn()) {
                    email_list.addAll(listEx);
                }
                break;
            case "99":
                msg = "반려 - 작성자";
                email_list.addAll(list00);
            default:
                break;
        }

        if (email_list.size() == 0) {
            logger.info("email_list nullllllllllllllllllllllllllllllllll");
            return;
        } else {
            logger.info("msggggggggggggggggggggggggg====" + status + "_" + msg);
            email_list = new ArrayList<>(
                    new HashSet<>(email_list));
        }

        //셋팅하기
        EmailVO mailVO = new EmailVO();

        //승인자 정보 가져오기
        ConfirmUserVO cfVO = new ConfirmUserVO();
        cfVO.setNeoss_no(bsVO.getNeoss_no());
        cfVO.setAgw_cd(agw_cd);
        List<ConfirmUserVO> cfList = includeService.confrimUsrList_agw(cfVO);
        for (int i = 0; i < cfList.size(); i++) {
            if (cfList.get(i).getPhone_number() != null || !cfList.get(i).getPhone_number().equals("")) {
                cfList.get(i).setPhone_number(toTelNum(cfList.get(i).getPhone_number()));
            }
        }

        //해당승인자및부서리스트
        String[] receiver = new String[0];
        String[] receiverCC = new String[0];
        for (int i = 0; i < email_list.size(); i++) {
//			logger.info(email_list.get(i).toString());
            if (email_list.get(i).getChk() == null || email_list.get(i).getChk().equals("1")) {
                if (!isNull(email_list.get(i).getEmail_address())) {
                    //				if (email_list.get(i).getDft().equals("1")) {
                    receiver = AddToStringArray(receiver, email_list.get(i).getEmail_address());
                    //				} else {
                    //					receiverCC = AddToStringArray(receiverCC, email_list.get(i).getEmail_address());
                    //				}
                }
            }
        }

        if (receiver.length > 0) {
            String title = "";
            if ("99".equals(bsVO.getStatus_cd())) {
                title = statusChk(bsVO.getStatus_cd(), true);
            } else if (!isNull(bsVO.getReason()) && bsVO.getReason().equals("반려")) {
                title = statusChk(statusNext(statusNext(bsVO.getStatus_cd())), true) + " 반려";
            } else {
                title = statusChk(statusNext(bsVO.getStatus_cd()), bsVO.getRequest_yn());
            }
//			logger.info(bsVO.getStatus_cd());
//			logger.info(title);

            BusinessVO bsView = (BusinessVO) businessService.t_bs_list_view(bsVO.getNeoss_no());
            bsView.setStatus_cd(bsVO.getStatus_cd());
            HashMap<String, Object> info = new HashMap<String, Object>();
            info.put("neoss_no", bsVO.getNeoss_no());
            info.put("status_cd", bsVO.getStatus_cd());
            info.put("gubun", agw_cd); //agw
            ModelInfoVO mdVO = processService.process_modelInfo_view(info);
            List<ProcessVO> psList = (List<ProcessVO>) processService.selectCurrent(bsVO.getNeoss_no());
            mailVO.setSubject("[4P-AGW] 수요공급요청(" + title + ")");
            mailVO.setContent(emailSender.getEmailContent03(bsView, mdVO, title, psList, list01, list02, list03, list04, list05));
            mailVO.setReceiverCC(receiverCC);
            mailVO.setReceiver(receiver);

            //보내기
            emailSender.sendEmail(mailVO);
        }
    }

    public String getUserId(HttpSession session) {
        return session.getAttribute("user_id").toString();
    }

    public String getSessionAttr(HttpSession session, String name) {
        String result = "";
        if (isNull(session.getAttribute(name))) {
            result = "";
        } else {
            result = session.getAttribute(name).toString();
        }
        return result;
    }

    public List<ConfirmUserVO> getConfirmList(List<ApprovalInfoVO> apprList) {
        List<ConfirmUserVO> cfList = new ArrayList<ConfirmUserVO>();
        int j = 0;
        for (int i = 1; i <= 5; i++) {
            ConfirmUserVO vo = new ConfirmUserVO();
            String status_cd = "0" + i;
            int maxSize = apprList.size();
            if (maxSize > j) {
                if (status_cd.equals(apprList.get(j).getStep())) {
                    vo.setStatus_cd(apprList.get(j).getStep());
                    vo.setBonbu_name(apprList.get(j).getAppr_name());
                    vo.setOrg_name(apprList.get(j).getDept_name());
                    vo.setEmp_name(apprList.get(j).getEmp_name());
//					vo.setNo_emp(apprList.get(j).getNo_emp());
                    vo.setUser_no(apprList.get(j).getUser_no());
//					logger.info(apprList.get(j).toString());
                    j++;
                } else {
                    vo = new ConfirmUserVO();
                    vo.setStatus_cd(status_cd);
                }
            } else {
                vo = new ConfirmUserVO();
                vo.setStatus_cd(status_cd);
            }
            vo.setStatus(getStatusNm(vo.getStatus_cd()));
//			logger.info("ConfirmUserVO=="+ i +"==="+ vo.toString() );
            cfList.add(vo);
        }

        return cfList;
    }

    @RequestMapping(value = "/ajaxRequestIpEms", method = RequestMethod.POST)
    public @ResponseBody
    EmsVO ajaxRequestIpEms(@RequestBody Map<String, Object> param, HttpSession session) throws Exception {
        EmsVO vo = new EmsVO();
        EmsVO resultVO = null;

        if ("1000".equals((String) param.get("req_cd"))) {
            ModelInfoVO modelVO = new ModelInfoVO();
            modelVO.setNeoss_no(Integer.valueOf((String) param.get("neoss_no")));
            modelVO.setPots_id(Integer.valueOf((String) param.get("pots_id")));
            modelVO.setMegaco_ip((String) param.get("megacoIp"));
            modelVO.setMg_id(Integer.valueOf((String) param.get("mg_id")));
            modelVO.setStart_lln(Integer.valueOf((String) param.get("start_lln")));
            modelVO.setIpsec_ip((String) param.get("ipsec_ip"));
            modelVO.setEms_ip((String) param.get("ems_ip"));

            if (modelVO.getNeoss_no() > 0) {
                aes.ems_send_before_update(modelVO);
            }

        }

        if (!param.isEmpty()) {
            String rstIp = (String) session.getAttribute("ip");
            vo.setUser_ip(rstIp);
            vo.setReq_cd((String) param.get("req_cd"));
            vo.setReq_data((String) param.get("req_data"));

            vo = aes.req_aes_insert(vo);
            if (vo.getAes_no() > 0) {
                int cnt = 0;
                while (true) {
//							logger.info(cnt +"");
                    resultVO = new EmsVO();
                    Thread.sleep(1000);
                    if (cnt == SLEEP_TIME) {
                        aes.res_aes_update(vo.getAes_no());
                        break;
                    } else {
                        cnt = cnt + 1;
                        resultVO = aes.res_aes_select(vo);
                        if (resultVO != null) {
//									logger.info(cnt+ "  " +resultVO.toString());
                            break;
                        }
                    }

                }

            }

        }


        return resultVO;
    }

    @SuppressWarnings("unchecked")
    @PostMapping("/cmBonbuRequest")
    public @ResponseBody
    List<OfficeVO> cmBonbuRequest(
            @RequestParam(value = "orgscode", required = true) String orgscode
            , @RequestParam(value = "gubun", required = true) String gubun) {

        List<OfficeVO> officeList = new ArrayList<>();
        if (!isEmpty(orgscode)) {
            if (gubun.equals("bonbu")) {
                officeList = (List<OfficeVO>) officeService.select_cmBranchAll(orgscode);
            } else if (gubun.equals("branch")) {
                officeList = (List<OfficeVO>) officeService.select_cmOfficeAll(orgscode);
            }
        }

        return officeList;
    }

    @SuppressWarnings("unchecked")
    @PostMapping("/cmOfficeRequest")
    public @ResponseBody
    HashMap<String, Object> cmOfficeRequest(
            @RequestParam(value = "orgscode", required = true) String orgscode
            , @RequestParam(value = "neoss_no", required = false) String neossNo) {
        int neoss_no;
        if (isEmpty(neossNo)) {
            neoss_no = 0;
        } else {
            if (isNumeric(neossNo)) {
                neoss_no = toInteger(neossNo);
                if (neoss_no < 1) {
                    neoss_no = 0;
                }
            } else {
                neoss_no = 0;
            }
        }

        if (!isEmpty(orgscode)) {
            HashMap<String, Object> deptMap = (HashMap<String, Object>) emailService.select_teamCode_cd(orgscode);
            deptMap.put("neoss_no", neoss_no);
            List<UserInfoVO> list01 = (List<UserInfoVO>) emailService.select_4p_step01(deptMap);
            List<UserInfoVO> list02 = (List<UserInfoVO>) emailService.select_4p_step02(deptMap);
            List<UserInfoVO> list03 = (List<UserInfoVO>) emailService.select_4p_step03(deptMap);
            List<UserInfoVO> list04 = (List<UserInfoVO>) emailService.select_4p_step04(deptMap);
            List<UserInfoVO> list05 = (List<UserInfoVO>) emailService.select_4p_step05(deptMap);

            HashMap<String, Object> result = new HashMap<>();
            result.put("list01", list01);
            result.put("list02", list02);
            result.put("list03", list03);
            result.put("list04", list04);
            result.put("list05", list05);

            return result;
        } else {
            return new HashMap<>();
        }
    }

}
