<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.kt.agwne.facilityMapper">

	<select id="selectMacAll" resultType="macVO" parameterType="HashMap">
		<![CDATA[
		select row_number() over(order by a.mac_no asc) as rownum
		     , a.serial_num
		     , a.agw_mac
			 , a.epon_mac
			 , a.excel_yn
			 , z.emp_name as input_nm
			 , a.input_dt
			 , c.doc_no
			 , b.colcode
			 , a.mac_no
		  from agwne.t_mac a
		       left outer join agwne.t_org_user z on (a.input_id = z.no_emp)
		       left outer join agwne.t_olt_pots_fms_mac b on (a.agw_mac = b.mac)
		       left outer join agwne.t_neoss c on (b.neoss_no = c.neoss_no and b.gubun = c.agw_cd and c.del_yn = false)
		 where a.del_yn = false
		 
		]]>
		<if test="searchTxt != null and searchTxt != ''">
			   and ${searchType} like '${fullTxt}%'
		</if>
		<![CDATA[
		 order by a.mac_no desc
		 limit #{recordsPerPage} offset #{startRecord}	
		]]>
	</select>
	
	<select id="selectMacCnt" resultType="int" parameterType="HashMap">
		<![CDATA[
		select count(*) as totalCnt
		  from agwne.t_mac a
		       left outer join agwne.t_org_user b on (a.input_id = b.no_emp)
		 where del_yn = false
		]]>
		<if test="searchTxt != null and searchTxt != ''">
			<![CDATA[
			   and ${searchType} like '${fullTxt}%'
			]]>
		</if>
	</select>
	
	<select id="selectDuplicate" resultType="int" parameterType="String">
		<![CDATA[
		select count(*) as cnt
		  from agwne.t_mac a
		 where a.del_yn = false
		   and a.agw_mac = #{agw_mac}
		]]>
	</select>
	
	<insert id="insertOrUpdateExcelUpload" parameterType="macVO">
		<![CDATA[
		insert into agwne.t_mac (
			   serial_num
			 , agw_mac
			 , epon_mac
			 , input_id
			 , update_id
		) values (
			   #{serial_num}
			 , #{agw_mac}
			 , #{epon_mac}
			 , #{input_id}
			 , #{update_id}
		) ON CONFLICT (agw_mac) DO UPDATE SET
		  epon_mac = #{epon_mac}
		, serial_num = #{serial_num}
		]]>
			
	</insert>
	
	<update id="updateExcelFile" parameterType="excelVO">
	<![CDATA[
		update agwne.t_mac_excel set
		       insert_file = #{insert_file}
		     , duplicate_file = #{duplicate_file}
		 where excel_no = #{excel_no}
	]]>
	</update>
	
	<select id="selectMacExcel" resultType="excelVO" parameterType="int">
	<![CDATA[
		select a.upload_file
		     , a.filename_new
		     , a.insert_file
		     , a.duplicate_file
		     , a.input_id
		     , a.input_dt
		     , to_char(a.input_dt, 'yyyy/mm/') as filepath
		  from agwne.t_mac_excel a
		 where a.excel_no = #{excel_no}
	]]>
	</select>
	
	<insert id="insertOrUpdateMac" parameterType="macOneVO">
	<![CDATA[
		insert into agwne.t_mac (
			   serial_num
			 , agw_mac
			 , epon_mac
			 , input_id
			 , excel_yn
			 , update_id
		) values (
			   #{serial_num}
			 , #{agw_mac}
			 , #{epon_mac}
			 , #{input_id}
			 , false
			 , #{update_id}
		) on conflict (agw_mac) DO update set
			  serial_num = #{serial_num}
			, epon_mac = #{epon_mac}
			, update_id = #{update_id}
			, update_dt = now()
	]]>
	</insert>
	
	<select id="excelUploadChk" resultType="int" parameterType="String">
		<![CDATA[
		select count(*) as cnt
		 	from agwne.t_mac a
		 where a.del_yn = false
		 	and excel_yn = true
		 	and a.agw_mac = #{agw_mac}
		]]>
	</select>
	
	<select id="macUploadChk" resultType="int" parameterType="String">
		<![CDATA[
		select mac_no from agwne.t_mac
		where agw_mac = #{agw_mac}
		]]>
	</select>
	
	<update id="macDelete" parameterType="HashMap">
		<![CDATA[
		update agwne.t_mac set
		del_yn = true
		where agw_mac = #{agw_mac}
		and input_id = #{input_id}
		and excel_yn = false
		]]>
	</update>
	
	<select id="macOneInfo" resultType="macOneVO" parameterType="int">
		<![CDATA[
		select input_id
			, agw_mac
			, serial_num
			, epon_mac
		from agwne.t_mac
		where mac_no=#{mac_no}
		]]>
	</select>
	
	<update id="updateOK" parameterType="macOneVO">
		<![CDATA[
			update agwne.t_mac set
				serial_num = #{serial_num}
				, agw_mac = #{agw_mac}
				, epon_mac = #{epon_mac}
				, update_id = #{update_id}
				, update_dt = now()
			where mac_no = #{mac_no}
			and excel_yn = false
		]]>
	</update>

    <select id="reformSearchCode" resultType="codeVO">
		<![CDATA[
		SELECT code_nm, code, column_nm
		FROM agwne.t_code
        WHERE agw_cd='02' AND del_yn IS FALSE
		]]>
	</select>

    <select id="reformSearchVendor" resultType="reformFacilVO">
		<![CDATA[
		  SELECT distinct vendor_nm
		  FROM agwne.t_barcode_device
		  GROUP BY vendor_nm
		]]>
	</select>

	<select id="reformFacilList" resultType="reformFacilVO" parameterType="searchReformFacilVO">
		<![CDATA[
		SELECT 
				A.rnum, A.barcode, A.orgscode, A.orgname, A.office_nm, A.device_cd, A.device_nm, A.addr_cd, A.addr_nm
				, A.use_dt, A.neoss_no, A.use_yn, A.part, A.part_gb, A.tdx_type, A.vendor_nm, A.device_info, A.device_gb
				, R.doc_no
		FROM (
				SELECT
					ROW_NUMBER()OVER(ORDER BY barcode ASC) as rnum,
					barcode, orgscode, orgname, office_nm, a.device_cd, a.device_nm, addr_cd, addr_nm,
	                use_dt, neoss_no, use_yn, part, part_gb, b.tdx_type, b.vendor_nm, b.device_info, b.device_gb
	                
			    FROM
			        agwne.t_barcode a, agwne.t_barcode_device b
	            WHERE
	                a.device_cd = b.device_cd
		 ]]>
        <if test="sh_tdxType != null and !sh_tdxType.equals('')">
            <![CDATA[
				and b.tdx_type in
			]]>
			<foreach item="item" index="index" collection="sh_tdxType" open="(" close=")" separator=",">
				<![CDATA[
				#{item}
				]]>
			</foreach>
        </if>
        <if test="sh_deviceGb != null and !sh_deviceGb.equals('')">
            <![CDATA[
				and b.device_gb in
			]]>
			<foreach item="item" index="index" collection="sh_deviceGb" open="(" close=")" separator=",">
				<![CDATA[
				#{item}
				]]>
			</foreach>
        </if>
        <if test="sh_vendor != null and !sh_vendor.equals('')">
            <![CDATA[
				and b.vendor_nm in
			]]>
			<foreach item="item" index="index" collection="sh_vendor" open="(" close=")" separator=",">
				<![CDATA[
				#{item}
				]]>
			</foreach>
        </if>
        <if test="sh_useyn != null and !sh_useyn.equals('')">
            <![CDATA[
				and a.use_yn = '${sh_useyn}'
			]]>
        </if>
        <if test="sh_barcode != null and !sh_barcode.equals('')">
            <![CDATA[
				and a.barcode like '%${sh_barcode}%'
			]]>
        </if>
        <if test="sh_devCd != null and !sh_devCd.equals('')">
            <![CDATA[
				and a.device_cd like '%${sh_devCd}%'
			]]>
        </if>
        <if test="sh_devNm != null and !sh_devNm.equals('')">
            <![CDATA[
				and .device_nm like '%${sh_devNm}%'
			]]>
        </if>
        <if test="sh_locCd != null and !sh_locCd.equals('')">
            <![CDATA[
				and a.addr_cd like '%${sh_locCd}%'
			]]>
        </if>
        <if test="sh_locNm != null and !sh_locNm.equals('')">
            <![CDATA[
				and a.addr_nm like '%${sh_locNm}%'
			]]>
        </if>
        <![CDATA[
        ) A 
			LEFT OUTER JOIN agwne.t_reform R on (A.neoss_no = R.neoss_no and R.del_yn is false)
			
		    ORDER BY A.rnum desc, A.device_gb, A.vendor_nm, A.tdx_type, A.vendor_nm
		]]>
	</select>

	<select id="select_BarcodeDuplicate" parameterType="String" resultType="int">
		<![CDATA[
		select count(*) cnt
		  from agwne.t_barcode
		 where barcode = #{barcode}
		]]>
	</select>

	<insert id="insertOrUpdate_BarcodeExcelUpload" parameterType="reformFacilVO">
		<![CDATA[
		insert into agwne.t_barcode (
			   barcode
			 , orgscode
			 , orgname
			 , office_nm
			 , device_cd
			 , device_nm
			 , part
			 , part_gb
			 , addr_cd
			 , addr_nm
			 , input_id
			 , update_id
        ) values (
			   #{barcode}
			 , #{orgscode}
			 , #{orgname}
			 , #{office_nm}
			 , #{device_cd}
			 , #{device_nm}
			 , #{part}
			 , #{part_gb}
			 , #{addr_cd}
			 , #{addr_nm}
			 , #{input_id}
			 , #{input_id}
		) on conflict (barcode) DO update set
			  barcode = #{barcode}
		    , orgscode = #{orgscode}
		    , orgname = #{orgname}
		    , office_nm = #{office_nm}
		    , device_cd = #{device_cd}
		    , device_nm = #{device_nm}
		    , part = #{part}
		    , part_gb = #{part_gb}
		    , addr_cd = #{addr_cd}
		    , addr_nm = #{addr_nm}
		    , update_id = #{input_id}
		    , time_stamp = now()
		]]>
	</insert>
	
	<select id="select_device_info" parameterType="String" resultType="reformDeviceVO">
	<![CDATA[
		select
			a.barcode
			, a.office_nm
			, a.device_cd
			, a.device_nm
			, b.vendor_nm
			, b.device_info
			, b.tdx_type
			, b.device_gb
			, a.part
			, a.part_gb
			, a.addr_cd
			, a.addr_nm
			, a.use_yn
			, a.use_dt
		from
			agwne.t_barcode a
			left outer join agwne.t_barcode_device b on (a.device_cd = b.device_cd)
		where a.barcode = #{barcode}
		order by
			a.barcode, a.device_nm, b.vendor_nm, b.tdx_type
		]]>
	</select>
</mapper>