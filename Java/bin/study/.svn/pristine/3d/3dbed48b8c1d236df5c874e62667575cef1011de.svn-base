/**
 * agw-ne
 *
 * Copyright ⓒ 2018 kt corp. All rights reserved.
 *
 * This is a proprietary software of kt corp, and you may not use this file except in
 * compliance with license agreement with kt corp. Any redistribution or use of this
 * software, with or without modification shall be strictly prohibited without prior written
 * approval of kt corp, and the copyright notice above does not evidence any actual or
 * intended publication of such software.
 * 
 * @ author kt
 * @ since 2018-04-15
 * @ file ReformServiceImpl.java
 * @ version 1.0
 * @ see
 * @ Copyright ⓒ 2018 By kt corp. All rights reserved.
 */

package kr.co.kt.agwne.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import kr.co.kt.agwne.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import kr.co.kt.agwne.dao.ReformDAO;
import kr.co.kt.agwne.service.ReformService;
import kr.co.kt.common.Attachment;

@Service("reformService")
public class ReformServiceImpl implements ReformService {
	private static final String table_gb = "t_reform";
	@Autowired
	private ReformDAO reformDAO;
    @Autowired
    private Attachment attachment;

	@Override
	public Object t_bs_code(HashMap<String, Object> listCodeInfo) throws Exception {
		// TODO Auto-generated method stub
		return reformDAO.t_bs_code(listCodeInfo);
	}
	
	@Override
	public Object t_bs_model(HashMap<String, Object> listModelInfo) throws Exception {
		// TODO Auto-generated method stub
		return reformDAO.t_bs_model(listModelInfo);
	}
	
	@Transactional
	@Override
	public int t_bs_reg(ReformVO rfVO, ConfirmUserVO cfVO, MultipartHttpServletRequest mhsq) throws Exception{
		String id = rfVO.getInput_id();
		//정보등록
		int neoss_no = reformDAO.t_bs_reg(rfVO);
		
		//파일업로드
		attachment.Attachment(mhsq, rfVO.getNeoss_no(), id, table_gb);
		
		//승인자 정보 입력
		String[] no_emp_arry = cfVO.getUserNo().split(",");
		List<ConfirmUserVO> cfvoList = new ArrayList<ConfirmUserVO>();
		HashMap<String, Object> map = new HashMap<String, Object>();
		for (int i = 0; i < no_emp_arry.length; i++) {
			ConfirmUserVO cfVO2 = new ConfirmUserVO();
			cfVO2.setUser_no(Integer.parseInt(no_emp_arry[i]));
			cfVO2.setNeoss_no(neoss_no);
			cfVO2.setAgw_cd(cfVO.getAgw_cd()); // 01:agw 02:reform 03:4p
			cfVO2.setInput_id(id);
			cfVO2.setUpdate_id(id);
			cfVO2.setStatus_cd("0"+String.valueOf(i+1));
			cfvoList.add(cfVO2);
		}
		map.put("neoss_no", rfVO.getNeoss_no());
		map.put("list", cfvoList);
		
		reformDAO.t_bs_reg_confirm(map);
		return neoss_no;
	}
	
	@Transactional
	@Override
	public Object t_bs_modify(ReformVO rfVO, ConfirmUserVO cfVO, MultipartHttpServletRequest mhsq) throws Exception{
		int cnt = 0;
		String id=rfVO.getUpdate_id();
		int neoss_no = rfVO.getNeoss_no();
		reformDAO.t_bs_modify(rfVO);
		
		//파일업로드
		attachment.Attachment(mhsq, rfVO.getNeoss_no(), id, table_gb);
		
		//승인자 정보 입력
		String[] no_emp_arry = cfVO.getUserNo().split(",");
		List<ConfirmUserVO> cfvoList = new ArrayList<ConfirmUserVO>();
		HashMap<String, Object> map = new HashMap<String, Object>();
		for (int i = 0; i < no_emp_arry.length; i++) {
			ConfirmUserVO cfVO2 = new ConfirmUserVO();
			cfVO2.setUser_no(Integer.parseInt(no_emp_arry[i]));
			cfVO2.setNeoss_no(neoss_no);
			cfVO2.setAgw_cd(cfVO.getAgw_cd()); // 01:agw 02:reform 03:4p
			cfVO2.setUpdate_id(id);
			cfVO2.setStatus_cd("0"+String.valueOf(i+1));
			
			cfvoList.add(cfVO2);
		}
		map.put("neoss_no", rfVO.getNeoss_no());
		map.put("list", cfvoList);
		
		reformDAO.t_bs_modi_confirm(map);
		
		return cnt;
		
	}
	
	@Override
	public Object t_bs_list(HashMap<String, Object> listInfo) throws Exception {
		return reformDAO.t_bs_list(listInfo);
	}
	@Override
	public Object t_bs_list_excel(HashMap<String, Object> listInfo) throws Exception {
		return reformDAO.t_bs_list_excel(listInfo);
	}
	@Override
	public HashMap <String,Integer> t_bs_listCnt(HashMap<String, Object> listInfo) throws Exception {
	    return reformDAO.t_bs_listCnt(listInfo); 
	   }	
	
	@Override
	public Object t_bs_list_view(int rstNo) throws Exception {
		return reformDAO.t_bs_list_view(rstNo);
	}
	
	@Override
	public Object t_bs_list_view_hist(HashMap<String, Integer> paramInfo) throws Exception {
		return reformDAO.t_bs_list_view_hist(paramInfo);
	}
	
	@Override
	public Object t_bs_update(BusinessVO bsVO) throws Exception {
		return reformDAO.t_bs_update(bsVO);
	}
	
    @Override
    public int request_prev_no(int rstNo) throws Exception {
        return reformDAO.request_prev_no(rstNo);
    }

    @Override
    public int request_next_no(int rstNo) throws Exception {
        return reformDAO.request_next_no(rstNo);
    }
	@Override
	public int t_construct_reg(ConstructVO csVO) throws Exception{
		return reformDAO.t_construct_reg(csVO);
	}

	@Override
	public int t_construct_modi(ConstructVO csVO, Map<String, Object> paramMap) throws Exception{
		return reformDAO.t_construct_modi(csVO, paramMap);
	}
	@Override
	public ConstructVO t_construct_view(int rstNo) throws Exception {
		return reformDAO.t_construct_view(rstNo);
	}
	@Override
	public int t_bs_del(int neoss_no) throws Exception{
		return reformDAO.t_bs_del(neoss_no);
	}

	@Override
	public int t_construct_stat_change(BusinessVO bsVO) throws Exception {
		return reformDAO.t_construct_stat_change(bsVO);
	}

	@Override
	public int t_bs_reg_confirm(HashMap<String, Object> cfVO) throws Exception {
		return reformDAO.t_bs_reg_confirm(cfVO);
	}

	@Override
	public List<UserInfoVO> search_reg_name() throws Exception {
		// TODO Auto-generated method stub
		return reformDAO.search_reg_name();
	}

	@Override
	public UserInfoVO r_model_person(int neoss_no) throws Exception {
		return reformDAO.r_model_person(neoss_no);
	}

	@Override
	public List<ReformVO> r_history_list(int neoss_no) throws Exception {
		return reformDAO.r_history_list(neoss_no);
	}

	@Override
	public List<OrgVO> search_result_org(HashMap<String, Object> listInfo) throws Exception {
		// TODO Auto-generated method stub
		return reformDAO.search_result_org(listInfo);
	}

	@Override
	public List<ReformDeviceVO> reform_device_all(String tdx_type) throws Exception {
		return reformDAO.reform_device_all(tdx_type);
	}

	@Override
	public int reform_chk_device(String device_cd) throws Exception {
		return reformDAO.reform_chk_device(device_cd);
	}

	@Override
	public int reform_useyn_update(ReformVO vo) throws Exception {
		return reformDAO.reform_useyn_update(vo);
	}

	@Override
	public int reform_useyn_refresh(ReformVO vo) throws Exception {
		return reformDAO.reform_useyn_refresh(vo);
	}
	
	@Override
	public int reform_useyn_decide(BusinessVO vo) throws Exception {
		return reformDAO.reform_useyn_decide(vo);
	}
}
